-- MySQL dump 10.13  Distrib 8.0.18, for Linux (x86_64)
--
-- Host: localhost    Database: uwget
-- ------------------------------------------------------
-- Server version	8.0.18

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `alembic_version`
--

DROP TABLE IF EXISTS `alembic_version`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `alembic_version` (
  `version_num` varchar(32) NOT NULL,
  PRIMARY KEY (`version_num`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `alembic_version`
--

LOCK TABLES `alembic_version` WRITE;
/*!40000 ALTER TABLE `alembic_version` DISABLE KEYS */;
INSERT INTO `alembic_version` VALUES ('2a07c67b5360');
/*!40000 ALTER TABLE `alembic_version` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `category`
--

DROP TABLE IF EXISTS `category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(64) DEFAULT NULL COMMENT '分类名称',
  `title` varchar(64) DEFAULT NULL COMMENT 'url标识',
  `keywords` varchar(128) DEFAULT NULL COMMENT '分类关键词',
  `sort` int(11) DEFAULT NULL COMMENT '列表排序',
  `status` smallint(6) DEFAULT NULL COMMENT '状态',
  `description` varchar(255) DEFAULT NULL COMMENT '分类描述',
  `pid` int(11) DEFAULT NULL COMMENT '父分类ID',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `path` varchar(64) DEFAULT NULL COMMENT '用于查询出子分类的文章',
  `level` int(11) DEFAULT NULL COMMENT '分类级别',
  `is_directory` int(11) DEFAULT NULL COMMENT '判断是否是父级，只要有下一级就是父级',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `category`
--

LOCK TABLES `category` WRITE;
/*!40000 ALTER TABLE `category` DISABLE KEYS */;
INSERT INTO `category` VALUES (1,'WEB编程','ee20d687','PHP,thinkphp,php框架,PHP笔记',100,1,'PHP是我的第一语言，我定当努力总结归纳，我现在在作什么,PHP笔记PHP笔记',0,'2019-11-09 14:26:08','-',0,1),(2,'编程语言','85d51fce','pythonpythonpythonpython,',100,1,'pythonpythonpythonpythonpython',0,'2019-11-09 14:26:07','-',0,1),(3,'操作系统','e71b1a7b','linuxlinuxlinuxlinuxlinuxlinux',100,1,'linuxlinuxlinuxlinuxlinuxlinuxlinux',0,'2019-11-09 14:26:05','-',0,1),(4,'PHP笔记','21908ec5',' debian8 安装使用 shadowsocks-qt5',100,1,' debian8 安装使用 shadowsocks-qt5 debian8 安装使用 shadowsocks-qt5',1,'2019-11-09 14:26:00','-1-',1,0),(5,'Linux学习笔记','debd1e03','Linux学习笔记Linux学习笔记',100,1,'Linux学习笔记 Linux学习笔记Linux学习笔记Linux学习笔记',3,'2019-11-09 14:26:03','-3-',1,0),(6,'python笔记','5a979eb0','python笔记python笔记python笔记',100,1,'python笔记python笔记python笔记python笔记',2,'2019-11-10 14:25:51','-2-',1,0),(7,'社会科学','cac4f1f45','社会科学，自我励志，社',101,1,'社会科学，社会科学，社会科学',0,'2019-11-09 06:25:32','-',0,1),(8,'读后感','ce8c21844','学习技巧,学习方法，读书笔记',103,1,'综合各种读书的笔记，和自己的想法',7,'2019-11-09 06:27:57','-7-',1,0),(9,'网站运营','c1a35f84b','SEO思维，可落地的推广方案，日常的运营学习笔记',102,1,'技术是基础，运营是保障，不应该落下哪一部分，应该虚心受教，认真总结归纳并实践',0,'2019-11-09 06:38:05','-',0,1),(10,'SEO','c33b7f94e','系统SEO/SEM优化能力',101,1,'把学习过的SEO知识系统的总结归纳起来，本站建站初期可能SEO做的不好，后面认真总结实践',9,'2019-11-09 06:39:32','-9-',1,0),(11,'我的世界','cd0828c49','自我反省,自我提醒,把日常自我记录下来',103,1,'反过来告诫自己该做什么，不该做什么',7,'2019-11-10 03:47:37','-7-',1,0);
/*!40000 ALTER TABLE `category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `language`
--

DROP TABLE IF EXISTS `language`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `language` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(64) DEFAULT NULL COMMENT '语言名称',
  `code` varchar(12) DEFAULT NULL COMMENT '国家简码',
  `status` smallint(6) DEFAULT NULL COMMENT '状态',
  `create_time` int(11) DEFAULT NULL COMMENT '创建时间',
  `update_time` int(11) DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `language`
--

LOCK TABLES `language` WRITE;
/*!40000 ALTER TABLE `language` DISABLE KEYS */;
INSERT INTO `language` VALUES (1,'简体中文','zh_cn',2,1566739516,1566910391),(3,'繁体中文','zh_tw',2,1566910111,1566911046),(4,'英文','en',2,1566910111,1566911025);
/*!40000 ALTER TABLE `language` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `permission`
--

DROP TABLE IF EXISTS `permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '权限ID',
  `group_id` int(11) DEFAULT NULL COMMENT '权限组',
  `name` varchar(16) DEFAULT NULL COMMENT '权限名称',
  `code` varchar(32) DEFAULT NULL COMMENT '权限码',
  `create_time` int(11) DEFAULT NULL COMMENT '创建时间',
  `update_time` int(11) DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`),
  KEY `group_id` (`group_id`),
  CONSTRAINT `permission_ibfk_1` FOREIGN KEY (`group_id`) REFERENCES `permission_group` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `permission`
--

LOCK TABLES `permission` WRITE;
/*!40000 ALTER TABLE `permission` DISABLE KEYS */;
INSERT INTO `permission` VALUES (1,1,'添加POST','admin_post_add',1567434983,1567518178),(2,2,'修改配置','change_setting',1567434983,1567434983),(3,1,'列表','admin_post_list',1567517578,1567517578);
/*!40000 ALTER TABLE `permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `permission_group`
--

DROP TABLE IF EXISTS `permission_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `permission_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '组ID',
  `name` varchar(16) DEFAULT NULL COMMENT '组名',
  `create_time` int(11) DEFAULT NULL COMMENT '创建时间',
  `update_time` int(11) DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  UNIQUE KEY `permission_group_name_uindex` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `permission_group`
--

LOCK TABLES `permission_group` WRITE;
/*!40000 ALTER TABLE `permission_group` DISABLE KEYS */;
INSERT INTO `permission_group` VALUES (1,'Post管理',1567085180,1567085180),(2,'系统设置',1567085180,1567086473),(3,'管理员管理',1567085307,1567085307),(4,'语言管理',1567085307,1567086556);
/*!40000 ALTER TABLE `permission_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `posts`
--

DROP TABLE IF EXISTS `posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `posts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `category_id` int(11) DEFAULT NULL COMMENT '该文章属于哪个分类',
  `name` varchar(128) DEFAULT NULL COMMENT '文章标题',
  `title` varchar(64) DEFAULT NULL COMMENT '文章url',
  `keywords` varchar(128) DEFAULT NULL COMMENT '文章关键词',
  `description` varchar(255) DEFAULT NULL COMMENT '文章描述',
  `status` smallint(6) DEFAULT NULL COMMENT '状态',
  `marked` smallint(6) DEFAULT NULL COMMENT '推荐内容',
  `clicks` int(11) DEFAULT NULL COMMENT '点击阅读数',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `references` text COMMENT '参考文献',
  `subtitle` varchar(64) DEFAULT NULL COMMENT '副标题',
  `markdown` text COMMENT '存储markdown文本',
  `markdown_html_code` text COMMENT 'Post内容',
  `uuid` varchar(64) DEFAULT NULL COMMENT '用户UUID，该文章属于那个用户',
  PRIMARY KEY (`id`),
  UNIQUE KEY `title` (`title`),
  KEY `category_id` (`category_id`),
  KEY `uuid` (`uuid`),
  CONSTRAINT `posts_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `category` (`id`),
  CONSTRAINT `posts_ibfk_2` FOREIGN KEY (`uuid`) REFERENCES `user_info` (`uuid`)
) ENGINE=InnoDB AUTO_INCREMENT=68 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `posts`
--

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;
INSERT INTO `posts` VALUES (1,3,'Mongodb学习之异步数据库学习二','p17cbc14f','mongodb,数据库，异步数据库','在开始学习之前，你必须要了解MongoDB的知识，在学习本节之前，你需要先学习MongoDB',1,1,20,'2019-11-03 09:19:08','2019-11-03 09:36:00','','Mongodb异步笔记','学习之前的准备\r\n在开始学习之前，你必须要了解MongoDB的知识，在学习本节之前，你需要先学习MongoDB。下面列出一些学习连接：\r\n1、http://www.runoob.com/mongodb/mongodb-tutorial.html\r\n2、http://docs.mongodb.org/manual/tutorial/getting-started/\r\n用pip 安装motor 和tornado\r\npip install tornado motor\r\n安装完成后，可以在Python开启后 import他，如果不出意外的话应该能正常运行了。\r\nimport motor.motor_tornado\r\n同时也需要mongodb正常使用，如果没有安装，请到官方网站下载想要的版本安装，你可以这样启动它：\r\nmongod\r\n后面我会把我学习MongoDB的笔记也上上来。同时我解释一下带颜色的是在命令行里运行的。\r\n \r\n对象级别\r\nMotor 有点像pyMongo,分为四个层次\r\nMotorClient：用于连接一个mongod进程或者一个集群。你可以创建一个指定的连接对象，连接到mongod或者Mongods,并在应用里使用它，当然这也是有生命周期的。\r\nMotorDatabase：每个Mongod进程都有一个数据库（磁盘上存储的数据库文档集合）。你可以选择连接到数据的哪个集合。\r\nMotorCollection：数据库里有很多个集合，其中包含文档数据；你可以从数据库里引用/提取这些集合\r\n \r\n创建一个客户端连接\r\n在你的应用编程时，般可以通过motoClient()创建一个连接\r\n> client = motor.motor_tornado.MotorClient()\r\n\r\n上面连接默认的Mongod端口27017，但你可以指定你服务器启动的端口\r\n例如如：client = motor.motor_tornado.MotorClient(\'localhost\', 27017)\r\nMotor 也支持URL方式的连接\r\n例如：\r\n> client = motor.motor_tornado.MotorClient(\'mongodb://localhost:27017\')\r\n\r\n同时还可以连接到分片\r\n> client = motor.motor_tornado.MotorClient(\'mongodb://host1,host2/?replicaSet=my-replicaset-name\')\r\n\r\n获取数据库\r\n一个mongodb实例支持多个数据库，当打开一个连接后，你可以连接一个指定的数据库，通过如下的方法，这都是Python常规的用法了，不解释。\r\n> db = client.test_database >>> db = client[\'test_database\']\r\n\r\n由于篇幅问题，我将把文档分为N个部分，下一节将带来在tornado中的引入方式','<p>学习之前的准备<br>在开始学习之前，你必须要了解MongoDB的知识，在学习本节之前，你需要先学习MongoDB。下面列出一些学习连接：<br>1、<a href=\"http://www.runoob.com/mongodb/mongodb-tutorial.html\">http://www.runoob.com/mongodb/mongodb-tutorial.html</a><br>2、<a href=\"http://docs.mongodb.org/manual/tutorial/getting-started/\">http://docs.mongodb.org/manual/tutorial/getting-started/</a><br>用pip 安装motor 和tornado<br>pip install tornado motor<br>安装完成后，可以在Python开启后 import他，如果不出意外的话应该能正常运行了。<br>import motor.motor_tornado<br>同时也需要mongodb正常使用，如果没有安装，请到官方网站下载想要的版本安装，你可以这样启动它：<br>mongod<br>后面我会把我学习MongoDB的笔记也上上来。同时我解释一下带颜色的是在命令行里运行的。</p>\r\n<p>对象级别<br>Motor 有点像pyMongo,分为四个层次<br>MotorClient：用于连接一个mongod进程或者一个集群。你可以创建一个指定的连接对象，连接到mongod或者Mongods,并在应用里使用它，当然这也是有生命周期的。<br>MotorDatabase：每个Mongod进程都有一个数据库（磁盘上存储的数据库文档集合）。你可以选择连接到数据的哪个集合。<br>MotorCollection：数据库里有很多个集合，其中包含文档数据；你可以从数据库里引用/提取这些集合</p>\r\n<p>创建一个客户端连接<br>在你的应用编程时，般可以通过motoClient()创建一个连接</p>\r\n<blockquote>\r\n<p>client = motor.motor_tornado.MotorClient()</p>\r\n</blockquote>\r\n<p>上面连接默认的Mongod端口27017，但你可以指定你服务器启动的端口<br>例如如：client = motor.motor_tornado.MotorClient(‘localhost’, 27017)<br>Motor 也支持URL方式的连接<br>例如：</p>\r\n<blockquote>\r\n<p>client = motor.motor_tornado.MotorClient(‘mongodb://localhost:27017’)</p>\r\n</blockquote>\r\n<p>同时还可以连接到分片</p>\r\n<blockquote>\r\n<p>client = motor.motor_tornado.MotorClient(‘mongodb://host1,host2/?replicaSet=my-replicaset-name’)</p>\r\n</blockquote>\r\n<p>获取数据库<br>一个mongodb实例支持多个数据库，当打开一个连接后，你可以连接一个指定的数据库，通过如下的方法，这都是Python常规的用法了，不解释。</p>\r\n<blockquote>\r\n<p>db = client.test_database &gt;&gt;&gt; db = client[‘test_database’]</p>\r\n</blockquote>\r\n<p>由于篇幅问题，我将把文档分为N个部分，下一节将带来在tornado中的引入方式</p>\r\n','2970940'),(2,3,'centos 7 Iptables 规则重启不生效','paa194249','centos,iptables','学无止境，学海无涯',1,1,20,'2019-11-03 09:38:09','2019-11-03 08:16:15','','centos 7 更换内置的防火墙','CentOS 7.0默认使用的是firewall作为防火墙，这里改为iptables防火墙步骤。所以你编辑的 Iptables 规则 只能一次生效；\r\n\r\n方法如下（方便自己以后查阅）：\r\n\r\n      1、 关闭 默认的 firewall\r\n\r\nsystemctl stop firewalld.service #停止firewall\r\n\r\nsystemctl disable firewalld.service #禁止firewall开机启动\r\n\r\n2、写好自己的规则\r\n\r\n规则处 暂时不详述了，博客里有一章专门说道 规则\r\n\r\nhttp://blog.hlcert.com/287.html\r\n\r\n3、设置开机启动\r\n\r\nsystemctlenable iptables.service #设置防火墙开机启动','<p>CentOS 7.0默认使用的是firewall作为防火墙，这里改为iptables防火墙步骤。所以你编辑的 Iptables 规则 只能一次生效；</p>\r\n<p>方法如下（方便自己以后查阅）：</p>\r\n<pre><code>  1、 关闭 默认的 firewall\r\n</code></pre><p>systemctl stop firewalld.service #停止firewall</p>\r\n<p>systemctl disable firewalld.service #禁止firewall开机启动</p>\r\n<p>2、写好自己的规则</p>\r\n<p>规则处 暂时不详述了，博客里有一章专门说道 规则</p>\r\n<p><a href=\"http://blog.hlcert.com/287.html\">http://blog.hlcert.com/287.html</a></p>\r\n<p>3、设置开机启动</p>\r\n<p>systemctlenable iptables.service #设置防火墙开机启动</p>\r\n','2970940'),(3,3,'tornado MongoDB 异步操作库学习一','p49162e45','mongodb,数据库，异步数据库','motor是tornado的一个python异步操作mongodb的库，功能很强大。',1,2,20,'2019-11-03 09:41:54','2019-11-03 08:16:15','','Mongodb异步笔记','## motor介绍\r\nmotor是tornado的一个python异步操作mongodb的库，功能很强大。官方这样说\r\nMOTOR：是一个异步操作MongoDB的python 驱动库\r\n他提供回调和可预期的非阻塞基础api和mongodb进行通信，在tornado 或者asyncio可以很好的使用它。\r\n他的源码地址：https://github.com/mongodb/motor\r\n文档地址：https://motor.readthedocs.io/en/stable/\r\n使用他的人这样说：\r\n“We use Motor in high throughput environments, processing tens of thousands of requests per second. It allows us to take full advantage of modern hardware, ensuring we utilise the entire capacity of our purchased CPUs. This helps us be more efficient with computing power, compute spend and minimises the environmental impact of our infrastructure as a result.”\r\n—David Mytton, Server Density\r\n“We develop easy-to-use sensors and sensor systems with open source software to ensure every innovator, from school child to laboratory researcher, has the same opportunity to create. We integrate Motor into our software to guarantee massively scalable sensor systems for everyone.”\r\n—Ryan Smith, inXus Interactive\r\n英语太烂，不翻译别人的原话了，将就这看。\r\n安装 motor\r\n直接使用pip\r\n$pip install motor\r\n当然也可以下载源码自己整，源码地址在上面已经写出来了。看readme.md即可得知怎么安装。\r\n一般是这样安装\r\n$python setup.py install 不保证可以，一般python的安装包都用这个命令可以安装，由于我是用pip安装，这里不演示安装了。\r\n所有的操作如果是linux 记得是超级用户哦 sudo 也可以安装，如果你在sudo列表里的话。\r\n \r\n如何从官方获取帮助和提问题\r\n1、通过官方提供的谷歌组来获得帮助：\r\nhttps://groups.google.com/forum/?fromgroups#!forum/mongodb-user\r\n2、验证问题或者特殊问题，请向官方提出帮助\r\nhttps://jira.mongodb.org/secure/Dashboard.jspa\r\n下面是原文连接\r\nContents\r\n\r\n		Differences between Motor and PyMongo \r\n	\r\n\r\n		Motor Features \r\n	\r\n\r\n		Installation \r\n	\r\n\r\n		Requirements \r\n	\r\n\r\n		Tutorial: Using Motor With Tornado \r\n	\r\n\r\n		Tutorial: Using Motor With asyncio \r\n	\r\n\r\n		Motor Examples \r\n	\r\n\r\n		Changelog \r\n	\r\n\r\n		Motor 1.0 Migration Guide \r\n	\r\n\r\n		Developer Guide \r\n	\r\n\r\n		Contributors \r\n	\r\nClasses\r\n\r\n		Motor Tornado API \r\n	\r\n\r\n		MotorClient – Connection to MongoDB \r\n	\r\n\r\n		MotorDatabase \r\n	\r\n\r\n		MotorCollection \r\n	\r\n\r\n		MotorCursor \r\n	\r\n\r\n		Motor GridFS Classes \r\n	\r\n\r\n		motor.web - Integrate Motor with the Tornado web framework \r\n	\r\n\r\n		Motor asyncio API \r\n	\r\n\r\n		AsyncIOMotorClient – Connection to MongoDB \r\n	\r\n\r\n		AsyncIOMotorDatabase \r\n	\r\n\r\n		AsyncIOMotorCollection \r\n	\r\n\r\n		AsyncIOMotorCursor \r\n	\r\n\r\n		asyncio GridFS Classes \r\n	\r\n\r\n		motor.aiohttp - Integrate Motor with the aiohttp web framework \r\n	\r\n有需要可以看。','<h2 id=\"h2-motor-\"><a name=\"motor介绍\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>motor介绍</h2><p>motor是tornado的一个python异步操作mongodb的库，功能很强大。官方这样说<br>MOTOR：是一个异步操作MongoDB的python 驱动库<br>他提供回调和可预期的非阻塞基础api和mongodb进行通信，在tornado 或者asyncio可以很好的使用它。<br>他的源码地址：<a href=\"https://github.com/mongodb/motor\">https://github.com/mongodb/motor</a><br>文档地址：<a href=\"https://motor.readthedocs.io/en/stable/\">https://motor.readthedocs.io/en/stable/</a><br>使用他的人这样说：<br>“We use Motor in high throughput environments, processing tens of thousands of requests per second. It allows us to take full advantage of modern hardware, ensuring we utilise the entire capacity of our purchased CPUs. This helps us be more efficient with computing power, compute spend and minimises the environmental impact of our infrastructure as a result.”<br>—David Mytton, Server Density<br>“We develop easy-to-use sensors and sensor systems with open source software to ensure every innovator, from school child to laboratory researcher, has the same opportunity to create. We integrate Motor into our software to guarantee massively scalable sensor systems for everyone.”<br>—Ryan Smith, inXus Interactive<br>英语太烂，不翻译别人的原话了，将就这看。<br>安装 motor<br>直接使用pip<br>$pip install motor<br>当然也可以下载源码自己整，源码地址在上面已经写出来了。看readme.md即可得知怎么安装。<br>一般是这样安装<br>$python setup.py install 不保证可以，一般python的安装包都用这个命令可以安装，由于我是用pip安装，这里不演示安装了。<br>所有的操作如果是linux 记得是超级用户哦 sudo 也可以安装，如果你在sudo列表里的话。</p>\r\n<p>如何从官方获取帮助和提问题<br>1、通过官方提供的谷歌组来获得帮助：<br><a href=\"https://groups.google.com/forum/?fromgroups#!forum/mongodb-user\">https://groups.google.com/forum/?fromgroups#!forum/mongodb-user</a><br>2、验证问题或者特殊问题，请向官方提出帮助<br><a href=\"https://jira.mongodb.org/secure/Dashboard.jspa\">https://jira.mongodb.org/secure/Dashboard.jspa</a><br>下面是原文连接<br>Contents</p>\r\n<pre><code>    Differences between Motor and PyMongo \r\n\r\n\r\n    Motor Features \r\n\r\n\r\n    Installation \r\n\r\n\r\n    Requirements \r\n\r\n\r\n    Tutorial: Using Motor With Tornado \r\n\r\n\r\n    Tutorial: Using Motor With asyncio \r\n\r\n\r\n    Motor Examples \r\n\r\n\r\n    Changelog \r\n\r\n\r\n    Motor 1.0 Migration Guide \r\n\r\n\r\n    Developer Guide \r\n\r\n\r\n    Contributors \r\n</code></pre><p>Classes</p>\r\n<pre><code>    Motor Tornado API \r\n\r\n\r\n    MotorClient – Connection to MongoDB \r\n\r\n\r\n    MotorDatabase \r\n\r\n\r\n    MotorCollection \r\n\r\n\r\n    MotorCursor \r\n\r\n\r\n    Motor GridFS Classes \r\n\r\n\r\n    motor.web - Integrate Motor with the Tornado web framework \r\n\r\n\r\n    Motor asyncio API \r\n\r\n\r\n    AsyncIOMotorClient – Connection to MongoDB \r\n\r\n\r\n    AsyncIOMotorDatabase \r\n\r\n\r\n    AsyncIOMotorCollection \r\n\r\n\r\n    AsyncIOMotorCursor \r\n\r\n\r\n    asyncio GridFS Classes \r\n\r\n\r\n    motor.aiohttp - Integrate Motor with the aiohttp web framework \r\n</code></pre><p>有需要可以看。</p>\r\n','2970940'),(4,3,'个人使用了很多年的Iptable脚本','p8752b143','iptables,运维记录','防火墙运维脚本，值得收藏，从13年一直在使用，并且修修改改的。',1,2,20,'2019-11-03 12:23:23','2019-11-03 08:16:15','','从开始学习Linux开始，就在书上学写的这个脚本，在公司服务器上也有使用','## 在2013年开始自己搞VPS做网站开始，就写了这个脚本，后面也有修改，觉得还是蛮好用的。\r\n\r\n在维护服务器时经常要手写防火墙脚本，但是自己很懒惰，所以把我写的一些规则记录下来，放在自己的博客上，以后哪台服务器要用，就直接拿来用，多好的一事阿。\r\n> #!/bin/bash\r\niptables -F\r\niptables -F -t nat\r\niptables -X\r\niptables -P INPUT DROP\r\niptables -P OUTPUT ACCEPT\r\niptables -P FORWARD ACCEPT\r\n#module\r\nmodprobe iptable_nat\r\nmodprobe ip_conntrack_ftp\r\nmodprobe ip_nat_ftp\r\n#roules\r\niptables -A INPUT -f -m limit --limit 100/sec --limit-burst 100 -j ACCEPT\r\niptables -A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/s --limit-burst 10 -j ACCEPT\r\niptables -A INPUT -p tcp -m tcp --tcp-flags SYN,RST,ACK SYN -m limit --limit 20/sec --limit-burst 200 -j ACCEPT\r\niptables -A INPUT -i lo -j ACCEPT\r\niptables -A OUTPUT -o lo -j ACCEPT\r\niptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\r\niptables -A INPUT -p tcp -m multiport --dport 80,22,21 -j ACCEPT\r\n#save\r\niptables-save >>/etc/sysconfig/iptables\r\n\r\n在日常小服务器上使用很靠谱，当然有前的可以上硬防阿，阿里云的WAF也很靠谱，就看手里的钱靠不靠谱\r\n','<h2 id=\"h2--2013-vps-\"><a name=\"在2013年开始自己搞VPS做网站开始，就写了这个脚本，后面也有修改，觉得还是蛮好用的。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>在2013年开始自己搞VPS做网站开始，就写了这个脚本，后面也有修改，觉得还是蛮好用的。</h2><p>在维护服务器时经常要手写防火墙脚本，但是自己很懒惰，所以把我写的一些规则记录下来，放在自己的博客上，以后哪台服务器要用，就直接拿来用，多好的一事阿。</p>\r\n<blockquote>\r\n<h1 id=\"h1--bin-bash\"><a name=\"!/bin/bash\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>!/bin/bash</h1><p>iptables -F<br>iptables -F -t nat<br>iptables -X<br>iptables -P INPUT DROP<br>iptables -P OUTPUT ACCEPT<br>iptables -P FORWARD ACCEPT</p>\r\n<h1 id=\"h1-module\"><a name=\"module\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>module</h1><p>modprobe iptable_nat<br>modprobe ip_conntrack_ftp<br>modprobe ip_nat_ftp</p>\r\n<h1 id=\"h1-roules\"><a name=\"roules\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>roules</h1><p>iptables -A INPUT -f -m limit —limit 100/sec —limit-burst 100 -j ACCEPT<br>iptables -A INPUT -p icmp —icmp-type echo-request -m limit —limit 1/s —limit-burst 10 -j ACCEPT<br>iptables -A INPUT -p tcp -m tcp —tcp-flags SYN,RST,ACK SYN -m limit —limit 20/sec —limit-burst 200 -j ACCEPT<br>iptables -A INPUT -i lo -j ACCEPT<br>iptables -A OUTPUT -o lo -j ACCEPT<br>iptables -A INPUT -m state —state ESTABLISHED,RELATED -j ACCEPT<br>iptables -A INPUT -p tcp -m multiport —dport 80,22,21 -j ACCEPT</p>\r\n<h1 id=\"h1-save\"><a name=\"save\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>save</h1><p>iptables-save &gt;&gt;/etc/sysconfig/iptables</p>\r\n</blockquote>\r\n<p>在日常小服务器上使用很靠谱，当然有前的可以上硬防阿，阿里云的WAF也很靠谱，就看手里的钱靠不靠谱</p>\r\n','2970940'),(5,3,'独立服务器部署的几个注意点','p80d0024b','linux安全,linux设置','独立服务器部署，几个重要的安全配置注意一下阿',1,2,20,'2019-11-03 12:29:48','2019-11-03 08:16:15','','手工部署服务器，需要注意的几个地方','今天对一台独立服务器进行一下安全设置\r\n这些说不定哪天有用\r\n1、禁止Ping入\r\n```\r\necho 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all\r\n将这段代码加入centos机器的/etc/rc.d/rc.local\r\n这样不需要每次重启都要加这段代码\r\n```\r\n2、隐藏apache 和php的版本信息\r\n```\r\n编辑httpd.conf\r\n在末尾加上\r\nServerTokens ProductOnly\r\nServerSignature Off\r\n后 就影藏了apache的版本信息\r\n\r\n隐藏 PHP 版本\r\n编辑php.ini\r\n\r\n将expose_php On\r\n改成\r\nexpose_php Off\r\n```\r\n3、设置友好页面 404\r\n```\r\nLNPA的404比较简单\r\n直接在 .htaccess中加上\r\nErrorDocument 404 /404.html\r\n然后在每个站点的根目录 弄一个404.html OK了\r\n那个.htaccess 没有就自建呀 ，一般的话，如果是CMS的话，一定有这个问题件\r\n相关的其他错误页可以这样搞\r\n如500 502 等错误\r\n```\r\n','<p>今天对一台独立服务器进行一下安全设置<br>这些说不定哪天有用<br>1、禁止Ping入</p>\r\n<pre><code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all\r\n将这段代码加入centos机器的/etc/rc.d/rc.local\r\n这样不需要每次重启都要加这段代码\r\n</code></pre><p>2、隐藏apache 和php的版本信息</p>\r\n<pre><code>编辑httpd.conf\r\n在末尾加上\r\nServerTokens ProductOnly\r\nServerSignature Off\r\n后 就影藏了apache的版本信息\r\n\r\n隐藏 PHP 版本\r\n编辑php.ini\r\n\r\n将expose_php On\r\n改成\r\nexpose_php Off\r\n</code></pre><p>3、设置友好页面 404</p>\r\n<pre><code>LNPA的404比较简单\r\n直接在 .htaccess中加上\r\nErrorDocument 404 /404.html\r\n然后在每个站点的根目录 弄一个404.html OK了\r\n那个.htaccess 没有就自建呀 ，一般的话，如果是CMS的话，一定有这个问题件\r\n相关的其他错误页可以这样搞\r\n如500 502 等错误\r\n</code></pre>','2970940'),(6,3,'Aliyun 云服务器 安装 postgresql 9.3.2','pccd8d24e','linux,postgresql,sql数据库','历史文档，照搬不误，这篇文章还是在百度空间里搬回来的，这篇文章大概时2010年的作品。',1,2,20,'2019-11-03 12:52:16','2019-11-03 13:10:55','','不止与9.3.2，重要的是安装的思路','## 生命在于不断的折腾，但是也要适量阿\r\n本文创作于2010年，当时非常痴迷于一个开源erp，前面较openErp，后来改名为odoo,这篇文章也是当初折腾这个ERP时留下来的，见原文。\r\n一、 安装\r\n> 1.mkdir data&&cd data\r\n2.wget -c ftp://ftp.postgresql.org/pub/source/v9.3.2/postgresql-9.3.2.tar.gz\r\n3.tar vfx postgresql-9.3.2.tar.gz\r\n4.cd 解压的目录（cd post后面按两个table键自动补全）\r\n5.yum install zlib-devel\r\n6./configure –prefix=/usr/local/pgsql –without-readline (安装的时候如果不知道怎么装可以看以下help：./confiure –help查看安装参数）\r\n7.make&&make install\r\n\r\n\r\n二、.  其实这个数据库安装并不复杂，感觉他的配置稍微繁琐一点。\r\n剩下来就是配置了，很重要！！！！\r\n>1、创建用户组和用户：\r\ngroupadd postgres\r\nuseradd -g postgres postgres\r\n2、创建数据库库文件存储目录、给postgres赋予权限：\r\nmkdir /usr/local/pgsql/data\r\ncd /usr/local/pgsql\r\nchown postgres.postgres data\r\n3、初始化数据库目录：\r\n切换用户\r\nsu – postgres\r\n初始化数据\r\n/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data\r\n成功后需要修改postgresql.conf 如下操作。\r\n4、配置监听地址和端口：\r\nvi /usr/local/pgsql/data/postgresql.conf\r\n取消以下两行的注释\r\nlisten_addresses = \'*\'\r\nport = 5432\r\n5、让postgresql数据库随系统启动而启动：\r\n将启动脚本拷贝到/etc/init.d/目录下，具体执行如下命令：\r\ncd /etc/init.d\r\ncp (第一步解压的安装文件目录)/postgresql-9.3.2/contrib/start-scripts/linux postgresql\r\nchmod +x postgresql\r\nvim postgresql\r\nprefix=/usr/local/pgsql\r\nPGDATA=\"/usr/local/pgsql/data\"\r\nPGUSER=postgres\r\nPGLOG=\"/var/log/pgsql.log\"\r\n上面的配置，如果按照步骤来，一般不会错，但记住，这几个必须要实际的地址。\r\n6、执行 chkconfig –add postgresql\r\n7、启动数据库：\r\n service postgresql start\r\n\r\n创建角色 之前，可能 直接createuser 命令 没有，如果有没关系了。如果打不开，请加个链接到/bin\r\n\r\n如下操作\r\n> ln -s /usr/local/pgsql/bin/* /bin/createuser –createdb –username postgres –no-createrole –pwprompt root \r\n(这里是添加用户角色，没有深究，更多请谷歌查询一下)\r\n\r\n三、 安装pgadmin3来管理数据库\r\n> yum install pgadmin3 -y\r\n\r\n到这里，postgresql 已经能正常运行了 BYE 故事讲玩了！当然玩数据库的大多都能在终端下执行各种迷人的操作。我这里不经常用。\r\n\r\n','<h2 id=\"h2--\"><a name=\"生命在于不断的折腾，但是也要适量阿\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>生命在于不断的折腾，但是也要适量阿</h2><p>本文创作于2010年，当时非常痴迷于一个开源erp，前面较openErp，后来改名为odoo,这篇文章也是当初折腾这个ERP时留下来的，见原文。<br>一、 安装</p>\r\n<blockquote>\r\n<p>1.mkdir data&amp;&amp;cd data<br>2.wget -c ftp://ftp.postgresql.org/pub/source/v9.3.2/postgresql-9.3.2.tar.gz<br>3.tar vfx postgresql-9.3.2.tar.gz<br>4.cd 解压的目录（cd post后面按两个table键自动补全）<br>5.yum install zlib-devel<br>6./configure –prefix=/usr/local/pgsql –without-readline (安装的时候如果不知道怎么装可以看以下help：./confiure –help查看安装参数）<br>7.make&amp;&amp;make install</p>\r\n</blockquote>\r\n<p>二、.  其实这个数据库安装并不复杂，感觉他的配置稍微繁琐一点。<br>剩下来就是配置了，很重要！！！！</p>\r\n<blockquote>\r\n<p>1、创建用户组和用户：<br>groupadd postgres<br>useradd -g postgres postgres<br>2、创建数据库库文件存储目录、给postgres赋予权限：<br>mkdir /usr/local/pgsql/data<br>cd /usr/local/pgsql<br>chown postgres.postgres data<br>3、初始化数据库目录：<br>切换用户<br>su – postgres<br>初始化数据<br>/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data<br>成功后需要修改postgresql.conf 如下操作。<br>4、配置监听地址和端口：<br>vi /usr/local/pgsql/data/postgresql.conf<br>取消以下两行的注释<br>listen_addresses = ‘*’<br>port = 5432<br>5、让postgresql数据库随系统启动而启动：<br>将启动脚本拷贝到/etc/init.d/目录下，具体执行如下命令：<br>cd /etc/init.d<br>cp (第一步解压的安装文件目录)/postgresql-9.3.2/contrib/start-scripts/linux postgresql<br>chmod +x postgresql<br>vim postgresql<br>prefix=/usr/local/pgsql<br>PGDATA=”/usr/local/pgsql/data”<br>PGUSER=postgres<br>PGLOG=”/var/log/pgsql.log”<br>上面的配置，如果按照步骤来，一般不会错，但记住，这几个必须要实际的地址。<br>6、执行 chkconfig –add postgresql<br>7、启动数据库：<br> service postgresql start</p>\r\n</blockquote>\r\n<p>创建角色 之前，可能 直接createuser 命令 没有，如果有没关系了。如果打不开，请加个链接到/bin</p>\r\n<p>如下操作</p>\r\n<blockquote>\r\n<p>ln -s /usr/local/pgsql/bin/* /bin/createuser –createdb –username postgres –no-createrole –pwprompt root<br>(这里是添加用户角色，没有深究，更多请谷歌查询一下)</p>\r\n</blockquote>\r\n<p>三、 安装pgadmin3来管理数据库</p>\r\n<blockquote>\r\n<p>yum install pgadmin3 -y</p>\r\n</blockquote>\r\n<p>到这里，postgresql 已经能正常运行了 BYE 故事讲玩了！当然玩数据库的大多都能在终端下执行各种迷人的操作。我这里不经常用。</p>\r\n','2970940'),(7,3,'Centos sendmail +dovecot for magento','p82f3014c','magento,sendmail,dovecot','也是老文章了，那些年想整点东西，但是整个供应链体系和产品质量体系搞不起来，原因是力量太单薄，搞不起来',1,2,20,'2019-11-03 13:26:11','2019-11-03 08:16:15','','magento是php电商程序的龙头','## 哎呀！搞了几个星期，晚上的资料也有些保留，老是搞不清坨，现在我完全搞明白了。并且将信息记录下来，方便查阅，哈哈\r\n言归正传\r\n\r\n一、部署环境：阿里云服务器 centos 6.3 64位系统\r\n\r\n二、部署目标：架设一台sendmail 邮件服务器，方便magento 系统使用。要求此服务器能开通几个管理级别的帐户，能接收和发布邮件\r\n\r\n三、部署软件：sendmail , dovecot, cyrus-sasl\r\n> 安装之前\r\n请设置好主机名\r\nvim /etc/sysconfig/netword\r\nHOSTNAME=hlcert.com\r\n\r\n安装sendmail：\r\n> yum install sendmail sendmail-cf -y\r\n\r\n我还是装一个软件 配置一下吧，不要搞不明白了\r\n\r\n配置：\r\n\r\n> cd /etc/mail\r\nvim sendmail.cf\r\n找到这项\r\nDAEMON_OPTIONS\r\n改为如下\r\nDAEMON_OPTIONS(`Port=smtp,Addr=0.0.0.0, Name=MTA\')dnl\r\n找到这项\r\nDAEMON_OPTIONS(`Port=587, Name=MSA, M=Ea\')dnl\r\n改为\r\nDAEMON_OPTIONS(`Port=25, Name=MSA, M=Ea\')dnl\r\n\r\n下面设置是为了发信验证：\r\n> 开启SMTP 用户验证\r\nvim /etc/mail/sendmail.mc\r\n找到：\r\ndnl TRUST_AUTH_MECH(`EXTERNAL DIGEST-MD5 CRAM-MD5 LOGIN PLAIN\')dnl dnl dnl define(`confAUTH_MECHANISMS\', `EXTERNAL GSSAPI DIGEST-MD5 CRAM-MD5 LOGIN PLAIN\')dnl\r\n更改：（去掉前面注释：「dnl」）\r\nTRUST_AUTH_MECH(`EXTERNAL DIGEST-MD5 CRAM-MD5 LOGIN PLAIN\')dnl\r\ndefine(`confAUTH_MECHANISMS\', `EXTERNAL GSSAPI DIGEST-MD5 CRAM-MD5 LOGIN PLAIN\')dnl\r\n\r\n添加 access\r\n> cd /etc/mail\r\nvim access\r\n\r\n添加授信域 和允许发送的邮箱\r\n>\r\nConnect:localhost.localdomain RELAY\r\nConnect:localhost RELAY\r\nConnect:127.0.0.1 RELAY\r\nConnect:hlcert.com RELAY\r\n163.com RELAY\r\nqq.com RELAY\r\ngmail.com RELAY\r\n126.com RELAY\r\n\r\n跟上面一样\r\n> makemap hash access.db < access\r\n或者 makemap hash /etc/mail/access.db < /etc/mail/access\r\n生成sendmail.cf\r\nm4 sendmail.mc > sendmail.cf #没有基础的同学遇到这种命令可能比较头大 这里都是在/etc/mial 目录里操作的，如果不是 那么就\r\nm4 /etc/mail/sendmail.mc > /etc/mail/sendmail.cf\r\n升级access.db\r\nnewaliases\r\n\r\n安装 dovecot\r\n>yum install dovecot -y\r\n\r\n配置\r\n\r\n>cd /etc/dovecot\r\nvim dovecot.conf\r\n查找：#protocols = imap pop3 lmtp\r\n更改：protocols = imap pop3 lmtp\r\n\r\n上面是为了支援 pop3\r\n\r\n注意：centos 6 对 dovecot 做了严格的配置，所以还需要加入下面的配置\r\n\r\n才能保证pop smtp 正常使用\r\n\r\n> login_trusted_networks = 0.0.0.0/0\r\n\r\n安装附加的东西\r\n> yum install cyrus-sasl cyrus-sasl-devel cyrus-sasl-plain cyrus-sasl-md5 -y\r\n\r\n配置\r\n\r\n> cd /etc/sasl2\r\nvim Sendmail.conf\r\n里面加上\r\npwcheck_method: saslauthd\r\nvim smtp.conf\r\n添加\r\npwcheck_method: saslauthd\r\nmech_list: plain login\r\n\r\n上面的配置，没有就加上，格式严格按照上述 以前有人用\"=\"号，但是不能用了\r\n\r\n> cd /etc/sysconfig\r\nvim saslauthd\r\nMECH=shadow # 使其查找shadow来查找合法用户的密码\r\nSetup 4\r\n配置随机启动\r\nchkconfig -level 35 sendmail on\r\nchkconfig -level 35 saslauthd on\r\nchkconfig -level 35 dovecot on\r\n服务重新启动 确认\r\nservice dovecot restart\r\nservice saslauthd restart\r\nservice sendmail restart\r\n确认pop3 是否正常\r\nSetup 5.验证pop3能否正常使用；\r\ntelnet pop3_server 110\r\nauth\r\nuser user_name\r\npass user_password\r\n\r\n插曲\r\n\r\n建立用户\r\n\r\n用户管理指令\r\n>groupadd mailuser   /* 建立邮件用户组*/\r\n>useradd -g mailuser -s /sbin/nologin test1   /*建立不能登录系统的邮件用户*/\r\n>vim /etc/aliases   /*sendmail使用aliases机制实现邮件别名和群发功能*/\r\n>admin: test1   /*admin是mike的别名*/\r\n>testgroup: test1,tom,jreey,jack   /*邮件群发，向testgroup邮箱发送就是向4个人发送*/\r\n>newaliases   /*对aliases.db数据库更新*/\r\n\r\n这样配置，基本上没什么问题的了，能保证magento 工作了。还能设置一个帐户来收取客人邮件和恢复邮件，不过遇到雷鸟无法发送邮件问题。暂时未解决，以后上测试机再说了！\r\n\r\n','<h2 id=\"h2--\"><a name=\"哎呀！搞了几个星期，晚上的资料也有些保留，老是搞不清坨，现在我完全搞明白了。并且将信息记录下来，方便查阅，哈哈\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>哎呀！搞了几个星期，晚上的资料也有些保留，老是搞不清坨，现在我完全搞明白了。并且将信息记录下来，方便查阅，哈哈</h2><p>言归正传</p>\r\n<p>一、部署环境：阿里云服务器 centos 6.3 64位系统</p>\r\n<p>二、部署目标：架设一台sendmail 邮件服务器，方便magento 系统使用。要求此服务器能开通几个管理级别的帐户，能接收和发布邮件</p>\r\n<p>三、部署软件：sendmail , dovecot, cyrus-sasl</p>\r\n<blockquote>\r\n<p>安装之前<br>请设置好主机名<br>vim /etc/sysconfig/netword<br>HOSTNAME=hlcert.com</p>\r\n</blockquote>\r\n<p>安装sendmail：</p>\r\n<blockquote>\r\n<p>yum install sendmail sendmail-cf -y</p>\r\n</blockquote>\r\n<p>我还是装一个软件 配置一下吧，不要搞不明白了</p>\r\n<p>配置：</p>\r\n<blockquote>\r\n<p>cd /etc/mail<br>vim sendmail.cf<br>找到这项<br>DAEMON_OPTIONS<br>改为如下<br>DAEMON_OPTIONS(<code>Port=smtp,Addr=0.0.0.0, Name=MTA&#39;)dnl\r\n找到这项\r\nDAEMON_OPTIONS(</code>Port=587, Name=MSA, M=Ea’)dnl<br>改为<br>DAEMON_OPTIONS(`Port=25, Name=MSA, M=Ea’)dnl</p>\r\n</blockquote>\r\n<p>下面设置是为了发信验证：</p>\r\n<blockquote>\r\n<p>开启SMTP 用户验证<br>vim /etc/mail/sendmail.mc<br>找到：<br>dnl TRUST_AUTH_MECH(<code>EXTERNAL DIGEST-MD5 CRAM-MD5 LOGIN PLAIN&#39;)dnl dnl dnl define(</code>confAUTH_MECHANISMS’, <code>EXTERNAL GSSAPI DIGEST-MD5 CRAM-MD5 LOGIN PLAIN&#39;)dnl\r\n更改：（去掉前面注释：「dnl」）\r\nTRUST_AUTH_MECH(</code>EXTERNAL DIGEST-MD5 CRAM-MD5 LOGIN PLAIN’)dnl<br>define(<code>confAUTH_MECHANISMS&#39;,</code>EXTERNAL GSSAPI DIGEST-MD5 CRAM-MD5 LOGIN PLAIN’)dnl</p>\r\n</blockquote>\r\n<p>添加 access</p>\r\n<blockquote>\r\n<p>cd /etc/mail<br>vim access</p>\r\n</blockquote>\r\n<p>添加授信域 和允许发送的邮箱<br>&gt;<br>Connect:localhost.localdomain RELAY<br>Connect:localhost RELAY<br>Connect:127.0.0.1 RELAY<br>Connect:hlcert.com RELAY<br>163.com RELAY<br>qq.com RELAY<br>gmail.com RELAY<br>126.com RELAY</p>\r\n<p>跟上面一样</p>\r\n<blockquote>\r\n<p>makemap hash access.db &lt; access<br>或者 makemap hash /etc/mail/access.db &lt; /etc/mail/access<br>生成sendmail.cf<br>m4 sendmail.mc &gt; sendmail.cf #没有基础的同学遇到这种命令可能比较头大 这里都是在/etc/mial 目录里操作的，如果不是 那么就<br>m4 /etc/mail/sendmail.mc &gt; /etc/mail/sendmail.cf<br>升级access.db<br>newaliases</p>\r\n</blockquote>\r\n<p>安装 dovecot</p>\r\n<blockquote>\r\n<p>yum install dovecot -y</p>\r\n</blockquote>\r\n<p>配置</p>\r\n<blockquote>\r\n<p>cd /etc/dovecot<br>vim dovecot.conf<br>查找：#protocols = imap pop3 lmtp<br>更改：protocols = imap pop3 lmtp</p>\r\n</blockquote>\r\n<p>上面是为了支援 pop3</p>\r\n<p>注意：centos 6 对 dovecot 做了严格的配置，所以还需要加入下面的配置</p>\r\n<p>才能保证pop smtp 正常使用</p>\r\n<blockquote>\r\n<p>login_trusted_networks = 0.0.0.0/0</p>\r\n</blockquote>\r\n<p>安装附加的东西</p>\r\n<blockquote>\r\n<p>yum install cyrus-sasl cyrus-sasl-devel cyrus-sasl-plain cyrus-sasl-md5 -y</p>\r\n</blockquote>\r\n<p>配置</p>\r\n<blockquote>\r\n<p>cd /etc/sasl2<br>vim Sendmail.conf<br>里面加上<br>pwcheck_method: saslauthd<br>vim smtp.conf<br>添加<br>pwcheck_method: saslauthd<br>mech_list: plain login</p>\r\n</blockquote>\r\n<p>上面的配置，没有就加上，格式严格按照上述 以前有人用”=”号，但是不能用了</p>\r\n<blockquote>\r\n<p>cd /etc/sysconfig<br>vim saslauthd<br>MECH=shadow # 使其查找shadow来查找合法用户的密码<br>Setup 4<br>配置随机启动<br>chkconfig -level 35 sendmail on<br>chkconfig -level 35 saslauthd on<br>chkconfig -level 35 dovecot on<br>服务重新启动 确认<br>service dovecot restart<br>service saslauthd restart<br>service sendmail restart<br>确认pop3 是否正常<br>Setup 5.验证pop3能否正常使用；<br>telnet pop3_server 110<br>auth<br>user user_name<br>pass user_password</p>\r\n</blockquote>\r\n<p>插曲</p>\r\n<p>建立用户</p>\r\n<p>用户管理指令</p>\r\n<blockquote>\r\n<p>groupadd mailuser   /<em> 建立邮件用户组</em>/<br>useradd -g mailuser -s /sbin/nologin test1   /<em>建立不能登录系统的邮件用户</em>/<br>vim /etc/aliases   /<em>sendmail使用aliases机制实现邮件别名和群发功能</em>/<br>admin: test1   /<em>admin是mike的别名</em>/<br>testgroup: test1,tom,jreey,jack   /<em>邮件群发，向testgroup邮箱发送就是向4个人发送</em>/<br>newaliases   /<em>对aliases.db数据库更新</em>/</p>\r\n</blockquote>\r\n<p>这样配置，基本上没什么问题的了，能保证magento 工作了。还能设置一个帐户来收取客人邮件和恢复邮件，不过遇到雷鸟无法发送邮件问题。暂时未解决，以后上测试机再说了！</p>\r\n','2970940'),(8,3,'利用VIM来作为开发工具,超级好看，好用不好说','p91e24c4e','vim,gvim,python ide，VIM编辑器','由于我使用的vim编辑器有点老土，所以就在谷歌上搜索一下',1,2,20,'2019-11-04 11:29:36','2019-11-04 11:11:11','','VIM开发工具，高手工具，泡妞神器','## VIM 一直都是比较好用的文本编辑器\r\n一般在linux 服务器里都有安装，用于配置各种服务器配置，但是也有高手用于开发程序，我个人不算特别高的高手哇，只是羡慕一下而已，或许我过几年能成为高手。\r\n\r\n由于我使用的vim编辑器有点老土，所以就在谷歌上搜索一下，是否能把它搞的漂亮一点，方便一点，这不–我们以往有给提供了一个好用的方法，我按照他的方法把我的VIM装修的好漂亮，主要是由了它，对于我们这些生手来说，可以避免很多错误信息，最主要的就是：可以规避错别字。\r\n\r\n先亮一下图\r\n![pic1](/static/uploads/images/20180508052615d60d22e66f9d45d3bb8703565e801bfb.png)\r\n![pic2](/static/uploads/images/20180508052631cfd26ea176ee42b2b46dbfa1c58a29d6.png \"pic2\")\r\n\r\n好看吧，\r\n\r\n下面就方法给说一下，不用你太多修改，我们亲爱的作者帮我们写好配置文件脚本了。\r\n\r\n当然我们不要把作者的功劳给去除就是了。大家都是vim 使用者。\r\n\r\n### 安装\r\n简易安装方法：\r\n打开终端，执行下面的命令就自动安装好了：\r\nwget https://raw.github.com/ma6174/vim/master/setup.sh -O ma6174_vim_setup.sh && bash ma6174_vim_setup.sh\r\n等候片刻，不用输入什么，自己调回命令行 就表示安装完了。\r\n同时，作者也提供了手动安装说明（ubuntu 版）\r\n```\r\n1 安装vim sudo apt-get install vim\r\n\r\n2 安装ctags：sudo apt-get install ctags\r\n\r\n3 安装一些必备程序：sudo apt-get install python-twisted xclip vim-gnome astyle python-setuptools\r\n\r\n4 python代码格式化工具：sudo easy_install -ZU autopep8\r\n\r\n5 sudo ln -s /usr/bin/ctags /usr/local/bin/ctags\r\n\r\n6 clone配置文件：cd ~/ && git clone git://github.com/ma6174/vim.git\r\n\r\n7 mv ~/vim ~/.vim\r\n\r\n8 mv ~/.vim/.vimrc ~/\r\n\r\n9 clone bundle 程序：git clone http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle\r\n\r\n10 打开vim并执行bundle程序:BundleInstall\r\n\r\n11 重新打开vim即可看到效果\r\n```\r\n\r\n\r\n','<h2 id=\"h2-vim-\"><a name=\"VIM 一直都是比较好用的文本编辑器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>VIM 一直都是比较好用的文本编辑器</h2><p>一般在linux 服务器里都有安装，用于配置各种服务器配置，但是也有高手用于开发程序，我个人不算特别高的高手哇，只是羡慕一下而已，或许我过几年能成为高手。</p>\r\n<p>由于我使用的vim编辑器有点老土，所以就在谷歌上搜索一下，是否能把它搞的漂亮一点，方便一点，这不–我们以往有给提供了一个好用的方法，我按照他的方法把我的VIM装修的好漂亮，主要是由了它，对于我们这些生手来说，可以避免很多错误信息，最主要的就是：可以规避错别字。</p>\r\n<p>先亮一下图<br><img src=\"/static/uploads/images/20180508052615d60d22e66f9d45d3bb8703565e801bfb.png\" alt=\"pic1\"><br><img src=\"/static/uploads/images/20180508052631cfd26ea176ee42b2b46dbfa1c58a29d6.png\" alt=\"pic2\" title=\"pic2\"></p>\r\n<p>好看吧，</p>\r\n<p>下面就方法给说一下，不用你太多修改，我们亲爱的作者帮我们写好配置文件脚本了。</p>\r\n<p>当然我们不要把作者的功劳给去除就是了。大家都是vim 使用者。</p>\r\n<h3 id=\"h3-u5B89u88C5\"><a name=\"安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装</h3><p>简易安装方法：<br>打开终端，执行下面的命令就自动安装好了：<br>wget <a href=\"https://raw.github.com/ma6174/vim/master/setup.sh\">https://raw.github.com/ma6174/vim/master/setup.sh</a> -O ma6174_vim_setup.sh &amp;&amp; bash ma6174_vim_setup.sh<br>等候片刻，不用输入什么，自己调回命令行 就表示安装完了。<br>同时，作者也提供了手动安装说明（ubuntu 版）</p>\r\n<pre><code>1 安装vim sudo apt-get install vim\r\n\r\n2 安装ctags：sudo apt-get install ctags\r\n\r\n3 安装一些必备程序：sudo apt-get install python-twisted xclip vim-gnome astyle python-setuptools\r\n\r\n4 python代码格式化工具：sudo easy_install -ZU autopep8\r\n\r\n5 sudo ln -s /usr/bin/ctags /usr/local/bin/ctags\r\n\r\n6 clone配置文件：cd ~/ &amp;&amp; git clone git://github.com/ma6174/vim.git\r\n\r\n7 mv ~/vim ~/.vim\r\n\r\n8 mv ~/.vim/.vimrc ~/\r\n\r\n9 clone bundle 程序：git clone http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle\r\n\r\n10 打开vim并执行bundle程序:BundleInstall\r\n\r\n11 重新打开vim即可看到效果\r\n</code></pre>','2970940'),(9,3,'openerp 7.0 找不到 本地模块','p331b284a','openerp安装，odoo安装','折腾openerp的日子已经过去了，我跟进学习时间比较久',1,2,20,'2019-11-04 11:34:04','2019-11-04 11:31:41','','折腾openerp的日子已经过去了，我跟进学习时间比较久','处理办法 \r\n\r\n设置-用户-选择 admin\r\n访问权限设置成技术性\r\n\r\nservice openerp-server restart\r\n \r\n\r\n重新登录客户端 \r\n 设置 \r\n系统参数  添加一个 apps.server 项  值 给一个 localhost:5555(可以随便给的)\r\n再重新启动oe  重新登入  更新列表就有了\r\n\r\n安装出现 no module Unicode 则安装 unicode \r\neasy_install unicode\r\n一般这个不过\r\n\r\n直接下载吧\r\n解压出来\r\n\r\n然后再 python setup.py install\r\n\r\n 安装完成 重启OE \r\n再试试','<p>处理办法 </p>\r\n<p>设置-用户-选择 admin<br>访问权限设置成技术性</p>\r\n<p>service openerp-server restart</p>\r\n<p>重新登录客户端<br> 设置<br>系统参数  添加一个 apps.server 项  值 给一个 localhost:5555(可以随便给的)<br>再重新启动oe  重新登入  更新列表就有了</p>\r\n<p>安装出现 no module Unicode 则安装 unicode<br>easy_install unicode<br>一般这个不过</p>\r\n<p>直接下载吧<br>解压出来</p>\r\n<p>然后再 python setup.py install</p>\r\n<p> 安装完成 重启OE<br>再试试</p>\r\n','2970940'),(10,3,'GIMP 2.10稳定版支持flatpak安装','pf4346f45','gimp,photoshop for linux','Flatpak后来慢慢的得到普及，有很多开源软件使用它来封装',1,2,20,'2019-11-04 11:39:05','2019-11-04 11:45:00','<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	Linux下Flatpak格式的LibreOffice\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	<a href=\"https://zh-cn.libreoffice.org/download/flatpak/\" target=\"_blank\" style=\"box-sizing:border-box;background-color:transparent;color:#337AB7;text-decoration-line:none;\">https://zh-cn.libreoffice.org/download/flatpak/</a>\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	GIMP下载地址\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	<a href=\"https://www.gimp.org/downloads/\" target=\"_blank\" style=\"box-sizing:border-box;background-color:transparent;color:#337AB7;text-decoration-line:none;\">https://www.gimp.org/downloads/</a>\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	flatpak介绍\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	<a href=\"https://www.linuxprobe.com/gnulinux-flatpak.html\" target=\"_blank\" style=\"box-sizing:border-box;background-color:transparent;color:#337AB7;text-decoration-line:none;\">https://www.linuxprobe.com/gnulinux-flatpak.html</a>\r\n</p>','GIMP 2.10稳定版支持flatpak安装','inux下的Flatpak格式的应用程序有很多，但不算太普及，目前我知道有flatpak包的有libreoffice 和gimp\r\n\r\n今天就拿gimp-2.10稳定版来介绍一下安装过程，希望能帮到看到本文的你。\r\n\r\n1、flatpak命令可以自己安装依赖关系，如你从来没有用过flatpak安装过应用程序，那么他会安装一个特别大的\"org.gnome.Platform\",不过这都不重要。\r\n\r\n       下载你的gimp-2.10稳定版在 https://www.gimp.org/downloads/ \r\n\r\n        干脆来个全链接 https://flathub.org/repo/appstream/org.gimp.GIMP.flatpakref\r\n\r\n2、进入你的下载目录，然后以root用户身份或者sudo 方式执行安装命令\r\n\r\n> [root@fedora 下载]# flatpak install org.gimp.GIMP.flatpakref\r\n\r\n3、后面有一些列的操作，都按Y搞定，这里贴上我的运行过程\r\n![pic1](/static/uploads/images/20180512223546d7e0e9966e0d4c618bf81664da2642b6.png \"pic1\")\r\n\r\n4、经过一盏茶的功夫，他就跑完了上面的部分。这张图也是用gimp截图得来\r\n\r\n![](/static/uploads/images/20180512223730a02e0e12b192482fb61fceccb2d0e182.png)\r\n\r\n界面看起来漂亮了哈哈，就是我对图像设计不感冒，搞不出漂亮的图片来，望海含。\r\n','<p>inux下的Flatpak格式的应用程序有很多，但不算太普及，目前我知道有flatpak包的有libreoffice 和gimp</p>\r\n<p>今天就拿gimp-2.10稳定版来介绍一下安装过程，希望能帮到看到本文的你。</p>\r\n<p>1、flatpak命令可以自己安装依赖关系，如你从来没有用过flatpak安装过应用程序，那么他会安装一个特别大的”org.gnome.Platform”,不过这都不重要。</p>\r\n<pre><code>   下载你的gimp-2.10稳定版在 https://www.gimp.org/downloads/ \r\n\r\n    干脆来个全链接 https://flathub.org/repo/appstream/org.gimp.GIMP.flatpakref\r\n</code></pre><p>2、进入你的下载目录，然后以root用户身份或者sudo 方式执行安装命令</p>\r\n<blockquote>\r\n<p>[root<a href=\"https://github.com/fedora\" title=\"&#64;fedora\" class=\"at-link\">@fedora</a> 下载]# flatpak install org.gimp.GIMP.flatpakref</p>\r\n</blockquote>\r\n<p>3、后面有一些列的操作，都按Y搞定，这里贴上我的运行过程<br><img src=\"/static/uploads/images/20180512223546d7e0e9966e0d4c618bf81664da2642b6.png\" alt=\"pic1\" title=\"pic1\"></p>\r\n<p>4、经过一盏茶的功夫，他就跑完了上面的部分。这张图也是用gimp截图得来</p>\r\n<p><img src=\"/static/uploads/images/20180512223730a02e0e12b192482fb61fceccb2d0e182.png\" alt=\"\"></p>\r\n<p>界面看起来漂亮了哈哈，就是我对图像设计不感冒，搞不出漂亮的图片来，望海含。</p>\r\n','2970940'),(11,3,'nohup --help 你学会了吗？','pab081d40','nohup 设置,linux命令行学会看帮助','学会看帮助在linux系统下是非常重要的,学习本身就是为了解决自身的某一个问题而开始的',1,1,20,'2019-11-04 11:51:53','2019-11-04 11:53:06','<a href=\"http://www.cnblogs.com/allenblogs/archive/2011/05/19/2051136.html\" target=\"_blank\">http://www.cnblogs.com/allenblogs/archive/2011/05/19/2051136.html</a>','学会看帮助在linux系统下是非常重要的','在应用Unix/Linux时，我们一般想让某个程序在后台运行，于是我们将常会用 & 在程序结尾来让程序自动运行。比如我们要运行mysql在后台： /usr/local/mysql/bin/mysqld_safe –user=mysql &。可是有很多程序并不想mysqld一样，这样我们就需要nohup命令，怎样使用nohup命令呢？这里讲解nohup命令的一些用法。\r\n\r\n不啰嗦，写作是为了让自己记的更牢靠，这里只写我是如何操作的，重要的信息请访问页脚的参考连接，这些都是互联网人的功劳，我们没有权利抹掉别人的功劳，是大家一起构建了完整的知识\r\n\r\n你看！我是咋学习的。\r\n1、善于使用帮助\r\n\r\n==一般都是命令后面加上 —help==\r\n\r\n例如：\r\n![](/static/uploads/images/2018072111385674211da69a9f410a815d460e79a0aaf2.png)\r\n\r\n2、不要因为未知感到恐惧\r\n3、试图从另外一个方向解围\r\n> supervisord -c ./supervisord.conf > nohup.out 2>&1 &\r\n# 命令  选项  > 输出文件 2>&1 &\r\n\r\n4、当然最重要的是你是否愿意接受别人的帮助，例如百度，谷歌 ，你的大哥哥，你的大姐姐\r\n5、你是否是一个愿意和别人合作的人\r\n5、你是否因为未知而感觉到羞愧，其实无知并不会让人耻笑，而是大脑给你的一种暗示\r\n孔子都有句话说：知之为知之，不知为不知；你为啥要装懂呢？给自己添烦恼。','<p>在应用Unix/Linux时，我们一般想让某个程序在后台运行，于是我们将常会用 &amp; 在程序结尾来让程序自动运行。比如我们要运行mysql在后台： /usr/local/mysql/bin/mysqld_safe –user=mysql &amp;。可是有很多程序并不想mysqld一样，这样我们就需要nohup命令，怎样使用nohup命令呢？这里讲解nohup命令的一些用法。</p>\r\n<p>不啰嗦，写作是为了让自己记的更牢靠，这里只写我是如何操作的，重要的信息请访问页脚的参考连接，这些都是互联网人的功劳，我们没有权利抹掉别人的功劳，是大家一起构建了完整的知识</p>\r\n<p>你看！我是咋学习的。<br>1、善于使用帮助</p>\r\n<p>==一般都是命令后面加上 —help==</p>\r\n<p>例如：<br><img src=\"/static/uploads/images/2018072111385674211da69a9f410a815d460e79a0aaf2.png\" alt=\"\"></p>\r\n<p>2、不要因为未知感到恐惧<br>3、试图从另外一个方向解围</p>\r\n<blockquote>\r\n<p>supervisord -c ./supervisord.conf &gt; nohup.out 2&gt;&amp;1 &amp;</p>\r\n<h1 id=\"h1--gt-2-gt-amp-1-amp-\"><a name=\"命令  选项  &gt; 输出文件 2&gt;&amp;1 &amp;\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>命令  选项  &gt; 输出文件 2&gt;&amp;1 &amp;</h1></blockquote>\r\n<p>4、当然最重要的是你是否愿意接受别人的帮助，例如百度，谷歌 ，你的大哥哥，你的大姐姐<br>5、你是否是一个愿意和别人合作的人<br>5、你是否因为未知而感觉到羞愧，其实无知并不会让人耻笑，而是大脑给你的一种暗示<br>孔子都有句话说：知之为知之，不知为不知；你为啥要装懂呢？给自己添烦恼。</p>\r\n','2970940'),(12,3,'公司官网服务器运营手记','p093b3e46','web安全设置,服务器运维','基于Php写的程序，被攻击，还给我的首页放了一段黑链，还打开非常慢',1,1,20,'2019-11-04 11:57:41','2019-11-04 11:46:09','<p>\r\n	<a href=\"https://www.cnblogs.com/yjf512/p/5327886.html\" target=\"_blank\">https://www.cnblogs.com/yjf512/p/5327886.html</a>\r\n</p>\r\n<p>\r\n	<a href=\"https://blog.csdn.net/renwotao2009/article/details/50778399\" target=\"_blank\">https://blog.csdn.net/renwotao2009/article/details/50778399</a>\r\n</p>','刚写的东西就被攻击，是脑壳疼','官网从上线到现在一直处于蛰伏期，怎么搞都没搞出什么大动静。我一想也就算了，毕竟新做的东西有不完善的地方。并且运营不是一件容易的事情。\r\n从后台统计数据来看，国外的数据比国内的要漂亮一些，但是始终保持在低水平线浮动。国内的日UV不到200。国外的日UV也不过600。\r\n\r\n![](/static/uploads/images/2018062717480770dcccacc97b4949a604ed5bd7bdee3a.png)\r\n\r\n![](/static/uploads/images/201806271748400cd03199269d4e728250235c84dfe6a6.png)\r\n\r\n我说就纳闷了。怎么会这样，我就赶紧跑去阿里云看情况，一看也没啥动静呀，DDOS攻击水平也在我服务器的承受范围内呀。\r\n于是我就去看服务器的动静，一看，有大量的长连接占用我的带宽。再看一下我的端口\r\n\r\n由于昨天处理之前的截图我忘记截了，所以这里没有证据了\r\n但是确实是这个问题\r\n\r\n![](/static/uploads/images/20180627175357ba9932a7f85944ce923ec22cb5d51faa.png)\r\n\r\n于是我修改了服务器的三个内核参数\r\n\r\n> sysctl net.ipv4.tcp_tw_reuse=1\r\nsysctl net.ipv4.tcp_tw_recycle=1\r\nsysctl net.ipv4.tcp_timestamps=1\r\n\r\n具体原由后面补上，这里要下班和同事hi去了','<p>官网从上线到现在一直处于蛰伏期，怎么搞都没搞出什么大动静。我一想也就算了，毕竟新做的东西有不完善的地方。并且运营不是一件容易的事情。<br>从后台统计数据来看，国外的数据比国内的要漂亮一些，但是始终保持在低水平线浮动。国内的日UV不到200。国外的日UV也不过600。</p>\r\n<p><img src=\"/static/uploads/images/2018062717480770dcccacc97b4949a604ed5bd7bdee3a.png\" alt=\"\"></p>\r\n<p><img src=\"/static/uploads/images/201806271748400cd03199269d4e728250235c84dfe6a6.png\" alt=\"\"></p>\r\n<p>我说就纳闷了。怎么会这样，我就赶紧跑去阿里云看情况，一看也没啥动静呀，DDOS攻击水平也在我服务器的承受范围内呀。<br>于是我就去看服务器的动静，一看，有大量的长连接占用我的带宽。再看一下我的端口</p>\r\n<p>由于昨天处理之前的截图我忘记截了，所以这里没有证据了<br>但是确实是这个问题</p>\r\n<p><img src=\"/static/uploads/images/20180627175357ba9932a7f85944ce923ec22cb5d51faa.png\" alt=\"\"></p>\r\n<p>于是我修改了服务器的三个内核参数</p>\r\n<blockquote>\r\n<p>sysctl net.ipv4.tcp_tw_reuse=1<br>sysctl net.ipv4.tcp_tw_recycle=1<br>sysctl net.ipv4.tcp_timestamps=1</p>\r\n</blockquote>\r\n<p>具体原由后面补上，这里要下班和同事hi去了</p>\r\n','2970940'),(13,3,'在项目中如何处理拖慢访问速度的静态文件?','pa11aa341','OSS，对象存储，网站运行提速','项目越做越大，性能和效率才是王道，不能局限于怎么开发了，而是需要从可用性开始考虑',1,1,20,'2019-11-04 12:04:22','2019-11-04 11:46:09','','项目越做越大，性能和效率才是王道','## 本文无图，请耐心看\r\n\r\n前天写架构笔记的时候，一下子给我鼓捣出几个大方向的问题点，由于技术细节太多，也不好全部写下来，也没有能力。\r\n\r\n那,今天写什么呢?\r\n\r\n就写我在新项目中用到的OSS吧，OSS是阿里云的命名，全称是对象存储服务，我在几个月前是用的亚马逊云的S3。\r\n\r\n我们上面开门见山就说道了阿里云的对象存储,那我们为什么要用呢?\r\n\r\n我的回答是要做分布式，你的静态资源依赖就不能在统一台服务器，因为你部署好一台服务器，并让他能正常被用户访问，但是后来因为业务膨胀了，业绩爆增，致使你的服务器时不时宕机。你要再堆一台机器时，你会发现,这根本行不同啊。\r\n\r\n​ 第一个问题是，在呢么保持用户的登陆状态,这个问题我会单独找个时间认真研究后写，今天不赘述。\r\n\r\n​ 第二个问题是,你那些原来显示到前端的JS、图片、样式文件都在那台时不时宕机的机器上而在你新堆的其上没法显示。\r\n\r\n​ 第三个问题是,你的数据库在宕机的那台机器上，虽说可以通过IP连上去，这解决不了宕机这个根本问题。本问题今天也不谈，内容过多，也没有更好的实践知识。\r\n\r\n我们就从第二个问题开始谈吧，因为搬家/堆机器，应用上的样式，特效，上传文件都不可靠了。对，就是这个问题,所以才用对象存储。\r\n\r\n那么,我们有那几个选择呢？根据业务的需求,我们可以选择 阿里OSS，七牛云存储,亚马逊S3。我个人的博客会采用七牛云，我已经在开始写业务代码的过程中了。\r\n\r\n最佳时间是怎样的呢?\r\n\r\n​ 我原来是这样子搞的,也就是那个S3的项目，在本地服务器不存储静态资源文件，全部上传至AWS S3。但这样搞，在实践中有一个非常尴尬的问题，就是国内上传速度是在是太慢，经常还会被卡住、超时。\r\n\r\n​ 最近我又在想，我可以先把文件上传到本地服务器上，然后再调用SDK上传，在本地服务器上留下原始文件，然后计划删除本地服务器的文件。当然这个方案好像也不止一个人跟我一样想啊，没钱的时候是可以考虑这种操作。\r\n\r\n​ 但是，这样处理并不是最好的实践，原因是不可靠，万一哪天不想用云存储了，不留下一个天坑让自己跳么？所以，在正式的企业项目中，尽量用双保险。即单独部署一台静态服务器，这台服务器只存储静态文件，并做好上传接口。上传到该服务器的同时把文件上传到云存储上去。\r\n\r\n​ 数据库存储文件信息，就和云存储一样的信息，我这里就称之为KEY好吧。这样就可以保证本地和云存储的文件信息是一样的。这样线上就只用存储里的文件。\r\n\r\n​ 在CDN这块，一般在正常运营的企业都会选择支付费用，因为对用户端简直是友好的不得了。CDN上可以增加回源地址，用于CDN 100%捕获缓存，这个100%并不是绝对的。但能极大的提高了系统访问可用性。\r\n\r\n总结一下\r\n\r\n为了能够更好的解决静态文件拖慢访问速度，我们把静态文件放在存储空间上，然后用CDN来缓存它。\r\n\r\n我们有几个选择，我们存放静态文件时，把他在本地服务器上存一个备份，以防止后面会更换云存储服务商。\r\n','<h2 id=\"h2--\"><a name=\"本文无图，请耐心看\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>本文无图，请耐心看</h2><p>前天写架构笔记的时候，一下子给我鼓捣出几个大方向的问题点，由于技术细节太多，也不好全部写下来，也没有能力。</p>\r\n<p>那,今天写什么呢?</p>\r\n<p>就写我在新项目中用到的OSS吧，OSS是阿里云的命名，全称是对象存储服务，我在几个月前是用的亚马逊云的S3。</p>\r\n<p>我们上面开门见山就说道了阿里云的对象存储,那我们为什么要用呢?</p>\r\n<p>我的回答是要做分布式，你的静态资源依赖就不能在统一台服务器，因为你部署好一台服务器，并让他能正常被用户访问，但是后来因为业务膨胀了，业绩爆增，致使你的服务器时不时宕机。你要再堆一台机器时，你会发现,这根本行不同啊。</p>\r\n<p>​ 第一个问题是，在呢么保持用户的登陆状态,这个问题我会单独找个时间认真研究后写，今天不赘述。</p>\r\n<p>​ 第二个问题是,你那些原来显示到前端的JS、图片、样式文件都在那台时不时宕机的机器上而在你新堆的其上没法显示。</p>\r\n<p>​ 第三个问题是,你的数据库在宕机的那台机器上，虽说可以通过IP连上去，这解决不了宕机这个根本问题。本问题今天也不谈，内容过多，也没有更好的实践知识。</p>\r\n<p>我们就从第二个问题开始谈吧，因为搬家/堆机器，应用上的样式，特效，上传文件都不可靠了。对，就是这个问题,所以才用对象存储。</p>\r\n<p>那么,我们有那几个选择呢？根据业务的需求,我们可以选择 阿里OSS，七牛云存储,亚马逊S3。我个人的博客会采用七牛云，我已经在开始写业务代码的过程中了。</p>\r\n<p>最佳时间是怎样的呢?</p>\r\n<p>​ 我原来是这样子搞的,也就是那个S3的项目，在本地服务器不存储静态资源文件，全部上传至AWS S3。但这样搞，在实践中有一个非常尴尬的问题，就是国内上传速度是在是太慢，经常还会被卡住、超时。</p>\r\n<p>​ 最近我又在想，我可以先把文件上传到本地服务器上，然后再调用SDK上传，在本地服务器上留下原始文件，然后计划删除本地服务器的文件。当然这个方案好像也不止一个人跟我一样想啊，没钱的时候是可以考虑这种操作。</p>\r\n<p>​ 但是，这样处理并不是最好的实践，原因是不可靠，万一哪天不想用云存储了，不留下一个天坑让自己跳么？所以，在正式的企业项目中，尽量用双保险。即单独部署一台静态服务器，这台服务器只存储静态文件，并做好上传接口。上传到该服务器的同时把文件上传到云存储上去。</p>\r\n<p>​ 数据库存储文件信息，就和云存储一样的信息，我这里就称之为KEY好吧。这样就可以保证本地和云存储的文件信息是一样的。这样线上就只用存储里的文件。</p>\r\n<p>​ 在CDN这块，一般在正常运营的企业都会选择支付费用，因为对用户端简直是友好的不得了。CDN上可以增加回源地址，用于CDN 100%捕获缓存，这个100%并不是绝对的。但能极大的提高了系统访问可用性。</p>\r\n<p>总结一下</p>\r\n<p>为了能够更好的解决静态文件拖慢访问速度，我们把静态文件放在存储空间上，然后用CDN来缓存它。</p>\r\n<p>我们有几个选择，我们存放静态文件时，把他在本地服务器上存一个备份，以防止后面会更换云存储服务商。</p>\r\n','2970940'),(14,2,'yield 有什么用？','p0016c546','yield有什么用,生成器是什么','python 就像每一个学电脑的人都想玩一下ps一样的语言',1,2,20,'2019-11-04 12:08:44','2019-11-04 11:46:09','','python 就像每一个学电脑的人都想玩一下ps一样的语言','yield 最大的用处就是节省资源，利用有限的资源做更多的事情，怎么做到的呢？\r\n\r\n    使用yield关键字的语句，计算得到的资源不会存储在内存中，而是返回一个对象，我们可以通过使用这个对象（迭代对象）来获取数据，用多少就拿多少，极大的提高了程序的性能。\r\n\r\n这么说，你肯定还有些不解，举个现实生活中的例子你就明白了。\r\n\r\n    你家今年大丰收，收了几千斤粮食，你把粮食装进粮仓。你要吃粮食，就去放粮食出来，你不会一下子全部放出来堆在你家的屋子里是吧。就是你这一个月吃多少就放多少！这个粮仓就是一个对象，这里要注意一下，这个例子确实能帮助理解yield，但不确切，因为这个粮仓是反复利用的，他不会根yield对象一样，只能用一次，用完就没了。\r\n\r\n    有了这个形象的说法，我们就可以进一步的了解它的用法了\r\n\r\nyield 和return用法相似，但又不一样，return会停止后面的代码运行或者跳出你的循环代码块，而yield后面的语句会接着运行。\r\n\r\nyield 返回的对象是一次性的，循环一次，里面就少一个，直到对象里没有数据为止。\r\n\r\n    这样的神操作能极大的提高程序的运行效率，不过随着时代的发展，还进化出了另一个概念，那就是协程，是提高工作效率的，是典型的异步操作范畴，这里不展开讲，我相信我们都能往这个方向继续学习。\r\n\r\n本文创作之前有写过一篇文章，是说这个生成器的原理和用法的，这里直链接过去哈。\r\n\r\n这篇文章是我后来对这个yield的新的认识，也是我自己的理解，每个人都有自己的理解，但也有可能不是恒正确的，如果我后面有什么新的认知，我一定会过来推翻它。\r\n\r\n学习是一种态度。\r\n本文在阅读python参考手册时写成。','<p>yield 最大的用处就是节省资源，利用有限的资源做更多的事情，怎么做到的呢？</p>\r\n<pre><code>使用yield关键字的语句，计算得到的资源不会存储在内存中，而是返回一个对象，我们可以通过使用这个对象（迭代对象）来获取数据，用多少就拿多少，极大的提高了程序的性能。\r\n</code></pre><p>这么说，你肯定还有些不解，举个现实生活中的例子你就明白了。</p>\r\n<pre><code>你家今年大丰收，收了几千斤粮食，你把粮食装进粮仓。你要吃粮食，就去放粮食出来，你不会一下子全部放出来堆在你家的屋子里是吧。就是你这一个月吃多少就放多少！这个粮仓就是一个对象，这里要注意一下，这个例子确实能帮助理解yield，但不确切，因为这个粮仓是反复利用的，他不会根yield对象一样，只能用一次，用完就没了。\r\n\r\n有了这个形象的说法，我们就可以进一步的了解它的用法了\r\n</code></pre><p>yield 和return用法相似，但又不一样，return会停止后面的代码运行或者跳出你的循环代码块，而yield后面的语句会接着运行。</p>\r\n<p>yield 返回的对象是一次性的，循环一次，里面就少一个，直到对象里没有数据为止。</p>\r\n<pre><code>这样的神操作能极大的提高程序的运行效率，不过随着时代的发展，还进化出了另一个概念，那就是协程，是提高工作效率的，是典型的异步操作范畴，这里不展开讲，我相信我们都能往这个方向继续学习。\r\n</code></pre><p>本文创作之前有写过一篇文章，是说这个生成器的原理和用法的，这里直链接过去哈。</p>\r\n<p>这篇文章是我后来对这个yield的新的认识，也是我自己的理解，每个人都有自己的理解，但也有可能不是恒正确的，如果我后面有什么新的认知，我一定会过来推翻它。</p>\r\n<p>学习是一种态度。<br>本文在阅读python参考手册时写成。</p>\r\n','2970940'),(15,2,'supervisor使用手记,本博客系统用到该技术','p2c54734d','supervisor 运行flask','其实这并不是所谓的踩坑，他只是问题的解决手记而已，记录了一些处理问题的思路。',1,2,20,'2019-11-04 12:11:56','2019-11-04 12:14:19','<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	supervisor配置详解\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	<a href=\"https://www.cnblogs.com/ajianbeyourself/p/5534737.html\" target=\"_blank\" style=\"box-sizing:border-box;background-color:transparent;color:#337AB7;text-decoration-line:none;\">https://www.cnblogs.com/ajianbeyourself/p/5534737.html</a> \r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	supervisorctl unix ///tmp/supervisor.sock refused connection\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	<a href=\"https://blog.csdn.net/tengdazhang770960436/article/details/78933639\" target=\"_blank\" style=\"box-sizing:border-box;background-color:transparent;color:#337AB7;text-decoration-line:none;\">https://blog.csdn.net/tengdazhang770960436/article/details/78933639</a> \r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	使用 supervisor 管理进程\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	<a href=\"http://www.ttlsa.com/linux/using-supervisor-control-program/\" target=\"_blank\" style=\"box-sizing:border-box;background-color:transparent;color:#23527C;outline:0px;\">http://www.ttlsa.com/linux/using-supervisor-control-program/</a> \r\n</p>','其实这并不是所谓的踩坑，他只是问题的解决手记而已，记录了一些处理问题的思路。','其实这并不是所谓的踩坑，他只是问题的解决手记而已，记录了一些处理问题的思路。\r\n\r\n公司新网站（https://www.wavlink.com） 刚刚于五一后上线，由于是公司使用，电商部门的强烈要求需要使用ssl证书加密。可证书很贵，现在还不想为公司把这笔钱花出去，至少也得再过一年。\r\n\r\n至于如何生成浏览器都认账的SSL证书，这里不做介绍，后面写一篇文章来讲解，这里指向说我想给我的flask博客也安装一个证书，然而在过程中出现了意外，这里说的处理意外的思路过程。\r\n\r\n我的flask 是跑的python3+supervisor+gunicorn+nginx+mysql。节前我就花了很多心思把他部署上去了，也没有遇到什么问题，可是这次想整个证书重启了一下服务器，结果发现nginx报502错误了。到这里我能第一个想到是flask实例没有启动，而启动flask实例是gunicorn的事情，gunicorn是用supervisor驱动的，所以到推过来，肯定是supervisor出了问题。\r\n\r\n于是执行命令\r\n\r\n\r\nsupervisorctl -c /etc/supervisor/supervisor.conf\r\n unix:///tmp/supervisor.sock no such file\r\n这个就尴尬了哈，不太会诶，于是一路谷歌（其实我这里用的是百度，别坑百度了，国内搜索技术还是有些用的，推荐不能翻墙的哥们用），问题其实出在了supervisorctl上。\r\n\r\n这个命令就像httpd 和apachectl 一样的关系，具体可以谷歌查一下，磨刀不误砍柴工。supervisorctl要求你的supervisord要启动起来用于监听sock文件。\r\n\r\n几经周折，发现我原来运行supervisord 是用的 -C指定配置文件运行的\r\n\r\nsupervisord -c /etc/supervisor/supervisor.conf\r\n可是supervisord服务随机启动是找不到这个配置文件位置（研究了八三年天，发现你用哪个用户身份启动，就需要再哪个用户家目录里放supervisord.conf）\r\n\r\n知道了问题所在，那就将文件连接过来就好了啊\r\n\r\nln -s /etc/supervisor/supervisord.conf ~/supervisord.conf\r\n再运行 supervisord 命令，可以看到实例已经运行起来了。\r\n\r\nsupervisorctl status 可以查看状态\r\n\r\n到这里，问题就解决了。\r\n','<p>其实这并不是所谓的踩坑，他只是问题的解决手记而已，记录了一些处理问题的思路。</p>\r\n<p>公司新网站（<a href=\"https://www.wavlink.com）\">https://www.wavlink.com）</a> 刚刚于五一后上线，由于是公司使用，电商部门的强烈要求需要使用ssl证书加密。可证书很贵，现在还不想为公司把这笔钱花出去，至少也得再过一年。</p>\r\n<p>至于如何生成浏览器都认账的SSL证书，这里不做介绍，后面写一篇文章来讲解，这里指向说我想给我的flask博客也安装一个证书，然而在过程中出现了意外，这里说的处理意外的思路过程。</p>\r\n<p>我的flask 是跑的python3+supervisor+gunicorn+nginx+mysql。节前我就花了很多心思把他部署上去了，也没有遇到什么问题，可是这次想整个证书重启了一下服务器，结果发现nginx报502错误了。到这里我能第一个想到是flask实例没有启动，而启动flask实例是gunicorn的事情，gunicorn是用supervisor驱动的，所以到推过来，肯定是supervisor出了问题。</p>\r\n<p>于是执行命令</p>\r\n<p>supervisorctl -c /etc/supervisor/supervisor.conf<br> unix:///tmp/supervisor.sock no such file<br>这个就尴尬了哈，不太会诶，于是一路谷歌（其实我这里用的是百度，别坑百度了，国内搜索技术还是有些用的，推荐不能翻墙的哥们用），问题其实出在了supervisorctl上。</p>\r\n<p>这个命令就像httpd 和apachectl 一样的关系，具体可以谷歌查一下，磨刀不误砍柴工。supervisorctl要求你的supervisord要启动起来用于监听sock文件。</p>\r\n<p>几经周折，发现我原来运行supervisord 是用的 -C指定配置文件运行的</p>\r\n<p>supervisord -c /etc/supervisor/supervisor.conf<br>可是supervisord服务随机启动是找不到这个配置文件位置（研究了八三年天，发现你用哪个用户身份启动，就需要再哪个用户家目录里放supervisord.conf）</p>\r\n<p>知道了问题所在，那就将文件连接过来就好了啊</p>\r\n<p>ln -s /etc/supervisor/supervisord.conf ~/supervisord.conf<br>再运行 supervisord 命令，可以看到实例已经运行起来了。</p>\r\n<p>supervisorctl status 可以查看状态</p>\r\n<p>到这里，问题就解决了。</p>\r\n','2970940'),(16,2,'装饰器@staticmethod和@classmethod有什么区别？','pbb6cbd40','staticmethod,classmethod,类装饰器和静态装饰器的却别','python地基要打牢，后面的使用才游刃有余',1,1,20,'2019-11-04 13:22:19','2019-11-04 11:46:09','','python地基要打牢，后面的使用才游刃有余','@CLASSMETHOD 隐藏的传递给第一个参数，是对象实体的类，而不是SELF。 @STATICMETHOD 不管传递给第一个参数的是SELF(对象实体)还是CLS(对象实体的类)，他们的效果（表现）都一样。\r\n\r\n如果有个具体的例子，可能会更好的理解，这里也应用 foo bar原则，就不多做解释。\r\n\r\n    class Foo(object):\r\n        def bar(self,x):\r\n            print(\"executing bar({},{})\".format(self,x))\r\n        @classmethod\r\n        def class_bar(cls,x):\r\n            print(\"executing class_bar({},{})\".format(cls,x))\r\n        @staticmethod\r\n        def static_bar(x):\r\n            print(\"executing static_bar({})\".format(x))\r\n    a=Foo()\r\n下面是一个对象实体调用方法的常用方式。对相关实体a被隐藏的传递给了第一个参数。\r\n```python\r\na.bar(100)\r\nexecuting bar(<__main__.Foo object at 0x7f67aca7bf28>,100)\r\n```\r\n如果用classmethod装饰器来调用呢？隐藏传递到第一个参数的是对象实体类（class Foo），而不是self。\r\n如下：\r\n```python\r\na.class_bar(100)\r\nexecuting class_bar(<class \'__main__.Foo\'>,100)\r\n```\r\n其实吧，你把一些方法定义成@classmethod装饰器，就是想直接通过类来调用这个方法，而不需要先实例化类，再调用静态方法。这个在日常开发中比较常用，例如我在写flask modules 定义 一些查询方法时会用到类装饰器，刚开始我也不知道为什么这样搞，刚开始就是对着文档抄。\r\n你如果不实例化类来调用bar()方法的话会报错\r\n\r\n```python\r\nFoo.bar(100)\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\nTypeError: bar() missing 1 required positional argument: \'x\'\r\n```\r\n而调用类方法就不会有问题：\r\n\r\n```python\r\nFoo.class_bar(100)\r\nexecuting class_bar(<class \'__main__.Foo\'>,100)\r\n```\r\n至于静态方法装饰器呢？\r\n不管你传递给第一个参数的是self, 还是cls， 他们的结果都一样：\r\n```python\r\na.static_bar(100)\r\nexecuting static_bar(100)\r\nFoo.static_bar(100)\r\nexecuting static_bar(100)\r\n```\r\n静态方法被用来组织类之间有逻辑关系的函数。为什么这么说呢？\r\nbar()只是函数，但你要调用a.bar的时候你得到的不仅是一个函数，你得到的是一个第一个参数绑定到a的\"pro版\"函数。 bar(）需要两个参数。而a.foo（）只需要一个参数。\r\n\r\na绑定了foo。下面可以证实什么是绑定了：\r\n\r\n```python\r\nprint(a.bar)\r\n<bound method Foo.bar of <__main__.Foo object at 0x7f67aca7bf28>>\r\n```\r\n如果使用 a.class_bar,是Foo绑定到了class_bar,而不是a。\r\n\r\n```python\r\nprint(a.class_bar)\r\n<bound method Foo.class_bar of <class \'__main__.Foo\'>>\r\n```\r\n最后呢？静态方法其实就是一个方法。 a.static_bar 只返回一个不带参数绑定的方法。static_bar 和 a.static_bar只需要一个参数。\r\n```python\r\nprint(a.static_bar)\r\n<function Foo.static_bar at 0x7f67ac8e0598>\r\n```\r\n总结就不用了吧，文章开头已经说了总结，这里就说一下文章逻辑，本文参考100道面实题，做面试题还能明白以前不明白为什么那样写。如果不明白为什么文档里这样写，那就先抄下来，让程序跑起来，过一段时间其义自见。\r\n\r\n','<p><a href=\"https://github.com/CLASSMETHOD\" title=\"&#64;CLASSMETHOD\" class=\"at-link\">@CLASSMETHOD</a> 隐藏的传递给第一个参数，是对象实体的类，而不是SELF。 <a href=\"https://github.com/STATICMETHOD\" title=\"&#64;STATICMETHOD\" class=\"at-link\">@STATICMETHOD</a> 不管传递给第一个参数的是SELF(对象实体)还是CLS(对象实体的类)，他们的效果（表现）都一样。</p>\r\n<p>如果有个具体的例子，可能会更好的理解，这里也应用 foo bar原则，就不多做解释。</p>\r\n<pre><code>class Foo(object):\r\n    def bar(self,x):\r\n        print(&quot;executing bar({},{})&quot;.format(self,x))\r\n    @classmethod\r\n    def class_bar(cls,x):\r\n        print(&quot;executing class_bar({},{})&quot;.format(cls,x))\r\n    @staticmethod\r\n    def static_bar(x):\r\n        print(&quot;executing static_bar({})&quot;.format(x))\r\na=Foo()\r\n</code></pre><p>下面是一个对象实体调用方法的常用方式。对相关实体a被隐藏的传递给了第一个参数。</p>\r\n<pre><code class=\"lang-python\">a.bar(100)\r\nexecuting bar(&lt;__main__.Foo object at 0x7f67aca7bf28&gt;,100)\r\n</code></pre>\r\n<p>如果用classmethod装饰器来调用呢？隐藏传递到第一个参数的是对象实体类（class Foo），而不是self。<br>如下：</p>\r\n<pre><code class=\"lang-python\">a.class_bar(100)\r\nexecuting class_bar(&lt;class &#39;__main__.Foo&#39;&gt;,100)\r\n</code></pre>\r\n<p>其实吧，你把一些方法定义成<a href=\"https://github.com/classmethod\" title=\"&#64;classmethod\" class=\"at-link\">@classmethod</a>装饰器，就是想直接通过类来调用这个方法，而不需要先实例化类，再调用静态方法。这个在日常开发中比较常用，例如我在写flask modules 定义 一些查询方法时会用到类装饰器，刚开始我也不知道为什么这样搞，刚开始就是对着文档抄。<br>你如果不实例化类来调用bar()方法的话会报错</p>\r\n<pre><code class=\"lang-python\">Foo.bar(100)\r\nTraceback (most recent call last):\r\n  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;\r\nTypeError: bar() missing 1 required positional argument: &#39;x&#39;\r\n</code></pre>\r\n<p>而调用类方法就不会有问题：</p>\r\n<pre><code class=\"lang-python\">Foo.class_bar(100)\r\nexecuting class_bar(&lt;class &#39;__main__.Foo&#39;&gt;,100)\r\n</code></pre>\r\n<p>至于静态方法装饰器呢？<br>不管你传递给第一个参数的是self, 还是cls， 他们的结果都一样：</p>\r\n<pre><code class=\"lang-python\">a.static_bar(100)\r\nexecuting static_bar(100)\r\nFoo.static_bar(100)\r\nexecuting static_bar(100)\r\n</code></pre>\r\n<p>静态方法被用来组织类之间有逻辑关系的函数。为什么这么说呢？<br>bar()只是函数，但你要调用a.bar的时候你得到的不仅是一个函数，你得到的是一个第一个参数绑定到a的”pro版”函数。 bar(）需要两个参数。而a.foo（）只需要一个参数。</p>\r\n<p>a绑定了foo。下面可以证实什么是绑定了：</p>\r\n<pre><code class=\"lang-python\">print(a.bar)\r\n&lt;bound method Foo.bar of &lt;__main__.Foo object at 0x7f67aca7bf28&gt;&gt;\r\n</code></pre>\r\n<p>如果使用 a.class_bar,是Foo绑定到了class_bar,而不是a。</p>\r\n<pre><code class=\"lang-python\">print(a.class_bar)\r\n&lt;bound method Foo.class_bar of &lt;class &#39;__main__.Foo&#39;&gt;&gt;\r\n</code></pre>\r\n<p>最后呢？静态方法其实就是一个方法。 a.static_bar 只返回一个不带参数绑定的方法。static_bar 和 a.static_bar只需要一个参数。</p>\r\n<pre><code class=\"lang-python\">print(a.static_bar)\r\n&lt;function Foo.static_bar at 0x7f67ac8e0598&gt;\r\n</code></pre>\r\n<p>总结就不用了吧，文章开头已经说了总结，这里就说一下文章逻辑，本文参考100道面实题，做面试题还能明白以前不明白为什么那样写。如果不明白为什么文档里这样写，那就先抄下来，让程序跑起来，过一段时间其义自见。</p>\r\n','2970940'),(17,2,'自己写的程序出了问题，当然要给自己解决问题的经过记录一下','paa4d3041','python3, nginx+supersion+gunicorn+mysql,flask','写程序不能一帆风顺是人之常情了，太好的程序我写不出，太差的我也写不出，只是在中间徘徊',1,1,20,'2019-11-05 12:15:48','2019-11-05 12:09:47','<p style=\"white-space:normal;\">\r\n	参考连接：\r\n</p>\r\n<p style=\"white-space:normal;\">\r\n	<a href=\"http://www.ttlsa.com/linux/using-supervisor-control-program/\" target=\"_blank\">http://www.ttlsa.com/linux/using-supervisor-control-program/</a>\r\n</p>','写程序不能一帆风顺是人之常情了，太好的程序我写不出，太差的我也写不出，只是在中间徘徊','```\r\n前段时间，学习Python3，想着就写了一个最简单的博客，目前连评论功能都没有上呢！\r\n```\r\n为了保险，我还是在有道云做一个备案，免得我这博客那天我没兴趣了要关闭。<br>\r\n不过说真的，python3很好用，代码优雅。我是用flask框架写的一个最简版，后续的功能可以无限制的增加。\r\n\r\n### 重点来了哈！\r\n妈的部署着实不易啊，搞完居然还会崩溃。\r\n我这里是用的nginx+supersion+gunicorn+mysql\r\n经常会出现\r\n\r\n```\r\nunix:///var/run/supervisor.sock refused connection\r\n```\r\n这个大概是不想出现的吧！\r\n1、一般出现这个错误 你应该执行的是这个命令\r\n```\r\nsupervisorctl restart all\r\n```\r\n或者是这个\r\n```\r\nsupervisorctl start all\r\n```\r\n2、你的服务器意外重启了<br>\r\n3、你的数据库挂了导致supervisord 断掉了\r\n<br>\r\n既然有了这个思路，那么反推过去，处理问题应该是这样的\r\n1、先看一下所有的服务端口是否开启\r\n```\r\nnetstat -tnpla\r\n```\r\n这个过程主要认清楚 80  3306  如果是反向代理 还要认清楚 apache 的端口是否开启<br>\r\n![](/static/uploads/images/20180721104047a14078533c354b32b69fe1d80ca6e52e.png)\r\n我这个是数据库没有启动，所以呢，把数据库开启\r\n```\r\nlnmp restart\r\n```\r\n++注意哈：我这个服务器是lnmp.org的部署脚本，所以有这个命令，要的可以去找哇++\r\n\r\n再探\r\n```\r\nnetstat -tnpla\r\n```\r\n如图：\r\n![](/static/uploads/images/201807211041586e2c9359cdea403e87e2cb79e29aa1d7.png)\r\n嗯，已经开启了\r\n2、开启supersiond进程\r\n```\r\nsupervisord -c ~/supervisord.conf # 这里的 -c 后面的配置文件，我是放在了home目录里的，方便维护\r\n```\r\n3、再探，发现8000端口已经启动\r\n> 由于我在解决问题的开始就已经将 进程启动了，所以这里看那个8000端口是启动的\r\n> 我的flask 是跑在8000端口的，当然也可以不一样\r\n\r\n4、验证是否正常了\r\n5、再执行 supervisorctl restart all 试试\r\n','<pre><code>前段时间，学习Python3，想着就写了一个最简单的博客，目前连评论功能都没有上呢！\r\n</code></pre><p>为了保险，我还是在有道云做一个备案，免得我这博客那天我没兴趣了要关闭。<br><br>不过说真的，python3很好用，代码优雅。我是用flask框架写的一个最简版，后续的功能可以无限制的增加。</p>\r\n<h3 id=\"h3--\"><a name=\"重点来了哈！\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>重点来了哈！</h3><p>妈的部署着实不易啊，搞完居然还会崩溃。<br>我这里是用的nginx+supersion+gunicorn+mysql<br>经常会出现</p>\r\n<pre><code>unix:///var/run/supervisor.sock refused connection\r\n</code></pre><p>这个大概是不想出现的吧！<br>1、一般出现这个错误 你应该执行的是这个命令</p>\r\n<pre><code>supervisorctl restart all\r\n</code></pre><p>或者是这个</p>\r\n<pre><code>supervisorctl start all\r\n</code></pre><p>2、你的服务器意外重启了<br><br>3、你的数据库挂了导致supervisord 断掉了<br><br><br>既然有了这个思路，那么反推过去，处理问题应该是这样的<br>1、先看一下所有的服务端口是否开启</p>\r\n<pre><code>netstat -tnpla\r\n</code></pre><p>这个过程主要认清楚 80  3306  如果是反向代理 还要认清楚 apache 的端口是否开启<br><br><img src=\"/static/uploads/images/20180721104047a14078533c354b32b69fe1d80ca6e52e.png\" alt=\"\"><br>我这个是数据库没有启动，所以呢，把数据库开启</p>\r\n<pre><code>lnmp restart\r\n</code></pre><p>++注意哈：我这个服务器是lnmp.org的部署脚本，所以有这个命令，要的可以去找哇++</p>\r\n<p>再探</p>\r\n<pre><code>netstat -tnpla\r\n</code></pre><p>如图：<br><img src=\"/static/uploads/images/201807211041586e2c9359cdea403e87e2cb79e29aa1d7.png\" alt=\"\"><br>嗯，已经开启了<br>2、开启supersiond进程</p>\r\n<pre><code>supervisord -c ~/supervisord.conf # 这里的 -c 后面的配置文件，我是放在了home目录里的，方便维护\r\n</code></pre><p>3、再探，发现8000端口已经启动</p>\r\n<blockquote>\r\n<p>由于我在解决问题的开始就已经将 进程启动了，所以这里看那个8000端口是启动的<br>我的flask 是跑在8000端口的，当然也可以不一样</p>\r\n</blockquote>\r\n<p>4、验证是否正常了<br>5、再执行 supervisorctl restart all 试试</p>\r\n','2970940'),(18,2,'flask-migrate 更新 迁移数据库','p7ce84d44','flask-migrate,flask数据库迁移','有些东西必须要重复好多次才能记住，不要告诉我你过目不忘',1,1,20,'2019-11-05 12:17:53','2019-11-05 12:09:47','','有些东西必须要重复好多次才能记住，不要告诉我你过目不忘','##高频使用是技术成熟的基本方法，你每天都重复吗？\r\n记得写完博客程序了有一段时间了，当时功能可能没有写的很全，今天呢，又想起来搞一下（其实不是刚想起，是早有打算的，拖延症……莫的法阿）。\r\n![](/static/uploads/images/201807242234140ffbac6ae6c84d6a9a0b3107a5c83a7e.png)\r\n我要给数据库加一个字段，如果用php可能就不会有这个动作了，但是我用的时python flask + sqlalchemy。他有很强大的数据库迁移功能，实现的是可以不用先删除旧表更新数据库，这样可以完整保存你的开发记录。\r\n里面有几个命令可以滚回，合并，更新。妈的有几个月没使了，居然给忘记了，马上翻阅文档，特意记录下来，下回再忘记了就来查询。\r\n1、需要添加的数据库表、字段\r\n```\r\n   \"\"\"\r\n    文章表，只有注册的用户才能发表文章，必须制定分类\r\n    \"\"\"\r\n    __tablename__ = \"tb_article\"\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    user_id = db.Column(db.Integer, db.ForeignKey(\"tb_user.id\"))\r\n    category_id = db.Column(db.Integer, db.ForeignKey(\"tb_category.id\"))\r\n    title = db.Column(db.String(64))\r\n    url_title = db.Column(db.String(32))\r\n    keywords = db.Column(db.String(32))\r\n    description = db.Column(db.String(255))\r\n    image = db.Column(db.String(255))\r\n    content = db.Column(db.Text)\r\n    markdown = db.Column(db.Text)\r\n    top = db.Column(db.SmallInteger)\r\n    relationship = db.Column(db.Text)\r\n    status = db.Column(db.SmallInteger)\r\n    reply = db.relationship(\"Reply\", backref=\"article\")\r\n    count = db.Column(db.Integer, default=int(100))\r\n```\r\n\r\n2、创建迁移脚本\r\n```\r\npython manage.py db migrate -m \"添加你的修改信息\"  #跟git commit -m \"\"是一样的意思\r\n```\r\n3、更新数据库\r\n```\r\npython manage.py db upgrade\r\n```','<h2 id=\"h2--\"><a name=\"高频使用是技术成熟的基本方法，你每天都重复吗？\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>高频使用是技术成熟的基本方法，你每天都重复吗？</h2><p>记得写完博客程序了有一段时间了，当时功能可能没有写的很全，今天呢，又想起来搞一下（其实不是刚想起，是早有打算的，拖延症……莫的法阿）。<br><img src=\"/static/uploads/images/201807242234140ffbac6ae6c84d6a9a0b3107a5c83a7e.png\" alt=\"\"><br>我要给数据库加一个字段，如果用php可能就不会有这个动作了，但是我用的时python flask + sqlalchemy。他有很强大的数据库迁移功能，实现的是可以不用先删除旧表更新数据库，这样可以完整保存你的开发记录。<br>里面有几个命令可以滚回，合并，更新。妈的有几个月没使了，居然给忘记了，马上翻阅文档，特意记录下来，下回再忘记了就来查询。<br>1、需要添加的数据库表、字段</p>\r\n<pre><code>   &quot;&quot;&quot;\r\n    文章表，只有注册的用户才能发表文章，必须制定分类\r\n    &quot;&quot;&quot;\r\n    __tablename__ = &quot;tb_article&quot;\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    user_id = db.Column(db.Integer, db.ForeignKey(&quot;tb_user.id&quot;))\r\n    category_id = db.Column(db.Integer, db.ForeignKey(&quot;tb_category.id&quot;))\r\n    title = db.Column(db.String(64))\r\n    url_title = db.Column(db.String(32))\r\n    keywords = db.Column(db.String(32))\r\n    description = db.Column(db.String(255))\r\n    image = db.Column(db.String(255))\r\n    content = db.Column(db.Text)\r\n    markdown = db.Column(db.Text)\r\n    top = db.Column(db.SmallInteger)\r\n    relationship = db.Column(db.Text)\r\n    status = db.Column(db.SmallInteger)\r\n    reply = db.relationship(&quot;Reply&quot;, backref=&quot;article&quot;)\r\n    count = db.Column(db.Integer, default=int(100))\r\n</code></pre><p>2、创建迁移脚本</p>\r\n<pre><code>python manage.py db migrate -m &quot;添加你的修改信息&quot;  #跟git commit -m &quot;&quot;是一样的意思\r\n</code></pre><p>3、更新数据库</p>\r\n<pre><code>python manage.py db upgrade\r\n</code></pre>','2970940'),(19,2,'python 的列表','pf1e7a548','list of python','python 的列表 如此之强大，周末为了巩固知识，再次阅读参考手册，复习一遍',1,2,20,'2019-11-05 12:20:13','2019-11-05 12:09:47','<span style=\"white-space:normal;\">本文来自于《python参考手册》</span>','python 的列表 如此之强大，周末为了巩固知识，再次阅读参考手册，复习一遍','##列表\r\n列表是任意对象的序列。把值放入中括号中就可以创建它。像这样：\r\n```python\r\nnames=[\"Dave\",\"Apple\",\"Dell\",\"John\"]\r\n```\r\nPython的列表索引值从0开始的，使用索引可以访问到列表中的项，并且可以修改它：\r\n```python\r\na=names[2]  #返回列表中的Dell,刚不是说了吗？index从0开始\r\nname[1]=\"qiujin\" #将Apple修改为qiujin\r\n```\r\nappend()方法可以往末尾加数据\r\n```python\r\nnames.append(\"tangxiujun\")\r\n```\r\ninsert()方法向指定的地方插入数据\r\n```python\r\nname.insert(2,\"qiutangling\")\r\n```\r\n列表还可以使用+来链接列表\r\n```python\r\na=[1,2,3]\r\nb=[\"a\",\"b\",\"c\"]\r\nc=a+b\r\n```\r\n创建一个空列表有两种方式，如下：\r\n```python\r\nnames=[]\r\nnames=list()\r\n```\r\n列表里可以包含任意的东西\r\n例如：\r\n```python\r\na=[\"Dave\",1,3.14,[100,200],8,\"qiujin\"]\r\n```\r\n嵌套访问，我是说它有子列表的情况下哇\r\n可以这样：\r\n```python\r\na[2][1]  #返回200\r\n```\r\n还可以更深层的嵌套，一般数据太复杂不利于阅读，我觉得吧 ，不应该方太深。\r\n切片，使用切片运算可以提取一个子列表或者对子列表进行重新赋值\r\n语法：names[start : end : step]\r\nstart:起始位置\r\nend:结束位置\r\nstep:步进值\r\n~~~这里的语法中间冒号两头我加了一个空格，用以抵消markdown的错误~~~\r\n```python\r\nb=names[0:2]  #返回\"Dave\",\"Apple\",\"Dell\"\r\nc=names[2:]   #返回从第二个index值开始到末尾的所有列表值\r\nnames[1]=\"tp-link\" #将第列表的第2项替换为tp-link\r\nnames[0:2]=[\'Dave\',\'Mark\',\"Jeff\"]#将列表的头3项替换成新的列表值\r\n```\r\n还有更复杂的操作，切片还支持第三个值，叫步进值，这样表示\r\n```python\r\nb=a[::2]#将整个列表，隔两个值取一个值放入新列表中\r\n```\r\n这个步进值可以是负数，表示反向取值\r\n```python\r\nc=a[::-1]  #反过来\r\n```\r\n\r\n\r\n\r\n','<h2 id=\"h2-u5217u8868\"><a name=\"列表\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>列表</h2><p>列表是任意对象的序列。把值放入中括号中就可以创建它。像这样：</p>\r\n<pre><code class=\"lang-python\">names=[&quot;Dave&quot;,&quot;Apple&quot;,&quot;Dell&quot;,&quot;John&quot;]\r\n</code></pre>\r\n<p>Python的列表索引值从0开始的，使用索引可以访问到列表中的项，并且可以修改它：</p>\r\n<pre><code class=\"lang-python\">a=names[2]  #返回列表中的Dell,刚不是说了吗？index从0开始\r\nname[1]=&quot;qiujin&quot; #将Apple修改为qiujin\r\n</code></pre>\r\n<p>append()方法可以往末尾加数据</p>\r\n<pre><code class=\"lang-python\">names.append(&quot;tangxiujun&quot;)\r\n</code></pre>\r\n<p>insert()方法向指定的地方插入数据</p>\r\n<pre><code class=\"lang-python\">name.insert(2,&quot;qiutangling&quot;)\r\n</code></pre>\r\n<p>列表还可以使用+来链接列表</p>\r\n<pre><code class=\"lang-python\">a=[1,2,3]\r\nb=[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\r\nc=a+b\r\n</code></pre>\r\n<p>创建一个空列表有两种方式，如下：</p>\r\n<pre><code class=\"lang-python\">names=[]\r\nnames=list()\r\n</code></pre>\r\n<p>列表里可以包含任意的东西<br>例如：</p>\r\n<pre><code class=\"lang-python\">a=[&quot;Dave&quot;,1,3.14,[100,200],8,&quot;qiujin&quot;]\r\n</code></pre>\r\n<p>嵌套访问，我是说它有子列表的情况下哇<br>可以这样：</p>\r\n<pre><code class=\"lang-python\">a[2][1]  #返回200\r\n</code></pre>\r\n<p>还可以更深层的嵌套，一般数据太复杂不利于阅读，我觉得吧 ，不应该方太深。<br>切片，使用切片运算可以提取一个子列表或者对子列表进行重新赋值<br>语法：names[start : end : step]<br>start:起始位置<br>end:结束位置<br>step:步进值<br><del>~这里的语法中间冒号两头我加了一个空格，用以抵消markdown的错误</del>~</p>\r\n<pre><code class=\"lang-python\">b=names[0:2]  #返回&quot;Dave&quot;,&quot;Apple&quot;,&quot;Dell&quot;\r\nc=names[2:]   #返回从第二个index值开始到末尾的所有列表值\r\nnames[1]=&quot;tp-link&quot; #将第列表的第2项替换为tp-link\r\nnames[0:2]=[&#39;Dave&#39;,&#39;Mark&#39;,&quot;Jeff&quot;]#将列表的头3项替换成新的列表值\r\n</code></pre>\r\n<p>还有更复杂的操作，切片还支持第三个值，叫步进值，这样表示</p>\r\n<pre><code class=\"lang-python\">b=a[::2]#将整个列表，隔两个值取一个值放入新列表中\r\n</code></pre>\r\n<p>这个步进值可以是负数，表示反向取值</p>\r\n<pre><code class=\"lang-python\">c=a[::-1]  #反过来\r\n</code></pre>\r\n','2970940'),(20,1,'JS基础语法--事件','p437c0940','events,js,js语法基础','js事件是执行交互的重要的工具',1,2,20,'2019-11-09 05:49:31','2019-11-09 05:50:01','<p style=\"white-space:normal;\">\r\n	参考文档：\r\n</p>\r\n<p style=\"white-space:normal;\">\r\n	https://www.w3cschool.cn/javascript/js-events.html\r\n</p>\r\n<p style=\"white-space:normal;\">\r\n	全部的事件\r\n</p>\r\n<p style=\"white-space:normal;\">\r\n	https://www.w3cschool.cn/jsref/dom-obj-event.html\r\n</p>','js事件是执行交互的重要的工具','1、事件是可以被javascript侦测到的行为\r\n像点击某个按钮，机关被触发了，结果你家的自来水开关被打开了（当然这只是一种比喻）\r\nhtml事件是发生在html元素之上的事情，肯定不会无缘无故的打开你家的自来水开关的。除非你设计了硬件交互。\r\n它可以是浏览器的行为，也可以是用户操作的行为\r\nhtml网页中的每个元素都可以插入某些可以被触发的事件。\r\n1、html页面完成加再\r\n2、html用户输入字段改变时\r\n3、点击了某个按钮\r\n通常，当触发事件时，你可以做一些有趣的事情。例如：\r\n给button加一个点击事件\r\n```javascript\r\n<button onclick=\"this.innerHtml=Date()\">The time is ?</button>\r\n```\r\n一般，用汉书来实现事件，像这样\r\n```javascript\r\n<button onclick=\"javascript::void(0);\" herf=\"displayDate()\">The time is</button>\r\nfunction displayDate(){\r\n	document.getElementById(\"demo\").innerHtml=Date();\r\n}\r\n<p id=\"demo\"></p>\r\n```\r\nJS的事件有很多，但通常就如下几种很常用\r\nonchange()     			元素改变\r\nonclick() 			点击\r\nonmouseover 		鼠标经过\r\nonmouseout 			鼠标移开\r\nonkeydown 		用户按下键盘\r\nonload 			浏览器已完成页面的加载\r\n\r\nJavaScript 可以做什么?\r\n事件可以用于处理表单验证，用户输入，用户行为及浏览器动作:\r\n1、页面加载时触发事件\r\n2、页面关闭时触发事件\r\n3、用户点击按钮执行动作\r\n4、验证用户输入内容的合法性\r\n等等 ...\r\n','<p>1、事件是可以被javascript侦测到的行为<br>像点击某个按钮，机关被触发了，结果你家的自来水开关被打开了（当然这只是一种比喻）<br>html事件是发生在html元素之上的事情，肯定不会无缘无故的打开你家的自来水开关的。除非你设计了硬件交互。<br>它可以是浏览器的行为，也可以是用户操作的行为<br>html网页中的每个元素都可以插入某些可以被触发的事件。<br>1、html页面完成加再<br>2、html用户输入字段改变时<br>3、点击了某个按钮<br>通常，当触发事件时，你可以做一些有趣的事情。例如：<br>给button加一个点击事件</p>\r\n<pre><code class=\"lang-javascript\">&lt;button onclick=&quot;this.innerHtml=Date()&quot;&gt;The time is ?&lt;/button&gt;\r\n</code></pre>\r\n<p>一般，用汉书来实现事件，像这样</p>\r\n<pre><code class=\"lang-javascript\">&lt;button onclick=&quot;javascript::void(0);&quot; herf=&quot;displayDate()&quot;&gt;The time is&lt;/button&gt;\r\nfunction displayDate(){\r\n    document.getElementById(&quot;demo&quot;).innerHtml=Date();\r\n}\r\n&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;\r\n</code></pre>\r\n<p>JS的事件有很多，但通常就如下几种很常用<br>onchange()                 元素改变<br>onclick()             点击<br>onmouseover         鼠标经过<br>onmouseout             鼠标移开<br>onkeydown         用户按下键盘<br>onload             浏览器已完成页面的加载</p>\r\n<p>JavaScript 可以做什么?<br>事件可以用于处理表单验证，用户输入，用户行为及浏览器动作:<br>1、页面加载时触发事件<br>2、页面关闭时触发事件<br>3、用户点击按钮执行动作<br>4、验证用户输入内容的合法性<br>等等 …</p>\r\n','2970940'),(21,6,'研究Python 之 yield','p6fd99749','yield有什么用,生成器是什么','学习在于细节，当你已经写过一两个项目，你就会在闲暇时间来鼓捣 基础知识',1,2,20,'2019-11-09 05:52:11','2019-11-09 05:43:07','<p>\r\n	本文参考链接：\r\n</p>\r\n<p>\r\n	https://blog.csdn.net/libbyandhelen/article/details/78957369\r\n</p>\r\n<p>\r\n	还有一篇文章值得读一下：\r\n</p>\r\n<p>\r\n	https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/\r\n</p>','学习在于细节，当你已经写过一两个项目，你就会在闲暇时间来鼓捣 基础知识','## 本文是参考一篇博客而写的\r\n好像有了一个月的时间没有更新博客了，事先说明：我不是懒哇，我在鼓捣js的基础知识。\r\n这都不是今天的重点啊，我想一个一个小知识点攻破。要练成什么段位，全靠这些了！\r\n今天的主角是 yield。\r\n以前我真不知道，看过很多参考书籍，但就是没有真正的整明白。\r\n### 可迭代对象\r\n首先要说的是 可迭代的对象\r\n```python\r\n>>>mylist=[x*x for x in range(3)]\r\n>>>for i in mylist：\r\n        print(i)\r\n0\r\n1\r\n4\r\n```\r\n这里，所有的指都存在内存里，所以不合适存放大量数据，看明白了吧。\r\n### 生成器\r\n* 可迭代\r\n* 只能读取一次，不能后退\r\n* 实时生成数据，不存在内存中\r\n```python\r\n>>> mygennerator=(x*x for x in range(5))\r\n>>> for i in mygennerator:\r\n...     print(i)\r\n...\r\n0\r\n1\r\n4\r\n9\r\n16\r\n>>>\r\n```\r\n注意你之后不能再次使用 for i in mygennerator了\r\n```python\r\n>>> for i in mygennerator:\r\n...     print(i)\r\n...\r\n>>>\r\n```\r\n没结果了\r\n### yield关键字\r\n* yield 是一个类似于 return 的关键字，只是这个函数返回的是一个生成器对象\r\n* 当你使用for进行迭代的时候，函数中的代码才会执行\r\n```python\r\n>>> def createGennerator():\r\n...     mylist=range(5)\r\n...     for i in mylist:\r\n...          yield i*i\r\n...\r\n>>> mygennerator=createGennerator()\r\n>>> type(mygennerator)\r\n<class \'generator\'>\r\n>>> print(mygennerator)\r\n<generator object createGennerator at 0x0404BB10>\r\n>>> for i in mygennerator:\r\n...     print(i)\r\n...\r\n0\r\n1\r\n4\r\n9\r\n16\r\n```\r\n第一次迭代中你的函数会执行，从开始达到yield关键字，然后返回yield后的值作为第一次迭代的返回值。\r\n然后，每次执行这个函数都会继续执行你在继续执行你在函数内部定义的那个循环的下一次，再返回那个值，直到没有可以返回的为止。\r\n\r\n','<h2 id=\"h2-u672Cu6587u662Fu53C2u8003u4E00u7BC7u535Au5BA2u800Cu5199u7684\"><a name=\"本文是参考一篇博客而写的\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>本文是参考一篇博客而写的</h2><p>好像有了一个月的时间没有更新博客了，事先说明：我不是懒哇，我在鼓捣js的基础知识。<br>这都不是今天的重点啊，我想一个一个小知识点攻破。要练成什么段位，全靠这些了！<br>今天的主角是 yield。<br>以前我真不知道，看过很多参考书籍，但就是没有真正的整明白。</p>\r\n<h3 id=\"h3-u53EFu8FEDu4EE3u5BF9u8C61\"><a name=\"可迭代对象\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>可迭代对象</h3><p>首先要说的是 可迭代的对象</p>\r\n<pre><code class=\"lang-python\">&gt;&gt;&gt;mylist=[x*x for x in range(3)]\r\n&gt;&gt;&gt;for i in mylist：\r\n        print(i)\r\n0\r\n1\r\n4\r\n</code></pre>\r\n<p>这里，所有的指都存在内存里，所以不合适存放大量数据，看明白了吧。</p>\r\n<h3 id=\"h3-u751Fu6210u5668\"><a name=\"生成器\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>生成器</h3><ul>\r\n<li>可迭代</li><li>只能读取一次，不能后退</li><li>实时生成数据，不存在内存中<pre><code class=\"lang-python\">&gt;&gt;&gt; mygennerator=(x*x for x in range(5))\r\n&gt;&gt;&gt; for i in mygennerator:\r\n...     print(i)\r\n...\r\n0\r\n1\r\n4\r\n9\r\n16\r\n&gt;&gt;&gt;\r\n</code></pre>\r\n注意你之后不能再次使用 for i in mygennerator了<pre><code class=\"lang-python\">&gt;&gt;&gt; for i in mygennerator:\r\n...     print(i)\r\n...\r\n&gt;&gt;&gt;\r\n</code></pre>\r\n没结果了<h3 id=\"h3-yield-\"><a name=\"yield关键字\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>yield关键字</h3></li><li>yield 是一个类似于 return 的关键字，只是这个函数返回的是一个生成器对象</li><li>当你使用for进行迭代的时候，函数中的代码才会执行<pre><code class=\"lang-python\">&gt;&gt;&gt; def createGennerator():\r\n...     mylist=range(5)\r\n...     for i in mylist:\r\n...          yield i*i\r\n...\r\n&gt;&gt;&gt; mygennerator=createGennerator()\r\n&gt;&gt;&gt; type(mygennerator)\r\n&lt;class &#39;generator&#39;&gt;\r\n&gt;&gt;&gt; print(mygennerator)\r\n&lt;generator object createGennerator at 0x0404BB10&gt;\r\n&gt;&gt;&gt; for i in mygennerator:\r\n...     print(i)\r\n...\r\n0\r\n1\r\n4\r\n9\r\n16\r\n</code></pre>\r\n第一次迭代中你的函数会执行，从开始达到yield关键字，然后返回yield后的值作为第一次迭代的返回值。<br>然后，每次执行这个函数都会继续执行你在继续执行你在函数内部定义的那个循环的下一次，再返回那个值，直到没有可以返回的为止。</li></ul>\r\n','2970940'),(22,6,'python 学习 各个击破之 装饰器','p04194247','decorate,装饰器','学习笔记，装饰器，decorate，本文参考python 参考手册',1,2,20,'2019-11-09 05:53:38','2019-11-09 05:43:07','<span style=\"white-space:normal;\">1、https://blog.csdn.net/Refrain__WG/article/details/81013374</span><br style=\"white-space:normal;\" />\r\n<span style=\"white-space:normal;\">2、python参考手册 第四版</span>','学习笔记，装饰器，decorate，本文参考python 参考手册','装饰器\r\n函数、方法或这类定义的前面可以使用一个特殊的符号，称之为装饰器，其目的是修改定以后面的行为。装饰器使用@符号表示，必须放在单独的行上、并且位于对应的函数、方法或类之前，例如：\r\n```python\r\n@foo\r\ndef bar():\r\n    pass\r\n```\r\n装饰器可以重叠使用，但每个装饰器必须另起一行\r\n```python\r\n@foo\r\n@bar\r\ndef spam():\r\n    pass\r\n```\r\n那！我们可以自己定义一个装饰器，用于完成每个方法前都预先执行的操作，在flask里，一般的用与权限管理，用户登陆的检查，或者一些自己想干的一些事情\r\n如下：\r\n```python\r\ndef set_count(f):\r\n    @wraps(f)\r\n    def req(*args, **kwargs):\r\n        //todo:你想做的事情，就在这里搞定\r\n        return f(*args, **kwargs)\r\n\r\n    return req\r\n```\r\n1、def set_count(f) 这一行用于定义一个装饰器方法，它接受一个函数作为参数\r\n2、@wraps(f) 这一行 表示不改变使用装饰器原有函数的结构（如__name__,__doc__）\r\n3、def req(*args,**kwargs) 表示支持任意的参数\r\n4、return req  返回 装饰器函数\r\n\'注意，代码缩进\'','<p>装饰器<br>函数、方法或这类定义的前面可以使用一个特殊的符号，称之为装饰器，其目的是修改定以后面的行为。装饰器使用@符号表示，必须放在单独的行上、并且位于对应的函数、方法或类之前，例如：</p>\r\n<pre><code class=\"lang-python\">@foo\r\ndef bar():\r\n    pass\r\n</code></pre>\r\n<p>装饰器可以重叠使用，但每个装饰器必须另起一行</p>\r\n<pre><code class=\"lang-python\">@foo\r\n@bar\r\ndef spam():\r\n    pass\r\n</code></pre>\r\n<p>那！我们可以自己定义一个装饰器，用于完成每个方法前都预先执行的操作，在flask里，一般的用与权限管理，用户登陆的检查，或者一些自己想干的一些事情<br>如下：</p>\r\n<pre><code class=\"lang-python\">def set_count(f):\r\n    @wraps(f)\r\n    def req(*args, **kwargs):\r\n        //todo:你想做的事情，就在这里搞定\r\n        return f(*args, **kwargs)\r\n\r\n    return req\r\n</code></pre>\r\n<p>1、def set<em>count(f) 这一行用于定义一个装饰器方法，它接受一个函数作为参数<br>2、<a href=\"https://github.com/wraps\" title=\"&#64;wraps\" class=\"at-link\">@wraps</a>(f) 这一行 表示不改变使用装饰器原有函数的结构（如<strong>name</strong>,<em>_doc</em></em>）<br>3、def req(<em>args,*</em>kwargs) 表示支持任意的参数<br>4、return req  返回 装饰器函数<br>‘注意，代码缩进’</p>\r\n','2970940'),(23,6,'python 各个击破之  异常第一部分','p25b6d34c','python学习之异常处理,python','异常处理是编程语言的一种机制，用于处理软件或信息系统中的一场异常情况，即超出程序执行结果预期的问题。',1,2,20,'2019-11-09 05:55:02','2019-11-09 05:43:07','','异常处理是编程语言的一种机制，用于处理软件或信息系统中的一场异常情况，即超出程序执行结果预期的问题。','##异常\r\n异常处理是编程语言的一种机制，用于处理软件或信息系统中的一场异常情况，即超出程序执行结果预期的问题。\r\n在目前大部分的编程语言中，异常处理已经非常通用，异常处理分离了接受和处理错误的代码。这个功能清理了编程者的思绪，也使代码增强了可读性，方便了维护者阅读和理解。\r\n\r\n异常处理又称错误处理，它提供了处理程序运行时出现的任意意外或者异常情况的方法。在Python中使用try catch else finally 关键词来尝试可能未成功的操作、处理失败及正常的情况，以及在事后的清理操作。\r\n举例看如何定义：\r\n```python\r\ntry:\r\n    f=open(\'test.txt\',\'r\')\r\nexcept IOError as e:\r\n    print e\r\n```\r\n如果出现IOError异常，引发的错误将存储在对象e中，然后控制权被传递给except代码块中的代码。这里只捕捉到一个异常，当然对于打开这个文件来说，异常可能就是一个，这个在日常编程中需要认真对待每一种情况。\r\n那有些错误不在一般的异常之列咋办呢？当然可以自己诱发一个异常。\r\n用raise 来诱发，这里暂时不展开讲这个问题，因为我在开发时遇到过这个问题，需要用整篇文章来阐述它，这里忽略。\r\n 通常来说，一但发生异常，就意味这不可挽回的错误，并且中断程序的正常运行。那么可以使用多个子语句来处理多个异常代码块，如下演示:    \r\n```python\r\ntry:\r\n    # do something\r\nexcept IOError as e:\r\n    #处理出现的I/O错误\r\nexcept TypeError as e:\r\n    # 处理类型错误\r\nexcept NameError as e:\r\n    # 处理名称错误\r\n```\r\n当然这不是最好的办法，我们在编程的过程中也会用到这种推敲的方法，层层推出最好的编码方式，我以前也喜欢直接给方案，后来发现大家写文档都是这么写，所以我也跟着学。\r\n所有的异常可以合在一起捕捉：\r\n```python\r\ntry:\r\n    # do something\r\nexcept (IOError,TypeError,NameError) as e:\r\n    # 处理上述的异常\r\n```\r\n我们在编程中，如果遇到我们显而易见的异常，我们需要手动忽略异常，咋整呢？看代码便知：\r\n```python\r\ntry:\r\n    # do something\r\nexcept IOError:\r\n    pass\r\n```\r\n使用Exception可以捕捉到与程序退出相关异常之外的所有异常，如下代码：\r\n```python\r\ntry:\r\n    #do something\r\nexcept Exception as e:\r\n    # 爆出异常\r\n```\r\n使用这种方式捕捉异常，会惹出很多麻烦，例如，这段代码还将会捕捉到键盘中断和程序推出的请求，而这些请求并不是你需要捕捉的对象。那到底怎样用呢？\r\ntry 也支持else 分支语句，它必须更在最后一个except子句的后面，如果try代码块中的代码没有发生异常，就会执行else字句中的代码。\r\n如：\r\n```python\r\ntry:\r\n    f= open(\'foo.txt\',\'r\')\r\nexcept IOError as e:\r\n    error_log.write(\'Unable to open foo.txt :%s\\n\' % e)\r\nelse:\r\n    data= f.read()\r\n    f.close()\r\n\r\n```','<h2 id=\"h2-u5F02u5E38\"><a name=\"异常\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>异常</h2><p>异常处理是编程语言的一种机制，用于处理软件或信息系统中的一场异常情况，即超出程序执行结果预期的问题。<br>在目前大部分的编程语言中，异常处理已经非常通用，异常处理分离了接受和处理错误的代码。这个功能清理了编程者的思绪，也使代码增强了可读性，方便了维护者阅读和理解。</p>\r\n<p>异常处理又称错误处理，它提供了处理程序运行时出现的任意意外或者异常情况的方法。在Python中使用try catch else finally 关键词来尝试可能未成功的操作、处理失败及正常的情况，以及在事后的清理操作。<br>举例看如何定义：</p>\r\n<pre><code class=\"lang-python\">try:\r\n    f=open(&#39;test.txt&#39;,&#39;r&#39;)\r\nexcept IOError as e:\r\n    print e\r\n</code></pre>\r\n<p>如果出现IOError异常，引发的错误将存储在对象e中，然后控制权被传递给except代码块中的代码。这里只捕捉到一个异常，当然对于打开这个文件来说，异常可能就是一个，这个在日常编程中需要认真对待每一种情况。<br>那有些错误不在一般的异常之列咋办呢？当然可以自己诱发一个异常。<br>用raise 来诱发，这里暂时不展开讲这个问题，因为我在开发时遇到过这个问题，需要用整篇文章来阐述它，这里忽略。<br> 通常来说，一但发生异常，就意味这不可挽回的错误，并且中断程序的正常运行。那么可以使用多个子语句来处理多个异常代码块，如下演示:    </p>\r\n<pre><code class=\"lang-python\">try:\r\n    # do something\r\nexcept IOError as e:\r\n    #处理出现的I/O错误\r\nexcept TypeError as e:\r\n    # 处理类型错误\r\nexcept NameError as e:\r\n    # 处理名称错误\r\n</code></pre>\r\n<p>当然这不是最好的办法，我们在编程的过程中也会用到这种推敲的方法，层层推出最好的编码方式，我以前也喜欢直接给方案，后来发现大家写文档都是这么写，所以我也跟着学。<br>所有的异常可以合在一起捕捉：</p>\r\n<pre><code class=\"lang-python\">try:\r\n    # do something\r\nexcept (IOError,TypeError,NameError) as e:\r\n    # 处理上述的异常\r\n</code></pre>\r\n<p>我们在编程中，如果遇到我们显而易见的异常，我们需要手动忽略异常，咋整呢？看代码便知：</p>\r\n<pre><code class=\"lang-python\">try:\r\n    # do something\r\nexcept IOError:\r\n    pass\r\n</code></pre>\r\n<p>使用Exception可以捕捉到与程序退出相关异常之外的所有异常，如下代码：</p>\r\n<pre><code class=\"lang-python\">try:\r\n    #do something\r\nexcept Exception as e:\r\n    # 爆出异常\r\n</code></pre>\r\n<p>使用这种方式捕捉异常，会惹出很多麻烦，例如，这段代码还将会捕捉到键盘中断和程序推出的请求，而这些请求并不是你需要捕捉的对象。那到底怎样用呢？<br>try 也支持else 分支语句，它必须更在最后一个except子句的后面，如果try代码块中的代码没有发生异常，就会执行else字句中的代码。<br>如：</p>\r\n<pre><code class=\"lang-python\">try:\r\n    f= open(&#39;foo.txt&#39;,&#39;r&#39;)\r\nexcept IOError as e:\r\n    error_log.write(&#39;Unable to open foo.txt :%s\\n&#39; % e)\r\nelse:\r\n    data= f.read()\r\n    f.close()\r\n</code></pre>\r\n','2970940'),(24,6,'学习Python 各个击破之 异常 第二部分','p9f367e49','finally 异常关键词','我们在第一部分中有提到过一个关键字-- finally,但我一直没有写，为啥？',1,2,20,'2019-11-09 05:55:58','2019-11-09 05:43:07','','我们在第一部分中有提到过一个关键字-- finally,但我一直没有写，为啥？','我们在第一部分中有提到过一个关键字-- finally,但我一直没有写，为啥？\r\n它为try 代码块中的代码定义结束操作，例如：\r\n```python\r\nf=open(\'foo.txt\',\'r\')\r\ntry:\r\n    # 做自己想做的事\r\nfinally:\r\n    f.close()\r\n    # 无论前面发生过什么，都会关闭文件\r\n```\r\nfinally 子句不是用于捕捉错误的，相反，它用于提供一些代码，无论是否出现错误，都必须执行该段代码。\r\n如果没有引发异常，finally字句中的代码将在try代码块中的代码执行完成之后立即执行。如果有异常，控制权先传递给finally自己的第一条语句。\r\n这段代码执行完成后，将重新引发异常然后交由另一个异常处理程序进行处理。','<p>我们在第一部分中有提到过一个关键字— finally,但我一直没有写，为啥？<br>它为try 代码块中的代码定义结束操作，例如：</p>\r\n<pre><code class=\"lang-python\">f=open(&#39;foo.txt&#39;,&#39;r&#39;)\r\ntry:\r\n    # 做自己想做的事\r\nfinally:\r\n    f.close()\r\n    # 无论前面发生过什么，都会关闭文件\r\n</code></pre>\r\n<p>finally 子句不是用于捕捉错误的，相反，它用于提供一些代码，无论是否出现错误，都必须执行该段代码。<br>如果没有引发异常，finally字句中的代码将在try代码块中的代码执行完成之后立即执行。如果有异常，控制权先传递给finally自己的第一条语句。<br>这段代码执行完成后，将重新引发异常然后交由另一个异常处理程序进行处理。</p>\r\n','2970940'),(25,6,'学习python 各个击破之 自定义异常','pd0f7a742','自定义异常,raise,python raise','学习总是那么困难，枯燥；当你看见别人的工资水平后，你发现是多么的失落',1,2,20,'2019-11-09 05:58:13','2019-11-09 05:43:07','<span style=\"white-space:normal;\">参考Python参考手册第830页</span><strong></strong>','python 用raise 来触发异常。那么你就可以自己鼓捣出自己的异常来，他用于你特定的功能，特定的程序。','python 用raise 来触发异常。那么你就可以自己鼓捣出自己的异常来，他用于你特定的功能，特定的程序。用户自定义异常通过类来编写，他继承内置的异常类“Exception”.基于类的异常允许脚本建立异常类型、继承行为以及附加状态信息。\r\n```python\r\nclass BadPreson(Exception):\r\n    pass\r\n```\r\n引发异常\r\n```python\r\ndef IsBad():\r\n    raise BadPreson()\r\n```\r\n原本我只想看书的，后来我发现得用笔记，如果哪天我更新的文章被我自己看到，这就是我当初利用星期天的时间写的笔记。\r\n正如--闲时不练功；忙时一场空哇\r\n\r\n\r\n由于工作太忙，或者理直气壮的说 工作没有头绪，导致没有及时更新笔记。','<p>python 用raise 来触发异常。那么你就可以自己鼓捣出自己的异常来，他用于你特定的功能，特定的程序。用户自定义异常通过类来编写，他继承内置的异常类“Exception”.基于类的异常允许脚本建立异常类型、继承行为以及附加状态信息。</p>\r\n<pre><code class=\"lang-python\">class BadPreson(Exception):\r\n    pass\r\n</code></pre>\r\n<p>引发异常</p>\r\n<pre><code class=\"lang-python\">def IsBad():\r\n    raise BadPreson()\r\n</code></pre>\r\n<p>原本我只想看书的，后来我发现得用笔记，如果哪天我更新的文章被我自己看到，这就是我当初利用星期天的时间写的笔记。<br>正如—闲时不练功；忙时一场空哇</p>\r\n<p>由于工作太忙，或者理直气壮的说 工作没有头绪，导致没有及时更新笔记。</p>\r\n','2970940'),(26,6,'Python 各个击破之 变量 第一部分','p862cb044','python 的变量作用域','文采有限，于是乎，我也不打算做太多的修饰，只记录代码和我原来编写的注释',1,2,20,'2019-11-09 06:00:06','2019-11-09 05:43:07','<p style=\"white-space:normal;\">\r\n	参考链接：\r\n</p>\r\n<p style=\"white-space:normal;\">\r\n	为了更好的发扬知识共享精神，把思路来源的地址也贴上，往后余生，都将会把有贡献的人的文章地址附上\r\n</p>\r\n<p style=\"white-space:normal;\">\r\n	<a href=\"http://www.cnblogs.com/summer-cool/p/3884595.html\" target=\"_blank\">http://www.cnblogs.com/summer-cool/p/3884595.html</a>\r\n</p>','python 的变量作用域','# 变量的作用于在函数体内放大到全局\r\n今天在写一个验证码刷新的东西，发现我原来的代码又一个bug，就是点击可以有效的更新redis数据，但是如果时整页刷新，就会实效，这时因为用的js实现的，后来我发现用Python 的一个特性更好的解决此事。\r\n废话不多说，直接上成品代码\r\n```python\r\nimport time\r\ntimestamp = \'\'\r\n\r\n\r\ndef create_captcha_fix(self):\r\n    \"\"\"\r\n    在函数体内 global 声明 后的timestamp 变成了全剧变量，可以修改 timestamp的值\r\n    从而达到第一次运行是pre_code 为空的效果，当被执行第一遍时 便可以赋值\r\n    在执行第二遍时就可以确认上一次的值时多少\r\n    :param self:\r\n    :return:\r\n    \"\"\"\r\n    global timestamp\r\n    result = int(round(time.time()*1000)) # 将时间戳转换为13位，默认的有小数点\r\n    pre_code = timestamp\r\n    timestamp = result\r\n    if pre_code is not None:\r\n        self.redis.delete(\"captcha:%s\" % pre_code)\r\n    text, img = captcha.create_captcha()\r\n    self.redis.setex(\"captcha:%s\" % result, text, 120)\r\n    return img\r\n```\r\n原有的js代码如下:\r\n```javascript\r\n var code = \'\';\r\n\r\n    function get_image_code() {\r\n        var d = new Date().getTime();\r\n        var pre_code = code;\r\n        code = d;\r\n        $(\".get_image_code\").attr(\"src\", \"/captcha/\" + pre_code + \"/\" + code);\r\n        $(\"#code\").attr(\"value\", code);\r\n    }\r\n\r\n    $(document).ready(function () {\r\n        get_image_code()\r\n    })\r\n```','<h1 id=\"h1-u53D8u91CFu7684u4F5Cu7528u4E8Eu5728u51FDu6570u4F53u5185u653Eu5927u5230u5168u5C40\"><a name=\"变量的作用于在函数体内放大到全局\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>变量的作用于在函数体内放大到全局</h1><p>今天在写一个验证码刷新的东西，发现我原来的代码又一个bug，就是点击可以有效的更新redis数据，但是如果时整页刷新，就会实效，这时因为用的js实现的，后来我发现用Python 的一个特性更好的解决此事。<br>废话不多说，直接上成品代码</p>\r\n<pre><code class=\"lang-python\">import time\r\ntimestamp = &#39;&#39;\r\n\r\n\r\ndef create_captcha_fix(self):\r\n    &quot;&quot;&quot;\r\n    在函数体内 global 声明 后的timestamp 变成了全剧变量，可以修改 timestamp的值\r\n    从而达到第一次运行是pre_code 为空的效果，当被执行第一遍时 便可以赋值\r\n    在执行第二遍时就可以确认上一次的值时多少\r\n    :param self:\r\n    :return:\r\n    &quot;&quot;&quot;\r\n    global timestamp\r\n    result = int(round(time.time()*1000)) # 将时间戳转换为13位，默认的有小数点\r\n    pre_code = timestamp\r\n    timestamp = result\r\n    if pre_code is not None:\r\n        self.redis.delete(&quot;captcha:%s&quot; % pre_code)\r\n    text, img = captcha.create_captcha()\r\n    self.redis.setex(&quot;captcha:%s&quot; % result, text, 120)\r\n    return img\r\n</code></pre>\r\n<p>原有的js代码如下:</p>\r\n<pre><code class=\"lang-javascript\"> var code = &#39;&#39;;\r\n\r\n    function get_image_code() {\r\n        var d = new Date().getTime();\r\n        var pre_code = code;\r\n        code = d;\r\n        $(&quot;.get_image_code&quot;).attr(&quot;src&quot;, &quot;/captcha/&quot; + pre_code + &quot;/&quot; + code);\r\n        $(&quot;#code&quot;).attr(&quot;value&quot;, code);\r\n    }\r\n\r\n    $(document).ready(function () {\r\n        get_image_code()\r\n    })\r\n</code></pre>\r\n','2970940'),(27,6,'最近看了TOO老师的录播课程，我发现我现在已经入门了','pa7d81a4b','《编程珠玑》,学习的本质','缘起是这样的，我学习Flask已经有很长时间了，然后纠结了好久自己终于写了一个像模像样的博客（当然，这只是自己练手的项目），其中除了学习实践以外，更多的是瞎蒙。',1,2,20,'2019-11-09 06:01:21','2019-11-09 05:43:07','','缘起是这样的，我学习Flask已经有很长时间了，然后纠结了好久自己终于写了一个像模像样的博客','缘起是这样的，我学习Flask已经有很长时间了，然后纠结了好久自己终于写了一个像模像样的博客（当然，这只是自己练手的项目），其中除了学习实践以外，更多的是瞎蒙。\r\n\r\n当然，我自己是不承认瞎蒙的，究竟是我一个字一个字的打出来的，代码粗糙倒是有可能。\r\n\r\n作为在编程的人来说，是需要时刻保证学习状态的，《编程珠玑》的作者也是这样说的，谁没写过糟糕的代码呢？然而这些都是靠学习来弥补的，一次一次的将自己的代码进化。\r\n\r\n我以前老实看不懂为什么有这么多配置，有的视频教程一个配置项就给你鼓捣出几堂课（通常都是几个小时），现在我懂了，为很么要这样。\r\n\r\n```python\r\n@avatar.setter\r\ndef avatar(self, image_data):\r\n    if 64 < len(image_data) < 1024 * 1024:\r\n        import imghdr\r\n        import os\r\n        ext = imghdr.what(\"\", h=image_data)\r\n        if ext in setting[\'image_type\'] and not self.is_xss_image(image_data):\r\n            if self._avatar and os.path.exists(setting[\'avatar_path\'] + self._avatar):\r\n                os.unlink(setting[\'avatar_path\'] + self._avatar)\r\n            file_path = str(setting[\'avatar_path\'] + self.uuid + \'.\' + ext)\r\n            with open(file_path, \'wb\') as f:\r\n                f.write(image_data)\r\n            self._avatar = self.uuid + \'.\' + ext\r\n        else:\r\n            raise validate.ValidateError(\"only is png jpeg jpg gif and bmp\")\r\n    else:\r\n        raise validate.ValidateError(\"容量必须在1M以下，64KB以上\")\r\n```\r\n\r\n例如这一段的setting[\'image_type],我前面是这样写的\r\n\r\n```python\r\nif ext in [\'png\', \'jpeg\', \'jpg\', \'gif\', \'bmp\'] and not self.is_xss_image(image_data):\r\n            if self._avatar and os.path.exists(setting[\'avatar_path\'] + self._avatar):\r\n                os.unlink(setting[\'avatar_path\'] + self._avatar)\r\n            file_path = str(setting[\'avatar_path\'] + self.uuid + \'.\' + ext)\r\n```\r\n\r\n假设阿，你的老板说，我还希望可以上传psd格式的文件，你是不是要改疯阿（编辑器里，各种上传图片的调用方法里）？如果在配置里改，你就发现这个还不错，只需要在配置文件里改一下，所有相关的东西全都该过来了。\r\n\r\n编程就跟学骑自行车一样，你不必要先搞清楚自行车每一个零件是怎样组装的，你只需要注意到你能不能骑上去，能跑。后来，你就会认识到，这个呀盘歪了会掉链条，飞轮坏了会踩空等。\r\n\r\n所以呢，我就是这样，一边自己瞎鼓捣，一边看人家的前人的经验，然后自己再总结归纳，后来，这些代码就变得很简练了。\r\n\r\n这里不是为了晒啥，只是写下来提醒自己，不要停止学习。附一段代码，自己写的\r\n\r\n```python\r\nclass SignUpHandler(BaseHandler):\r\n    def data_received(self, chunk):\r\n        pass\r\n\r\n    def get(self, *args, **kwargs):\r\n        kwargs = {\r\n            \"msg\": \"用户注册\",\r\n            \"form\": signup.SignUpForm()\r\n        }\r\n        self.render(\"passport/accounts/auth/SignUp.html\", **kwargs)\r\n\r\n    def post(self, *args, **kwargs):\r\n        data = self.json.loads(self.request.body)\r\n        form = signup.SignUpForm.from_json(data)\r\n        if form.validate():\r\n            result = auth_signup(self, data[\'name\'], data[\'password\'])\r\n            if result[\'status\'] is False:\r\n                return self.write({\"status\": False, \"message\": result[\'msg\'], \"url\": self.request.url})\r\n            else:\r\n                return self.write({\"status\": True, \"message\": result[\'msg\']})       \r\n        else:\r\n            for key in form.errors:\r\n                return self.write({\"status\": False, \"message\": str(form.errors[key])})\r\n```','<p>缘起是这样的，我学习Flask已经有很长时间了，然后纠结了好久自己终于写了一个像模像样的博客（当然，这只是自己练手的项目），其中除了学习实践以外，更多的是瞎蒙。</p>\r\n<p>当然，我自己是不承认瞎蒙的，究竟是我一个字一个字的打出来的，代码粗糙倒是有可能。</p>\r\n<p>作为在编程的人来说，是需要时刻保证学习状态的，《编程珠玑》的作者也是这样说的，谁没写过糟糕的代码呢？然而这些都是靠学习来弥补的，一次一次的将自己的代码进化。</p>\r\n<p>我以前老实看不懂为什么有这么多配置，有的视频教程一个配置项就给你鼓捣出几堂课（通常都是几个小时），现在我懂了，为很么要这样。</p>\r\n<pre><code class=\"lang-python\">@avatar.setter\r\ndef avatar(self, image_data):\r\n    if 64 &lt; len(image_data) &lt; 1024 * 1024:\r\n        import imghdr\r\n        import os\r\n        ext = imghdr.what(&quot;&quot;, h=image_data)\r\n        if ext in setting[&#39;image_type&#39;] and not self.is_xss_image(image_data):\r\n            if self._avatar and os.path.exists(setting[&#39;avatar_path&#39;] + self._avatar):\r\n                os.unlink(setting[&#39;avatar_path&#39;] + self._avatar)\r\n            file_path = str(setting[&#39;avatar_path&#39;] + self.uuid + &#39;.&#39; + ext)\r\n            with open(file_path, &#39;wb&#39;) as f:\r\n                f.write(image_data)\r\n            self._avatar = self.uuid + &#39;.&#39; + ext\r\n        else:\r\n            raise validate.ValidateError(&quot;only is png jpeg jpg gif and bmp&quot;)\r\n    else:\r\n        raise validate.ValidateError(&quot;容量必须在1M以下，64KB以上&quot;)\r\n</code></pre>\r\n<p>例如这一段的setting[‘image_type],我前面是这样写的</p>\r\n<pre><code class=\"lang-python\">if ext in [&#39;png&#39;, &#39;jpeg&#39;, &#39;jpg&#39;, &#39;gif&#39;, &#39;bmp&#39;] and not self.is_xss_image(image_data):\r\n            if self._avatar and os.path.exists(setting[&#39;avatar_path&#39;] + self._avatar):\r\n                os.unlink(setting[&#39;avatar_path&#39;] + self._avatar)\r\n            file_path = str(setting[&#39;avatar_path&#39;] + self.uuid + &#39;.&#39; + ext)\r\n</code></pre>\r\n<p>假设阿，你的老板说，我还希望可以上传psd格式的文件，你是不是要改疯阿（编辑器里，各种上传图片的调用方法里）？如果在配置里改，你就发现这个还不错，只需要在配置文件里改一下，所有相关的东西全都该过来了。</p>\r\n<p>编程就跟学骑自行车一样，你不必要先搞清楚自行车每一个零件是怎样组装的，你只需要注意到你能不能骑上去，能跑。后来，你就会认识到，这个呀盘歪了会掉链条，飞轮坏了会踩空等。</p>\r\n<p>所以呢，我就是这样，一边自己瞎鼓捣，一边看人家的前人的经验，然后自己再总结归纳，后来，这些代码就变得很简练了。</p>\r\n<p>这里不是为了晒啥，只是写下来提醒自己，不要停止学习。附一段代码，自己写的</p>\r\n<pre><code class=\"lang-python\">class SignUpHandler(BaseHandler):\r\n    def data_received(self, chunk):\r\n        pass\r\n\r\n    def get(self, *args, **kwargs):\r\n        kwargs = {\r\n            &quot;msg&quot;: &quot;用户注册&quot;,\r\n            &quot;form&quot;: signup.SignUpForm()\r\n        }\r\n        self.render(&quot;passport/accounts/auth/SignUp.html&quot;, **kwargs)\r\n\r\n    def post(self, *args, **kwargs):\r\n        data = self.json.loads(self.request.body)\r\n        form = signup.SignUpForm.from_json(data)\r\n        if form.validate():\r\n            result = auth_signup(self, data[&#39;name&#39;], data[&#39;password&#39;])\r\n            if result[&#39;status&#39;] is False:\r\n                return self.write({&quot;status&quot;: False, &quot;message&quot;: result[&#39;msg&#39;], &quot;url&quot;: self.request.url})\r\n            else:\r\n                return self.write({&quot;status&quot;: True, &quot;message&quot;: result[&#39;msg&#39;]})       \r\n        else:\r\n            for key in form.errors:\r\n                return self.write({&quot;status&quot;: False, &quot;message&quot;: str(form.errors[key])})\r\n</code></pre>\r\n','2970940'),(28,6,'python中有三元运算符吗？','pf001aa48','python中有没有三元运算符','有时候解决问题时突发奇想，我在Php里可以使用三元运算符来做赋值操作，我在python里是否也有这种操作呢？ 我觉得吧，这个基础知识还是非常重要的，因为有时候就偏偏要用，你却不知道；再有就是遇到别人考你的时候，也会很尴尬。',1,2,20,'2019-11-09 06:02:46','2019-11-09 05:43:07','','python中有没有三元运算符','有时候解决问题时突发奇想，我在Php里可以使用三元运算符来做赋值操作，我在python里是否也有这种操作呢？\r\n我觉得吧，这个基础知识还是非常重要的，因为有时候就偏偏要用，你却不知道；再有就是遇到别人考你的时候，也会很尴尬。\r\n答案是有，早在python2.5就已经存在了。\r\n但是你需要记住语法阿，我们先来看一下php的三元运算符是怎么搞的\r\n\r\n***条件 ？ 成立时的值 ：不成立的值***\r\n举个例子就明白了哈\r\n```php\r\n/***给item赋值，条件是 $a和$b比较。如果a小于b，那么条件成立 返回 a小了 否则 返回 a大了***/\r\n$item = $a<$b ? \"a 小了\" : \"a大了\";\r\n```\r\n另外 php7还有更神滴操作，这里不写，只是记下知识锚点。\r\n\r\n那python的又是怎么个搞法呢？\r\n\r\n语法：\r\n```python\r\na if 条件 else b\r\n```\r\n解释：根据条件的布尔值来判断返回a 还是 b;如果为真，就返回a,为假就返回b\r\n\r\n举个例子：\r\n```python\r\n>>> \'true\' if True else \'false\'\r\n\'true\'\r\n>>> \'true\' if False else \'false\'\r\n\'false\'\r\n```\r\n懂了吧？\r\n别蒙逼了。\r\n\r\n说这么多，当然也有参考文档\r\n1. [Conditional expressions](https://docs.python.org/3/reference/expressions.html#conditional-expressions \"Conditional expressions\")\r\n2. [Conditional expressions](https://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator \"Conditional expressions\")\r\n\r\n本文参考gitBook上的一篇文章','<p>有时候解决问题时突发奇想，我在Php里可以使用三元运算符来做赋值操作，我在python里是否也有这种操作呢？<br>我觉得吧，这个基础知识还是非常重要的，因为有时候就偏偏要用，你却不知道；再有就是遇到别人考你的时候，也会很尴尬。<br>答案是有，早在python2.5就已经存在了。<br>但是你需要记住语法阿，我们先来看一下php的三元运算符是怎么搞的</p>\r\n<p><strong><em>条件 ？ 成立时的值 ：不成立的值</em></strong><br>举个例子就明白了哈</p>\r\n<pre><code class=\"lang-php\">/***给item赋值，条件是 $a和$b比较。如果a小于b，那么条件成立 返回 a小了 否则 返回 a大了***/\r\n$item = $a&lt;$b ? &quot;a 小了&quot; : &quot;a大了&quot;;\r\n</code></pre>\r\n<p>另外 php7还有更神滴操作，这里不写，只是记下知识锚点。</p>\r\n<p>那python的又是怎么个搞法呢？</p>\r\n<p>语法：</p>\r\n<pre><code class=\"lang-python\">a if 条件 else b\r\n</code></pre>\r\n<p>解释：根据条件的布尔值来判断返回a 还是 b;如果为真，就返回a,为假就返回b</p>\r\n<p>举个例子：</p>\r\n<pre><code class=\"lang-python\">&gt;&gt;&gt; &#39;true&#39; if True else &#39;false&#39;\r\n&#39;true&#39;\r\n&gt;&gt;&gt; &#39;true&#39; if False else &#39;false&#39;\r\n&#39;false&#39;\r\n</code></pre>\r\n<p>懂了吧？<br>别蒙逼了。</p>\r\n<p>说这么多，当然也有参考文档</p>\r\n<ol>\r\n<li><a href=\"https://docs.python.org/3/reference/expressions.html#conditional-expressions\" title=\"Conditional expressions\">Conditional expressions</a></li><li><a href=\"https://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator\" title=\"Conditional expressions\">Conditional expressions</a></li></ol>\r\n<p>本文参考gitBook上的一篇文章</p>\r\n','2970940'),(29,10,'什么是目标关键词？','p5845ba4a','什么是目标关键词','在写作中，SEO有点薄弱阿，后面把学到的知识都重温一遍写进来',1,2,20,'2019-11-09 06:11:21','2019-11-09 06:40:03','<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	目标关键词是什么意思\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	<a href=\"http://www.seo.cn/2_74_zh.html\" target=\"_blank\" style=\"box-sizing:border-box;background-color:transparent;color:#337AB7;text-decoration-line:none;\">http://www.seo.cn/2_74_zh.html</a> \r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	关键词词库\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	<a href=\"http://www.5118.com/\" target=\"_blank\" style=\"box-sizing:border-box;background-color:transparent;color:#337AB7;text-decoration-line:none;\">http://www.5118.com/</a> \r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	站长工具箱\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	<a href=\"http://s.tool.chinaz.com/baidu/words.aspx\" target=\"_blank\" style=\"box-sizing:border-box;background-color:transparent;color:#337AB7;text-decoration-line:none;\">http://s.tool.chinaz.com/baidu/words.aspx</a> \r\n</p>','目标关键词就是你理想中客户想通过你达到你想要的效果的关键词','### 什么是目标关键词？什么是目标关键词？\r\n浅显易懂的定义为，你想引入什么样的客户到你的网站，达到理想效果的关键词。什么较理想呢？就是促成询盘、电联、交易、购买意向的事件。\r\n\r\n1. 目标关键词指经过关键词分析工具确定下来的主打关键词\r\n2. 目标关键词一般指首页设置的关键词，由三到五个关键词组成\r\n3. 目标用户对观此有一定量的需求或者很感兴趣，在研究的产品或者服务以及技术\r\n\r\n### 如何找到目标关键词呢？\r\n一般来说，在自己的行业里充斥这各种关键词，你需要自己写一个关键词看板，然后与自己的同行进行比较，取出比较理想的目标关键词\r\n\r\n1. 在自己行业呆的久的哥们可以凭借自己的经验找到，例如从自己的产品出发\r\n2. 和自己同行的网站相比较\r\n3. 在白都搜索自己公司的产品，找到相关关键词，找对手，联想出目标关键词\r\n4. 专业的词库工具，通称为大数据，有技术背景的哥们可以自己写爬虫，到网上爬取关键词做分析\r\n','<h3 id=\"h3--\"><a name=\"什么是目标关键词？什么是目标关键词？\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么是目标关键词？什么是目标关键词？</h3><p>浅显易懂的定义为，你想引入什么样的客户到你的网站，达到理想效果的关键词。什么较理想呢？就是促成询盘、电联、交易、购买意向的事件。</p>\r\n<ol>\r\n<li>目标关键词指经过关键词分析工具确定下来的主打关键词</li><li>目标关键词一般指首页设置的关键词，由三到五个关键词组成</li><li>目标用户对观此有一定量的需求或者很感兴趣，在研究的产品或者服务以及技术</li></ol>\r\n<h3 id=\"h3--\"><a name=\"如何找到目标关键词呢？\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>如何找到目标关键词呢？</h3><p>一般来说，在自己的行业里充斥这各种关键词，你需要自己写一个关键词看板，然后与自己的同行进行比较，取出比较理想的目标关键词</p>\r\n<ol>\r\n<li>在自己行业呆的久的哥们可以凭借自己的经验找到，例如从自己的产品出发</li><li>和自己同行的网站相比较</li><li>在白都搜索自己公司的产品，找到相关关键词，找对手，联想出目标关键词</li><li>专业的词库工具，通称为大数据，有技术背景的哥们可以自己写爬虫，到网上爬取关键词做分析</li></ol>\r\n','2970940'),(30,10,'SEO思维决定我们如何做企业站？','pbbde9849','SEO思维，枢纽词，关键词，企业站优化','当我们能顺利的掌握SEO这个盖帘时，我们应该要考虑一下SEO到底是什么？',1,2,20,'2019-11-09 06:12:45','2019-11-09 06:39:45','<p style=\"white-space:normal;\">\r\n	本文参考于一个讲礼盒网站的SEO文章，深受启发。\r\n</p>\r\n<p style=\"white-space:normal;\">\r\n	本文原文参考于夫唯SEO论坛的一篇神作，由于当时没有记录地址，本文只提及出处。\r\n</p>','当我们能顺利的掌握SEO这个盖帘时，我们应该要考虑一下SEO到底是什么？','## 当我们能顺利的掌握SEO这个概念时，我们应该要考虑一下SEO到底是什么\r\n\r\n- 一、首先， 我们要知道，SEO是依托内容而建立的\r\n\r\n　　我们所有的内容都是围绕SEO关键词而写的，而内容是需要连贯形成完整的内容块的。要形成这样的内容块，我们就要引入一个新的概念，叫枢纽词。我们围绕枢纽词展开一系列的挖掘，然后写成文章内容，这样就形成了一个完整的知识体系，就是上面所说的内容块。\r\n- 二、其次，我们要知道，SEO的内容布局是根据目标人群来操作的\r\n\r\n　　我们知道了有这么一个东西以后，我们就可以通过枢纽词来锁定标人群，当我们要锁定目标人群的时候，我们就需要研究人群的集体人格，确定目标人群会搜索的枢纽词，我们通过枢纽词来布局网站。\r\n- 三、再次，权重分配是提高收录量和网页权重的重要手段\r\n\r\n　　我们需要注意网站布局关键词时要了解权利中心在何处，我们通过内容不够严肃的博客入手，将分析出来的枢纽词通过博客发布内容，然后从博客发布内容时一定要提到权利最高点--官方网站里的商品链接、文章链接、新闻链接、专题内容链接等。覆盖到官网的权重词时将转载链接（参考链接）放到文章底部。\r\n- 四、内容的转载重复加工是提高排名的关键\r\n\r\n　　我们的内容传播，从博客作为起点，开始往外部扩散，这个时候，我们就可以适当的找些外援，找人帮忙发布内容在其他站上。我们推广的文章会有几种渠道，第一个就是国内的媒体资源，我们在发布内容时一定要带上我们的社交账号（微信公众号），微博转载、个人博客转载、找资源付费转载；第二个就是国外的媒体资源，找到国外的能做这种业务的人，付费转载。\r\n这里有些人也称之为站群\r\n- 五、当获得好的排名后，是否需要落地成交呢？\r\n\r\n　　后端销售能力，我们把大量的人引入网站了，我们需要对产品进行销售，我们可以做一个在线沟通的工具，然后通过人工转入销售端，在自己人力资源有限的情况下，安排人值班把客户引入销售端。\r\n\r\n\r\n------------\r\n\r\n我们来看一下SEO的五个重要的能力\r\n1、挖掘产品的能力\r\n2、研究目标用户搜索枢纽词的能力\r\n3、文案组织能力\r\n4、后端销售的能力\r\n5、SEO技术\r\n\r\n前面两点不容易被理解，因为这是SEO技术的核心，会SEO的人对这两点一定是能力优秀的。但有SEO技术的人不一定会挖掘产品和研究目标用户。\r\n\r\n所以说，需要外包的地方就很容易被分析出来，需要SEO技术的地方 花钱雇人解决，需要挖产品，找目标人群是自己绞尽脑汁来解决。前两点也是决定SEO收入的重要因素。\r\n\r\n\r\n所以、SEO其实就是一个怎样挖掘出内容的能力，而不是技术。\r\n\r\n','<h2 id=\"h2--seo-seo-\"><a name=\"当我们能顺利的掌握SEO这个概念时，我们应该要考虑一下SEO到底是什么\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>当我们能顺利的掌握SEO这个概念时，我们应该要考虑一下SEO到底是什么</h2><ul>\r\n<li>一、首先， 我们要知道，SEO是依托内容而建立的</li></ul>\r\n<p>　　我们所有的内容都是围绕SEO关键词而写的，而内容是需要连贯形成完整的内容块的。要形成这样的内容块，我们就要引入一个新的概念，叫枢纽词。我们围绕枢纽词展开一系列的挖掘，然后写成文章内容，这样就形成了一个完整的知识体系，就是上面所说的内容块。</p>\r\n<ul>\r\n<li>二、其次，我们要知道，SEO的内容布局是根据目标人群来操作的</li></ul>\r\n<p>　　我们知道了有这么一个东西以后，我们就可以通过枢纽词来锁定标人群，当我们要锁定目标人群的时候，我们就需要研究人群的集体人格，确定目标人群会搜索的枢纽词，我们通过枢纽词来布局网站。</p>\r\n<ul>\r\n<li>三、再次，权重分配是提高收录量和网页权重的重要手段</li></ul>\r\n<p>　　我们需要注意网站布局关键词时要了解权利中心在何处，我们通过内容不够严肃的博客入手，将分析出来的枢纽词通过博客发布内容，然后从博客发布内容时一定要提到权利最高点—官方网站里的商品链接、文章链接、新闻链接、专题内容链接等。覆盖到官网的权重词时将转载链接（参考链接）放到文章底部。</p>\r\n<ul>\r\n<li>四、内容的转载重复加工是提高排名的关键</li></ul>\r\n<p>　　我们的内容传播，从博客作为起点，开始往外部扩散，这个时候，我们就可以适当的找些外援，找人帮忙发布内容在其他站上。我们推广的文章会有几种渠道，第一个就是国内的媒体资源，我们在发布内容时一定要带上我们的社交账号（微信公众号），微博转载、个人博客转载、找资源付费转载；第二个就是国外的媒体资源，找到国外的能做这种业务的人，付费转载。<br>这里有些人也称之为站群</p>\r\n<ul>\r\n<li>五、当获得好的排名后，是否需要落地成交呢？</li></ul>\r\n<p>　　后端销售能力，我们把大量的人引入网站了，我们需要对产品进行销售，我们可以做一个在线沟通的工具，然后通过人工转入销售端，在自己人力资源有限的情况下，安排人值班把客户引入销售端。</p>\r\n<hr>\r\n<p>我们来看一下SEO的五个重要的能力<br>1、挖掘产品的能力<br>2、研究目标用户搜索枢纽词的能力<br>3、文案组织能力<br>4、后端销售的能力<br>5、SEO技术</p>\r\n<p>前面两点不容易被理解，因为这是SEO技术的核心，会SEO的人对这两点一定是能力优秀的。但有SEO技术的人不一定会挖掘产品和研究目标用户。</p>\r\n<p>所以说，需要外包的地方就很容易被分析出来，需要SEO技术的地方 花钱雇人解决，需要挖产品，找目标人群是自己绞尽脑汁来解决。前两点也是决定SEO收入的重要因素。</p>\r\n<p>所以、SEO其实就是一个怎样挖掘出内容的能力，而不是技术。</p>\r\n','2970940'),(31,8,'极客与团队','p50bf1447','极客与团队，团队协作','我们从内心都希望于自己是天才，但是天才往往不在里希望的队列里',1,2,20,'2019-11-09 06:18:16','2019-11-09 06:28:10','<p>\r\n	本文摘抄自《<span style=\"color:#555555;font-family:Georgia, &quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">极客与团队》</span> \r\n</p>\r\n<p>\r\n	<span style=\"color:#555555;font-family:Georgia, &quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\"><br />\r\n</span> \r\n</p>','我们从内心都希望于自己是天才，但是天才往往不在里希望的队列里','### 我们从内心都希望于自己是天才，但是天才往往不在里希望的队列里\r\n从内心深处来讲我们都默默地希望自己是天才。极客的终极梦想就是得到一个激动人心的灵感，然后闭关数周甚至数月将它完美地实现出来，最后向全世界发布自己的作品，名动天下。同行们会折服于你的聪明才智，人们会排着队来买你的软从内心深处来讲我们都默默地希望自己是天才。极客的终极梦想就是得到一个激动人心的灵感，然后闭关数周甚至数月将它完美地实现出来，最后向全世界发布自己的作品，名动天下。同行们会折服于你的聪明才智，人们会排着队来买你的软件，名望和财富更是唾手可得。\r\n\r\n### 不好意思\r\n醒醒吧，你很可能不是什么天才。\r\n\r\n当然我们并无恶意，你肯定是一个很聪明的人，但是你知道这个世界有多少真正的天才吗？的确，你能写代码，拥有这种能力已经算是人群里的聪明人了，但问题在于即便你真的是天才也是不够的。天才也会犯错，好点子和高超的技术并不是软件成功的充分条件，你的职业生涯能否成功完全要看你能不能与人合作。','<h3 id=\"h3--\"><a name=\"我们从内心都希望于自己是天才，但是天才往往不在里希望的队列里\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>我们从内心都希望于自己是天才，但是天才往往不在里希望的队列里</h3><p>从内心深处来讲我们都默默地希望自己是天才。极客的终极梦想就是得到一个激动人心的灵感，然后闭关数周甚至数月将它完美地实现出来，最后向全世界发布自己的作品，名动天下。同行们会折服于你的聪明才智，人们会排着队来买你的软从内心深处来讲我们都默默地希望自己是天才。极客的终极梦想就是得到一个激动人心的灵感，然后闭关数周甚至数月将它完美地实现出来，最后向全世界发布自己的作品，名动天下。同行们会折服于你的聪明才智，人们会排着队来买你的软件，名望和财富更是唾手可得。</p>\r\n<h3 id=\"h3-u4E0Du597Du610Fu601D\"><a name=\"不好意思\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>不好意思</h3><p>醒醒吧，你很可能不是什么天才。</p>\r\n<p>当然我们并无恶意，你肯定是一个很聪明的人，但是你知道这个世界有多少真正的天才吗？的确，你能写代码，拥有这种能力已经算是人群里的聪明人了，但问题在于即便你真的是天才也是不够的。天才也会犯错，好点子和高超的技术并不是软件成功的充分条件，你的职业生涯能否成功完全要看你能不能与人合作。</p>\r\n','2970940'),(32,3,'键盘上的home end pageup pagedown 的妙用','pa9bc044d','键盘上的那几个组合键妙用','忽略的操作系统技能知识，希望用的到',1,2,20,'2019-11-09 06:52:16','2019-11-09 06:23:21','','忽略的操作系统技能知识，希望用的到','### 在构建日常的技能体系时，往往还忽略了一些底层的知识系统\r\n有时觉得这些东西太过简单，所以就不屑一顾，但是在日常工作中又无时无刻不在使用他，当看见别人的键盘快捷按的贼溜的时候，不时又在感慨，这都是什么神操作。\r\n那今天就介绍几个\r\n曾经看过一篇文章介绍win键的奇效，如win+e 可以打开我的电脑，win+r 可以快捷打开运行窗口，win+d 可以快捷回到桌面和工作界面。\r\n\r\n这次我又发现“新大陆了”，或许很多人一直都在使用，但我相信很多人都不知道这几个键的用途。\r\n\r\n当你打开一个word文档，需要选择一行或多行时，是不用鼠标点？这样点很快捷，但很容易费时间，难道你不这样认为吗？有时拉过了，选了更多的东西。又要重选。好吧，今天刚折腾一段html代码时，需要删除一整行，况且这行特别长，删错就显示错位，我尝试用shift+end ，神了，一下从行首选择到了行尾。不错，至少给我节省了5秒钟的时间。能多玩5秒钟不是？如果这种选择工作量特别繁多，你不认为这个功能很实用？\r\n\r\n总结一下：\r\nwin+e 打开我的电脑\r\nwin+r 打开运行框\r\nwin+d 往返于桌面和工作窗口\r\nshift+home  可以从行尾一直选择到行首\r\nshift+end 可以从行首一直选择到行尾\r\nshift+pageup ？自己试试吧\r\nshift+pagedown ？自己试试吧','<h3 id=\"h3--\"><a name=\"在构建日常的技能体系时，往往还忽略了一些底层的知识系统\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>在构建日常的技能体系时，往往还忽略了一些底层的知识系统</h3><p>有时觉得这些东西太过简单，所以就不屑一顾，但是在日常工作中又无时无刻不在使用他，当看见别人的键盘快捷按的贼溜的时候，不时又在感慨，这都是什么神操作。<br>那今天就介绍几个<br>曾经看过一篇文章介绍win键的奇效，如win+e 可以打开我的电脑，win+r 可以快捷打开运行窗口，win+d 可以快捷回到桌面和工作界面。</p>\r\n<p>这次我又发现“新大陆了”，或许很多人一直都在使用，但我相信很多人都不知道这几个键的用途。</p>\r\n<p>当你打开一个word文档，需要选择一行或多行时，是不用鼠标点？这样点很快捷，但很容易费时间，难道你不这样认为吗？有时拉过了，选了更多的东西。又要重选。好吧，今天刚折腾一段html代码时，需要删除一整行，况且这行特别长，删错就显示错位，我尝试用shift+end ，神了，一下从行首选择到了行尾。不错，至少给我节省了5秒钟的时间。能多玩5秒钟不是？如果这种选择工作量特别繁多，你不认为这个功能很实用？</p>\r\n<p>总结一下：<br>win+e 打开我的电脑<br>win+r 打开运行框<br>win+d 往返于桌面和工作窗口<br>shift+home  可以从行尾一直选择到行首<br>shift+end 可以从行首一直选择到行尾<br>shift+pageup ？自己试试吧<br>shift+pagedown ？自己试试吧</p>\r\n','2970940'),(33,7,'如果你不读书，行万里路也只是个邮差– 摘自逻辑思维','p03e3f34a','逻辑思维，得到APP,读书号召','行万里路的同时，还要认真读完万卷书',1,2,20,'2019-11-09 06:54:57','2019-11-09 06:23:21','<span style=\"color:#666666;font-family:sans-serif;font-size:14px;white-space:normal;background-color:#FFFFFF;\">本文摘自《罗缉思维》，转载请留下此脚。</span>','行万里路的同时，还要认真读完万卷书','.体胖还需勤跑步，人丑就该多读书。\r\n\r\n2.如果你不读书，行万里路也只是个邮差。\r\n\r\n3.阅读的女人最美。\r\n\r\n4.面对家中万卷藏书，几乎所有爱书人都受到过这样充满敌意的质疑：“这些书你都读过了吗？”\r\n\r\n答案一：“不。这些只不过是我下周要读的书。”\r\n\r\n答案二：“我一本都没读过。不然我留着它们干吗？”\r\n\r\n答案三：“您知道，我不读书，我写书。”\r\n\r\n——艾柯·卡里埃尔《别想摆脱书》\r\n\r\n5.读书为我们还原了生命那些值得崇拜的纷繁驳杂，由它们来对抗死神的傀儡。图书馆是墓地唯一的竞争对手。\r\n\r\n——夏尔·丹齐格《为什么读书》\r\n\r\n6.读书人的9大标准：\r\n\r\n（1）阅读时间不少于4小时/天；\r\n\r\n（2）阅读范围至少包括文学、哲学、科技、财经；\r\n\r\n（3）藏书500本以上；\r\n\r\n（4）书柜面积一面墙；\r\n\r\n（5）包里必备一本书；\r\n\r\n（6）随时能写3000字以上的随笔；\r\n\r\n（7）厕所、卧室、阳台等处有常读的图书；\r\n\r\n（8）一周至少有两天和朋友饮茶论书；\r\n\r\n（9）有自己钟爱的出版社。\r\n\r\n——这是哪位出的这么难的题？自动滚粗！\r\n\r\n7.你是不是买书如山倒，读书如抽丝？买的书越多，读的书越少，换句话说，靠买书来消减不读书带来的焦虑感？\r\n\r\n老老实实读几本书，说起来简单，做到又非易事。\r\n\r\n8.你逛图书馆，有一种无形的压力。那么多书，这一生最多读完其中一面墙就完蛋了。当然，不读书的人，也可以自信地说：原来那么多书都不用读！\r\n\r\n——博学如钱钟书，人家带他进图书馆，他就如此说。\r\n\r\n可你也没读几本书呀！\r\n\r\n9.当你说没时间读书时，不是你真的没有时间，而是读书不在你花时间的优先选项中，排在读书前面的可能是和朋友吃饭、上网、聊天等生活细节。\r\n\r\n读书能否在你的时间分配中争得一席之地，靠的仅仅是你自己的心意。\r\n\r\n——唐诺\r\n\r\n10.我希望中国的读书人，无论你读什么，早日养成自己的兴趣，一生内心有所依靠，日久产生沉稳的判断力。\r\n\r\n这么大的国家，这么多的人，这么复杂，环环相扣的历史，再也不用激情决定国家和个人的命运。\r\n\r\n——齐邦媛\r\n\r\n11.以看书为耻，以看书为险，这个时代幸好过去了。\r\n\r\n吹灭读书灯，一身都是月。\r\n\r\n——黄永玉\r\n\r\n12.学问真是自个儿钻，再好的老师手把手教没有用。\r\n\r\n——章诒和\r\n\r\n13.我的亲身经历告诉我，读书有两个作用：一是让我自以为非，一是让我有一间自己的房子，有内心生活。\r\n\r\n我读过的书不多，但是书改变了我的一生，书给我一个长期的立场。\r\n\r\n——陈丹青\r\n\r\n13.如果过了若干年，你半夜醒来发现自己已经好长时间没读书，而且没有任何负罪感的时候，你就必须知道，你已经堕落了。\r\n\r\n——陈平原','<p>.体胖还需勤跑步，人丑就该多读书。</p>\r\n<p>2.如果你不读书，行万里路也只是个邮差。</p>\r\n<p>3.阅读的女人最美。</p>\r\n<p>4.面对家中万卷藏书，几乎所有爱书人都受到过这样充满敌意的质疑：“这些书你都读过了吗？”</p>\r\n<p>答案一：“不。这些只不过是我下周要读的书。”</p>\r\n<p>答案二：“我一本都没读过。不然我留着它们干吗？”</p>\r\n<p>答案三：“您知道，我不读书，我写书。”</p>\r\n<p>——艾柯·卡里埃尔《别想摆脱书》</p>\r\n<p>5.读书为我们还原了生命那些值得崇拜的纷繁驳杂，由它们来对抗死神的傀儡。图书馆是墓地唯一的竞争对手。</p>\r\n<p>——夏尔·丹齐格《为什么读书》</p>\r\n<p>6.读书人的9大标准：</p>\r\n<p>（1）阅读时间不少于4小时/天；</p>\r\n<p>（2）阅读范围至少包括文学、哲学、科技、财经；</p>\r\n<p>（3）藏书500本以上；</p>\r\n<p>（4）书柜面积一面墙；</p>\r\n<p>（5）包里必备一本书；</p>\r\n<p>（6）随时能写3000字以上的随笔；</p>\r\n<p>（7）厕所、卧室、阳台等处有常读的图书；</p>\r\n<p>（8）一周至少有两天和朋友饮茶论书；</p>\r\n<p>（9）有自己钟爱的出版社。</p>\r\n<p>——这是哪位出的这么难的题？自动滚粗！</p>\r\n<p>7.你是不是买书如山倒，读书如抽丝？买的书越多，读的书越少，换句话说，靠买书来消减不读书带来的焦虑感？</p>\r\n<p>老老实实读几本书，说起来简单，做到又非易事。</p>\r\n<p>8.你逛图书馆，有一种无形的压力。那么多书，这一生最多读完其中一面墙就完蛋了。当然，不读书的人，也可以自信地说：原来那么多书都不用读！</p>\r\n<p>——博学如钱钟书，人家带他进图书馆，他就如此说。</p>\r\n<p>可你也没读几本书呀！</p>\r\n<p>9.当你说没时间读书时，不是你真的没有时间，而是读书不在你花时间的优先选项中，排在读书前面的可能是和朋友吃饭、上网、聊天等生活细节。</p>\r\n<p>读书能否在你的时间分配中争得一席之地，靠的仅仅是你自己的心意。</p>\r\n<p>——唐诺</p>\r\n<p>10.我希望中国的读书人，无论你读什么，早日养成自己的兴趣，一生内心有所依靠，日久产生沉稳的判断力。</p>\r\n<p>这么大的国家，这么多的人，这么复杂，环环相扣的历史，再也不用激情决定国家和个人的命运。</p>\r\n<p>——齐邦媛</p>\r\n<p>11.以看书为耻，以看书为险，这个时代幸好过去了。</p>\r\n<p>吹灭读书灯，一身都是月。</p>\r\n<p>——黄永玉</p>\r\n<p>12.学问真是自个儿钻，再好的老师手把手教没有用。</p>\r\n<p>——章诒和</p>\r\n<p>13.我的亲身经历告诉我，读书有两个作用：一是让我自以为非，一是让我有一间自己的房子，有内心生活。</p>\r\n<p>我读过的书不多，但是书改变了我的一生，书给我一个长期的立场。</p>\r\n<p>——陈丹青</p>\r\n<p>13.如果过了若干年，你半夜醒来发现自己已经好长时间没读书，而且没有任何负罪感的时候，你就必须知道，你已经堕落了。</p>\r\n<p>——陈平原</p>\r\n','2970940'),(34,3,'win2003server架设AD','pa7d6e747','老文章，以前在搞系统管理员时的文档','老文章，以前在搞系统管理员时的文档',1,2,20,'2019-11-09 06:58:38','2019-11-09 06:23:21','','老文章，以前在搞系统管理员时的文档','这个实验作了很多次了，但是很多还是忘记了，于是把以前的参考资料记录下来了。\r\n\r\n其实win2003server架设AD 也不是那么难，但是很多人都是照这部署文档作的，于是我将把这次的实验结果记录下来。\r\n\r\n附件下载连接：[文档附件](/static/uploads/images/20180503211930b4a62b7ae2db4bd08f5a6361a41c50fa.doc \"文档附件\")\r\n\r\n这是在百度文库上找到的，还是去年的东西了，不过部署貌似成功了的。','<p>这个实验作了很多次了，但是很多还是忘记了，于是把以前的参考资料记录下来了。</p>\r\n<p>其实win2003server架设AD 也不是那么难，但是很多人都是照这部署文档作的，于是我将把这次的实验结果记录下来。</p>\r\n<p>附件下载连接：<a href=\"/static/uploads/images/20180503211930b4a62b7ae2db4bd08f5a6361a41c50fa.doc\" title=\"文档附件\">文档附件</a></p>\r\n<p>这是在百度文库上找到的，还是去年的东西了，不过部署貌似成功了的。</p>\r\n','2970940'),(35,7,'对人生很有用处的话','pacdd7c44','人身格言，受用终生的话','人生就是一趟从不回头的修行旅程，你不需要后悔，但你需要认真对待即将发生的任何一件事情。',1,2,20,'2019-11-09 07:02:01','2019-11-09 06:23:21','','人生就是一趟从不回头的修行旅程，你不需要后悔，但你需要认真对待即将发生的任何一件事情。','### 人生就是一趟从不回头的修行旅程，你不需要后悔，但你需要认真对待即将发生的任何一件事情。\r\n对人生很有用的话，在哪里都不过时。我们不管什么时候总是会范什么样的毛病。但是我们却不能引起注意。\r\n\r\n下面的这些话，可以教育自己，教育家人，也可以教育孩子。这些话是摘抄自网络，原题为杜月笙先生的语录。\r\n\r\n1. 不要怕被别人利用，人家利用你说明你还有用。\r\n2. 吃是实功，赌是对冲，嫖是落空。\r\n3. 花一文钱要收到十文钱的效果，这才是花钱能手。\r\n4. 做事要做到刀切豆腐两面光。\r\n5. 英雄不怕出身低，关键要有一个好脑子。\r\n6. 做人有三碗面最难吃： 人面 场面 情面。\r\n7. 对人必须诚恳，即使有人欺瞒我于一时，我总能以诚字来感动他，使他心悦诚服。我的处世之道，尽在一个诚字，你们举一反三，方始可以谈交友。\r\n8. 杜先生还曾经对一个有文化的朋友说过：你原来是一条鲤鱼，修行了500年跳了龙门变成龙了，而我呢原来是条泥鳅，先修炼了1000年变成了鲤鱼 ；然后在 修炼500年才跳了龙门，倘若我们俩一起失败那你还是一条鲤鱼而我可就变成泥鳅拉 你说我做事情怎么能不谨慎呢？\r\n9. 头等人,有本事,没脾气; 二等人,有本事,有脾气; 末等人,没本事,大脾气。','<h3 id=\"h3--\"><a name=\"人生就是一趟从不回头的修行旅程，你不需要后悔，但你需要认真对待即将发生的任何一件事情。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>人生就是一趟从不回头的修行旅程，你不需要后悔，但你需要认真对待即将发生的任何一件事情。</h3><p>对人生很有用的话，在哪里都不过时。我们不管什么时候总是会范什么样的毛病。但是我们却不能引起注意。</p>\r\n<p>下面的这些话，可以教育自己，教育家人，也可以教育孩子。这些话是摘抄自网络，原题为杜月笙先生的语录。</p>\r\n<ol>\r\n<li>不要怕被别人利用，人家利用你说明你还有用。</li><li>吃是实功，赌是对冲，嫖是落空。</li><li>花一文钱要收到十文钱的效果，这才是花钱能手。</li><li>做事要做到刀切豆腐两面光。</li><li>英雄不怕出身低，关键要有一个好脑子。</li><li>做人有三碗面最难吃： 人面 场面 情面。</li><li>对人必须诚恳，即使有人欺瞒我于一时，我总能以诚字来感动他，使他心悦诚服。我的处世之道，尽在一个诚字，你们举一反三，方始可以谈交友。</li><li>杜先生还曾经对一个有文化的朋友说过：你原来是一条鲤鱼，修行了500年跳了龙门变成龙了，而我呢原来是条泥鳅，先修炼了1000年变成了鲤鱼 ；然后在 修炼500年才跳了龙门，倘若我们俩一起失败那你还是一条鲤鱼而我可就变成泥鳅拉 你说我做事情怎么能不谨慎呢？</li><li>头等人,有本事,没脾气; 二等人,有本事,有脾气; 末等人,没本事,大脾气。</li></ol>\r\n','2970940'),(36,3,'Outlook express 6.0 重复发件 收发都两份','p3193a14f','outlook express 重复发邮件','老文章，以前在搞系统管理员时的文档',1,2,20,'2019-11-09 07:03:54','2019-11-09 06:23:21','','老文章，以前在搞系统管理员时的文档','Outlook express 6.0 无缘无故 重复发件 奇怪出现收发都是2份的。  总是在寄信夹 怎么回事？\r\n\r\n\r\n现在有的公司还老是用outlook express 6.0 ,并且不愿意换，你说怎么回事？有那么多好用的更新版本不用，偏要使用这个破玩意！经常无缘无故重复发件，有的时候还收两份，郁闷不？唉！没办法，为了能适应大众，所以就研究了一下，网上大多给的答案不一。也无从判断那事对的哪是错的，到底能不能修好。\r\n\r\n这里总结几个错误：\r\n\r\nl 收信时出现 0x800c0133 提示是未知的错误。\r\n\r\n当您采用Microsoft Outlook Express软件在接收邮件时报出如下错误提示:”出现未知错误。 帐户: ’test’, 服务器: ’pop.test.com’, 协议: POP3, 端口: 110, 安全(SSL): 否, 错误号: 0x800C0133″时的原因及解决方案:\r\n由于Outlook Express存在着一个2G的问题，这个问题产生的原因就在于Outlook中单个文件夹超过2G或者接近2G的时候就会发生错误，主要表象在：\r\n1）、Mail收了下来，但是自己看不到；而服务器上面也没了。\r\n2）、只要是有附件的mail，都没法收，一收就报错。\r\n3）、里面的文件夹打不开，或者是打开了却什么mail都看不到，但是在资源管理器中看.dbx文件（比如说是“收件箱.dbx”）却占了很大的空间。\r\n4）、收到较大邮件，经过较长时间的等待，最后Outlook Express报错。在服务器上删除了较大的邮件后，小文件就可以收了，但遇到大文件后又不可以了当你使用OutLook Express时出现无法打开收件箱，无法查阅收件箱中内容等一系列问题（错误号：0x800C0133 ）。经过查询，发现之所以会出现以上问题都是由于收件箱等 .dbx文件超出了OutLook Express规定的2G的空间上限,还有一种情况是当你发送邮件之后,邮件不能成功进入已发送邮件文件夹,经过查看发现在邮件的存储目录中出现大于或接近2G的单个邮件存储文件存在，由于Outlook Express邮件存储文件最大支持2G，因此判断问题出在这里了。\r\n\r\n处理办法：在左边的收件夹右键新建一个文件夹。命名自己随意哦，自己记得就可以，然后关闭outlook express 点到 存放邮件箱的地方，常用这个的应该都已经改过路径，所以我就不列出邮箱路径了。怎么改邮箱路径？见相关问题。\r\n\r\n进入邮箱目录，把刚才新建的那个文件夹：这样表示的 ，如我的就是20130523.dbx \r\n\r\n我们把20130523.dbx 的名字换成 收件箱.dbx ；把把原来的 收件箱.dbx 换成20130523.dbx 完事了。重启Outlookexpress OK！ 注意，这里可能会有写问题，换文件名的时候名字重了不让，只需在后缀后面多加一个1，待会修改完了该回来就好了。\r\n\r\n \r\n\r\n举一反三：如果outlookespress 有这个通病，那么我就应该首先判断是否是邮箱满了的毛病，如 寄件备份 的dbx满了会导致一个莫名奇妙的警告，信是发出去了，但就是重复发送，怎么办？就是检查 “寄件备份.dbx” 是否达到 1.99G ，如果是，那就肯定没错了，只需按上面的方法依次类推就可处理。\r\n\r\n如果重复收信呢？也是这个毛病， 我们可以看看是不是”Pop3uidl.dbx ” 有问题？满了也会这样，重复收，一收就是两份，发也是两份。真实忍无可忍的事，为什么那些自认为懂电脑的OA人员还能接受？\r\n\r\n按照同样的思路，我们可以把这个dbx文件替换掉，当然这个文件可以删除的哦，只不过是删了会重复收取服务器里没有删除过的所有邮件。呵呵，提醒用户一下就可以了。\r\n\r\n \r\n\r\n这里不可能能把全部的问题都总结处理啊，所以大家能自己动脑筋是最好的了！','<p>Outlook express 6.0 无缘无故 重复发件 奇怪出现收发都是2份的。  总是在寄信夹 怎么回事？</p>\r\n<p>现在有的公司还老是用outlook express 6.0 ,并且不愿意换，你说怎么回事？有那么多好用的更新版本不用，偏要使用这个破玩意！经常无缘无故重复发件，有的时候还收两份，郁闷不？唉！没办法，为了能适应大众，所以就研究了一下，网上大多给的答案不一。也无从判断那事对的哪是错的，到底能不能修好。</p>\r\n<p>这里总结几个错误：</p>\r\n<p>l 收信时出现 0x800c0133 提示是未知的错误。</p>\r\n<p>当您采用Microsoft Outlook Express软件在接收邮件时报出如下错误提示:”出现未知错误。 帐户: ’test’, 服务器: ’pop.test.com’, 协议: POP3, 端口: 110, 安全(SSL): 否, 错误号: 0x800C0133″时的原因及解决方案:<br>由于Outlook Express存在着一个2G的问题，这个问题产生的原因就在于Outlook中单个文件夹超过2G或者接近2G的时候就会发生错误，主要表象在：<br>1）、Mail收了下来，但是自己看不到；而服务器上面也没了。<br>2）、只要是有附件的mail，都没法收，一收就报错。<br>3）、里面的文件夹打不开，或者是打开了却什么mail都看不到，但是在资源管理器中看.dbx文件（比如说是“收件箱.dbx”）却占了很大的空间。<br>4）、收到较大邮件，经过较长时间的等待，最后Outlook Express报错。在服务器上删除了较大的邮件后，小文件就可以收了，但遇到大文件后又不可以了当你使用OutLook Express时出现无法打开收件箱，无法查阅收件箱中内容等一系列问题（错误号：0x800C0133 ）。经过查询，发现之所以会出现以上问题都是由于收件箱等 .dbx文件超出了OutLook Express规定的2G的空间上限,还有一种情况是当你发送邮件之后,邮件不能成功进入已发送邮件文件夹,经过查看发现在邮件的存储目录中出现大于或接近2G的单个邮件存储文件存在，由于Outlook Express邮件存储文件最大支持2G，因此判断问题出在这里了。</p>\r\n<p>处理办法：在左边的收件夹右键新建一个文件夹。命名自己随意哦，自己记得就可以，然后关闭outlook express 点到 存放邮件箱的地方，常用这个的应该都已经改过路径，所以我就不列出邮箱路径了。怎么改邮箱路径？见相关问题。</p>\r\n<p>进入邮箱目录，把刚才新建的那个文件夹：这样表示的 ，如我的就是20130523.dbx </p>\r\n<p>我们把20130523.dbx 的名字换成 收件箱.dbx ；把把原来的 收件箱.dbx 换成20130523.dbx 完事了。重启Outlookexpress OK！ 注意，这里可能会有写问题，换文件名的时候名字重了不让，只需在后缀后面多加一个1，待会修改完了该回来就好了。</p>\r\n<p>举一反三：如果outlookespress 有这个通病，那么我就应该首先判断是否是邮箱满了的毛病，如 寄件备份 的dbx满了会导致一个莫名奇妙的警告，信是发出去了，但就是重复发送，怎么办？就是检查 “寄件备份.dbx” 是否达到 1.99G ，如果是，那就肯定没错了，只需按上面的方法依次类推就可处理。</p>\r\n<p>如果重复收信呢？也是这个毛病， 我们可以看看是不是”Pop3uidl.dbx ” 有问题？满了也会这样，重复收，一收就是两份，发也是两份。真实忍无可忍的事，为什么那些自认为懂电脑的OA人员还能接受？</p>\r\n<p>按照同样的思路，我们可以把这个dbx文件替换掉，当然这个文件可以删除的哦，只不过是删了会重复收取服务器里没有删除过的所有邮件。呵呵，提醒用户一下就可以了。</p>\r\n<p>这里不可能能把全部的问题都总结处理啊，所以大家能自己动脑筋是最好的了！</p>\r\n','2970940'),(37,8,'骑摩托车的故事','pc0ce9447','骑摩托车，哲理，生活中与道理的互通','老文章，以前的所思所想，希望也是人生成长的一部分',1,2,20,'2019-11-09 07:07:49','2019-11-09 07:08:52','','老文章，以前的所思所想，希望也是人生成长的一部分','### 老文章，重新整理一下排版\r\n		很小的时候我们都在骑自行车的时候，看见隔壁的帅富们打了几年工回来买一摩托车，在路上一瞪一瞪的跑的时候，发现这个玩意好玩的不得了，好久都没来得及试上一把。\r\n\r\n		那是我毕业后的5年后，一次机会起了一下。的确哦，我学摩托车的时间很短，技术也不怎么地。\r\n\r\n		看似简单的摩托车有很多窍门，如果不懂，就发现他不太听你使唤，如夹着油门捏离合器等，不松上油门就挂挡，结果就是很惨的。\r\n\r\n		我偶尔一次带着我妈出门，发现了一个现象，这个车，当你解决了所有的技术因素以后，发现他在某一个零界点上，不干活，没有动力。如果这个时候还不换挡位，结果就麻烦了，直接抱缸了，不干活，熄火了。其原因我非技术人员，不得而知，但去蕴含了一定的道理。人也如此，人生就像一辆摩托车在爬一个永无止境的坡，其中也有起伏，也有美丽的风景。当你略有小成的时候，可能是遇到了一个小小的下坡路。让你的人生摩托车松一口气，如果这是个直路，接下去可能来的一个大坡，你可能很警觉的在上坡之前就开始换挡加油，这样就又上去一个了。\r\n\r\n		还有一个情况，在上坡上的转弯处，这可能就是人生摩托车的转折点，他有很多不确定因素，如你上坡的同时，有一台很大的客车或货车，与你相向而行，这次，你可能会容易出现了半坡熄火了。这也称为抱缸，是摩托车不干活了。人生往往如此，一个上坡就是外接给我们的压力，一个下坡就是外接给我们的助力，在上坡上还有转弯，这是我们人生摩托车的转折点。\r\n\r\n		当所有的压力超过我们的摩托车马力的情况下，会是什么结果呢？那就是在上坡的同时，突然没有了爬坡动力，停止不前，抱缸导致。在驾驶人生的摩托车的时候，我们需要注意，在适当的时候要减速行驶，加大油门，这样我们容易看到爬坡很吃力，但不会熄火。\r\n\r\n我走的很慢，但我不会后退。','<h3 id=\"h3--\"><a name=\"老文章，重新整理一下排版\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>老文章，重新整理一下排版</h3><pre><code>    很小的时候我们都在骑自行车的时候，看见隔壁的帅富们打了几年工回来买一摩托车，在路上一瞪一瞪的跑的时候，发现这个玩意好玩的不得了，好久都没来得及试上一把。\r\n\r\n    那是我毕业后的5年后，一次机会起了一下。的确哦，我学摩托车的时间很短，技术也不怎么地。\r\n\r\n    看似简单的摩托车有很多窍门，如果不懂，就发现他不太听你使唤，如夹着油门捏离合器等，不松上油门就挂挡，结果就是很惨的。\r\n\r\n    我偶尔一次带着我妈出门，发现了一个现象，这个车，当你解决了所有的技术因素以后，发现他在某一个零界点上，不干活，没有动力。如果这个时候还不换挡位，结果就麻烦了，直接抱缸了，不干活，熄火了。其原因我非技术人员，不得而知，但去蕴含了一定的道理。人也如此，人生就像一辆摩托车在爬一个永无止境的坡，其中也有起伏，也有美丽的风景。当你略有小成的时候，可能是遇到了一个小小的下坡路。让你的人生摩托车松一口气，如果这是个直路，接下去可能来的一个大坡，你可能很警觉的在上坡之前就开始换挡加油，这样就又上去一个了。\r\n\r\n    还有一个情况，在上坡上的转弯处，这可能就是人生摩托车的转折点，他有很多不确定因素，如你上坡的同时，有一台很大的客车或货车，与你相向而行，这次，你可能会容易出现了半坡熄火了。这也称为抱缸，是摩托车不干活了。人生往往如此，一个上坡就是外接给我们的压力，一个下坡就是外接给我们的助力，在上坡上还有转弯，这是我们人生摩托车的转折点。\r\n\r\n    当所有的压力超过我们的摩托车马力的情况下，会是什么结果呢？那就是在上坡的同时，突然没有了爬坡动力，停止不前，抱缸导致。在驾驶人生的摩托车的时候，我们需要注意，在适当的时候要减速行驶，加大油门，这样我们容易看到爬坡很吃力，但不会熄火。\r\n</code></pre><p>我走的很慢，但我不会后退。</p>\r\n','2970940'),(38,11,'写作是一件很难坚持的事，想坚持又无法静心','p8612f24a','写作技巧,写作的目的','你静心吗？我不静，简直就是树欲静而风不止！',1,2,20,'2019-11-10 03:48:57','2019-11-10 03:45:15','','你静心吗？我不静，简直就是树欲静而风不止！','曾经不止一次想静下心来写作，但是总是不能如愿以偿，即使开始写了，后来总是会有各种理由，迟迟不肯下笔。\r\n\r\n今天，是我下定决心写作的其中一次，但我真的不知道我能坚持多久，拭目以待吧。\r\n\r\n 之所以下定决心学写作，是因为最近老是出状况，言语笨拙，不知所措，心许应该将自己平时所见所地得写下来，锻炼自己的心智。\r\n\r\n 还有一个原因就是视线太窄，心智带宽不够，导致遇到状况无法极速反应，总干一些不太得体的事情。可能是最近写程序，带产品团队带傻了（按常理说，写程序，带团队，搞产品不应该变傻的），前几年的人生觉悟又闭塞了。\r\n\r\n其实在我手机便签本里记录了平时的所听所闻所想，但不知何时，变成了摆设，有时和人讨论所见所得，但总是说不清楚，道不明白，反而加深了对知识的恐惧（也有可能有些观点类不能和人讨论，反倒觉得是自己孤漏寡闻了）。\r\n\r\n所以，从今天开始，每隔几天写一篇短文，重新整理知识，变成自己的知识很重要，能和合适的人讨论合适的知识很重要。\r\n\r\n写作时，注重文体结构，不光让自己懂，还要能在写作时有所领悟；不光让自己看懂，还要让又机会看到的人也有所帮助。不能搞想到哪里写道哪里，文章主题含糊不清。\r\n\r\n同时，还要注意包装，写作时还要对自己有阶段性的提高。','<p>曾经不止一次想静下心来写作，但是总是不能如愿以偿，即使开始写了，后来总是会有各种理由，迟迟不肯下笔。</p>\r\n<p>今天，是我下定决心写作的其中一次，但我真的不知道我能坚持多久，拭目以待吧。</p>\r\n<p> 之所以下定决心学写作，是因为最近老是出状况，言语笨拙，不知所措，心许应该将自己平时所见所地得写下来，锻炼自己的心智。</p>\r\n<p> 还有一个原因就是视线太窄，心智带宽不够，导致遇到状况无法极速反应，总干一些不太得体的事情。可能是最近写程序，带产品团队带傻了（按常理说，写程序，带团队，搞产品不应该变傻的），前几年的人生觉悟又闭塞了。</p>\r\n<p>其实在我手机便签本里记录了平时的所听所闻所想，但不知何时，变成了摆设，有时和人讨论所见所得，但总是说不清楚，道不明白，反而加深了对知识的恐惧（也有可能有些观点类不能和人讨论，反倒觉得是自己孤漏寡闻了）。</p>\r\n<p>所以，从今天开始，每隔几天写一篇短文，重新整理知识，变成自己的知识很重要，能和合适的人讨论合适的知识很重要。</p>\r\n<p>写作时，注重文体结构，不光让自己懂，还要能在写作时有所领悟；不光让自己看懂，还要让又机会看到的人也有所帮助。不能搞想到哪里写道哪里，文章主题含糊不清。</p>\r\n<p>同时，还要注意包装，写作时还要对自己有阶段性的提高。</p>\r\n','2970940'),(39,11,'当你心烦意乱的时候，该如何让自己平静下来呢？','pf890f44f','写作，自我，自我约束和成长','不要把写作看成时负担，他会在你的想象中变得沉重无比，也不要把他看成无比轻松的存在，希望我自己能把自己的坚持坚持到底。',1,2,20,'2019-11-10 03:54:46','2019-11-10 03:55:58','','心烦意乱，原来还有这出？','你能想象这篇文章是在看《算法图解》的过程中写的吗？并且结构并不完整。\r\n\r\n你可能还遇到这样一种情况，打开world软件，写案子，编程序，写着写着，又搞其他的事去了。看手机？打开电脑浏览器（百度首页下面让你入迷的翻上3个小时也不觉得翻完了）？逛淘宝？整理桌面？把收集屏幕上的小红点一一去除？更或许刷抖音连续五小时？\r\n\r\n大脑的思维总是顾左右而想其他，根本不让你好好干活，总之就是不让你和工作一个频道。\r\n\r\n大脑天生就是让你不聚精会神，让你的工作陷入困境，但你还想拼命的完成工作，让你在愉快的度过最美好的时光，却不让你作一点有意义的事情。\r\n\r\n这是大脑本身的构造所致的，大脑分为两种工作模式：发散模式，专注模式。而工作需要进入专注模式才能有效的利用时间，创造成果。要进入专注模式就得县放松殿，有时候太勤奋也是一种病（你认为你是一个勤奋的人吗？）\r\n\r\n至于证据，请参考《学习之道》这本书，这里不为其展开讨论。\r\n\r\n肯定有专注模式的方法。\r\n\r\n书中介绍，要进入专注模式，先要放松，让大脑处于高度休闲状态。然后关掉你的world，拿上笔和纸，找到一个安金的，光线充足的，噪音污染更少的，能够翻越参考数据的地方，开始动笔。缺少素材再去赵参考书籍，完成你的工作。\r\n\r\n说白了就是为自己创造一个仪式，让自己能有机会进入专注模式。\r\n\r\n好记性不如兰笔头；好像法不如掳起袖子动起来。\r\n\r\n承认自己的弱点，比什么都重要，善待自己的不认真模式。\r\n\r\n\r\n===============\r\n本文在早期创作，毫无章法，但却深刻反映了一个真实的自我，你不觉得有时候自己真的很乱吗？其实这只是你意识到自己的不足而已，如果已经意识到，那么就有了方法可以解决它了。你应该知道如何让自己改变，并且比改变他人更容易。\r\n','<p>你能想象这篇文章是在看《算法图解》的过程中写的吗？并且结构并不完整。</p>\r\n<p>你可能还遇到这样一种情况，打开world软件，写案子，编程序，写着写着，又搞其他的事去了。看手机？打开电脑浏览器（百度首页下面让你入迷的翻上3个小时也不觉得翻完了）？逛淘宝？整理桌面？把收集屏幕上的小红点一一去除？更或许刷抖音连续五小时？</p>\r\n<p>大脑的思维总是顾左右而想其他，根本不让你好好干活，总之就是不让你和工作一个频道。</p>\r\n<p>大脑天生就是让你不聚精会神，让你的工作陷入困境，但你还想拼命的完成工作，让你在愉快的度过最美好的时光，却不让你作一点有意义的事情。</p>\r\n<p>这是大脑本身的构造所致的，大脑分为两种工作模式：发散模式，专注模式。而工作需要进入专注模式才能有效的利用时间，创造成果。要进入专注模式就得县放松殿，有时候太勤奋也是一种病（你认为你是一个勤奋的人吗？）</p>\r\n<p>至于证据，请参考《学习之道》这本书，这里不为其展开讨论。</p>\r\n<p>肯定有专注模式的方法。</p>\r\n<p>书中介绍，要进入专注模式，先要放松，让大脑处于高度休闲状态。然后关掉你的world，拿上笔和纸，找到一个安金的，光线充足的，噪音污染更少的，能够翻越参考数据的地方，开始动笔。缺少素材再去赵参考书籍，完成你的工作。</p>\r\n<p>说白了就是为自己创造一个仪式，让自己能有机会进入专注模式。</p>\r\n<p>好记性不如兰笔头；好像法不如掳起袖子动起来。</p>\r\n<p>承认自己的弱点，比什么都重要，善待自己的不认真模式。</p>\r\n<p>===============<br>本文在早期创作，毫无章法，但却深刻反映了一个真实的自我，你不觉得有时候自己真的很乱吗？其实这只是你意识到自己的不足而已，如果已经意识到，那么就有了方法可以解决它了。你应该知道如何让自己改变，并且比改变他人更容易。</p>\r\n','2970940'),(40,11,'14年的老文章拾遗，传销的理解','pd9faa544','传销是什么？,传销是一门销售的艺术','我被弄去搞传销了，你呢？',1,2,20,'2019-11-11 14:42:23','2019-11-11 14:30:59','','我被弄去搞传销了，你呢？','### 前提：我本身认为传销是一门销售的艺术，但是我不认同他的做事方式。\r\n今天，又是周日，屡次看罗胖子的节目，每次都会对知识体系进行一次重置，我现在已经彻底成为了一个可以转系统的人了。    			我的系统可以格式化，可以随时携带。但是，为啥我有这个能力，而其他人就没有呢？原因很简单，我思维是有一定的创业机制的大脑思维，和某些称之为聪明大脑相比，我更加愚蠢，因为我的思维可以被格式化。\r\n		我可以这么理解，思维是除了泡妞秘籍以外的另外一部奇书。\r\n		话说为什么我们的老祖宗的思维里，对战争的胜利的的节点判断是某个领导人的智力水平及境界高低呢？ 一个最合适的理解，就是大家都不愿意承担风险和责任。往往权利集中的体制里，得出的潜在逻辑就是每个单体只对自己负责，而忽略了每个单体对集体的贡献。\r\n我们可能在某个公司你上班，经常会发现不同的部门之间有摩擦，原因也很简单，即是高度集中的权利体系里，每个单体之间是独立的，是只对自己的功劳负责的，不会考虑到可持续发展的，是不管其他部门死活的。\r\n这也可以理解，此言怎讲？这是我们每个人从意识熏陶出来的。因为我们的最上一级把我们的责任与荣誉收缴了。\r\n我们不必要对最终的胜利目标担心，我们不必要担心万一最高领导人意外死亡后我们该怎么走（但是一但出现此中情况，也就是队伍慌张的时候），我们不需要对自己的行为负责，只对绝对的领导负责，这就是我理解的层层封建制度。所以出现了战争里的“擒贼先擒王”。\r\n\r\n只要把王搞定了，剩下的那帮人，只能溃散。自己的领导一但没了，就出现群龙无首，找不着北。说白了就是组织已经崩溃，无法再组织。\r\n\r\n那么我们就得知，其实所有的战争和集团体系，说白了都是一种组织形式，如果组织形式拥有不溃散法则，就会使这个集团的灵魂不散（为啥拥有灵魂的团，就是打不死呢？因为每个人都是可以站出来再组织），讨论起组织形式，我也不敢造次，古代人都给我们给弄出来了，我们也不必要再去搞什么组织创新，再多无非也就是，君王制，民主制，所谓的社会主义制（社会主义制其实是一种利用团体制度来专政，它是封建党制的一个后代）。那么这几个制度在国家形式上都有强国，在社会团体中也有这几种形式的存在，现在好多的公司都会用类君主制度来管理公司。当然 现在的公司制度也有其他的体制。\r\n\r\n		先说君主制，王 任命将军去发动/迎接战争，将军 派中层将领去发动/迎接战争，中层派跟低一点的人去发动迎接战争，最后分解到每个人。每个人之间是没有必然联系的，而从可以当官的人开始，就会出现有关系，那么这种关系是什么样的呢?底层将领，只对自己高一级的将领负责，这样一级一级的向上推演，那么将军只对王负责。而战士只对上一级负责，管他什么狗屁君王呢！\r\n\r\n再说民主制，首先是一般人公选一个人来做所有的人的头，然后带着荣誉去发动/迎接战争，因为是公选的人何每个人的利益层是一样的。所以会出现所有人都会对自己的选择付出代价，如果选错了，个人将承受带来的灾痛。但是如果不是死亡，那么又会有一个新的头（野蛮的民主制度，看起来是非常残忍的，比君主制度更加残忍）。\r\n\r\n讨论党政，这里出自于与时政相关，也没有资格讨论，所以只是粗略讨论以下，古代党政何现代党政有一个完全不用花的特征，那就是有一套完整的思想统辖这内部。古代的党政制度也是属于下辖在君主制度下的一个拉帮。他们不同队列当中的人相互斗争，现代党政不一样，维持这一致性特征。\r\n\r\n \r\n\r\n说了半天，这与传销有半毛钱钱关系？\r\n\r\n好！这就娓娓道来。\r\n\r\n传销是一个金字塔形状的权利体系，它用浅显（受到古往今来的人的影响，经济学的人别喷我）的钱来凝结成型。那——为什么可以呢？\r\n\r\n它是一个数学模型，单凭数学模型而累积的权利体系是无法生存的，它一定给数学模型赋予了一项重要的意义，那就是利益，利益在陌生人和熟人之间最简单粗暴的表达形式就是用钱来解决。正因为是专业言，才导致了一个很坚固的体系。\r\n\r\n假设不受控制（即有关部门不再打压），会出现什么呢？很简单么，就是谁出的钱多，单体倒向谁。如果一个头目无故意外，会怎样呢？也很简单，就是在瞬时间再出来一个头目，如果有人不服，将会分裂成两个金字塔，为什么是两个，答案很简单呀，这个数学模型就是以2为基础的，所以它将会分裂成2戈金字塔。很多人没有弄明白为什么，姑且用道德观念来压制，我也不是说不行哦。\r\n\r\n打不散是因为有利益，会分裂是因为有利益分歧。\r\n\r\n那么利益就成了所有集体的凝结因素了。传销模型，能基本上解决集体的可延续发展，是比较明确的了。这就是有关部门为什么非常害怕了，如果这帮人以传销的形式来搞政治，那就麻烦了，天下大乱？\r\n\r\n传销其实就是野蛮民主制度的原型。\r\n\r\n它存在，就有意义，我们为什么不接受它呢？用明智的大脑让其野蛮因素去除，往文明方向发展呢？ 在这里我申明一下，不要认为我在为现在的传销团体辩护。本文观点在于正确面对传销的组织形式，而不是讨论传销。\r\n\r\n在此，对我说的话再次否定，你们可前往别当真啊。我抓起来了你们谁负责？\r\n\r\n题外话，之所以你们不会当真，是因为你们不必为此负责，当然也会有查水表的人刻意表达看法。','<h3 id=\"h3--\"><a name=\"前提：我本身认为传销是一门销售的艺术，但是我不认同他的做事方式。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>前提：我本身认为传销是一门销售的艺术，但是我不认同他的做事方式。</h3><p>今天，又是周日，屡次看罗胖子的节目，每次都会对知识体系进行一次重置，我现在已经彻底成为了一个可以转系统的人了。                我的系统可以格式化，可以随时携带。但是，为啥我有这个能力，而其他人就没有呢？原因很简单，我思维是有一定的创业机制的大脑思维，和某些称之为聪明大脑相比，我更加愚蠢，因为我的思维可以被格式化。<br>        我可以这么理解，思维是除了泡妞秘籍以外的另外一部奇书。<br>        话说为什么我们的老祖宗的思维里，对战争的胜利的的节点判断是某个领导人的智力水平及境界高低呢？ 一个最合适的理解，就是大家都不愿意承担风险和责任。往往权利集中的体制里，得出的潜在逻辑就是每个单体只对自己负责，而忽略了每个单体对集体的贡献。<br>我们可能在某个公司你上班，经常会发现不同的部门之间有摩擦，原因也很简单，即是高度集中的权利体系里，每个单体之间是独立的，是只对自己的功劳负责的，不会考虑到可持续发展的，是不管其他部门死活的。<br>这也可以理解，此言怎讲？这是我们每个人从意识熏陶出来的。因为我们的最上一级把我们的责任与荣誉收缴了。<br>我们不必要对最终的胜利目标担心，我们不必要担心万一最高领导人意外死亡后我们该怎么走（但是一但出现此中情况，也就是队伍慌张的时候），我们不需要对自己的行为负责，只对绝对的领导负责，这就是我理解的层层封建制度。所以出现了战争里的“擒贼先擒王”。</p>\r\n<p>只要把王搞定了，剩下的那帮人，只能溃散。自己的领导一但没了，就出现群龙无首，找不着北。说白了就是组织已经崩溃，无法再组织。</p>\r\n<p>那么我们就得知，其实所有的战争和集团体系，说白了都是一种组织形式，如果组织形式拥有不溃散法则，就会使这个集团的灵魂不散（为啥拥有灵魂的团，就是打不死呢？因为每个人都是可以站出来再组织），讨论起组织形式，我也不敢造次，古代人都给我们给弄出来了，我们也不必要再去搞什么组织创新，再多无非也就是，君王制，民主制，所谓的社会主义制（社会主义制其实是一种利用团体制度来专政，它是封建党制的一个后代）。那么这几个制度在国家形式上都有强国，在社会团体中也有这几种形式的存在，现在好多的公司都会用类君主制度来管理公司。当然 现在的公司制度也有其他的体制。</p>\r\n<pre><code>    先说君主制，王 任命将军去发动/迎接战争，将军 派中层将领去发动/迎接战争，中层派跟低一点的人去发动迎接战争，最后分解到每个人。每个人之间是没有必然联系的，而从可以当官的人开始，就会出现有关系，那么这种关系是什么样的呢?底层将领，只对自己高一级的将领负责，这样一级一级的向上推演，那么将军只对王负责。而战士只对上一级负责，管他什么狗屁君王呢！\r\n</code></pre><p>再说民主制，首先是一般人公选一个人来做所有的人的头，然后带着荣誉去发动/迎接战争，因为是公选的人何每个人的利益层是一样的。所以会出现所有人都会对自己的选择付出代价，如果选错了，个人将承受带来的灾痛。但是如果不是死亡，那么又会有一个新的头（野蛮的民主制度，看起来是非常残忍的，比君主制度更加残忍）。</p>\r\n<p>讨论党政，这里出自于与时政相关，也没有资格讨论，所以只是粗略讨论以下，古代党政何现代党政有一个完全不用花的特征，那就是有一套完整的思想统辖这内部。古代的党政制度也是属于下辖在君主制度下的一个拉帮。他们不同队列当中的人相互斗争，现代党政不一样，维持这一致性特征。</p>\r\n<p>说了半天，这与传销有半毛钱钱关系？</p>\r\n<p>好！这就娓娓道来。</p>\r\n<p>传销是一个金字塔形状的权利体系，它用浅显（受到古往今来的人的影响，经济学的人别喷我）的钱来凝结成型。那——为什么可以呢？</p>\r\n<p>它是一个数学模型，单凭数学模型而累积的权利体系是无法生存的，它一定给数学模型赋予了一项重要的意义，那就是利益，利益在陌生人和熟人之间最简单粗暴的表达形式就是用钱来解决。正因为是专业言，才导致了一个很坚固的体系。</p>\r\n<p>假设不受控制（即有关部门不再打压），会出现什么呢？很简单么，就是谁出的钱多，单体倒向谁。如果一个头目无故意外，会怎样呢？也很简单，就是在瞬时间再出来一个头目，如果有人不服，将会分裂成两个金字塔，为什么是两个，答案很简单呀，这个数学模型就是以2为基础的，所以它将会分裂成2戈金字塔。很多人没有弄明白为什么，姑且用道德观念来压制，我也不是说不行哦。</p>\r\n<p>打不散是因为有利益，会分裂是因为有利益分歧。</p>\r\n<p>那么利益就成了所有集体的凝结因素了。传销模型，能基本上解决集体的可延续发展，是比较明确的了。这就是有关部门为什么非常害怕了，如果这帮人以传销的形式来搞政治，那就麻烦了，天下大乱？</p>\r\n<p>传销其实就是野蛮民主制度的原型。</p>\r\n<p>它存在，就有意义，我们为什么不接受它呢？用明智的大脑让其野蛮因素去除，往文明方向发展呢？ 在这里我申明一下，不要认为我在为现在的传销团体辩护。本文观点在于正确面对传销的组织形式，而不是讨论传销。</p>\r\n<p>在此，对我说的话再次否定，你们可前往别当真啊。我抓起来了你们谁负责？</p>\r\n<p>题外话，之所以你们不会当真，是因为你们不必为此负责，当然也会有查水表的人刻意表达看法。</p>\r\n','2970940'),(41,11,'我为什么写作','p94ee2549','写作技巧,写作的目的','写作用于表达自己的看法和观点，留下自己的笔记',1,1,20,'2019-11-24 00:40:57','2019-11-23 23:59:15','','写作用于表达自己的看法和观点，留下自己的笔记','本文是老文章，写作并不规整，希望未来还可以修改他让他成为好文\r\n\r\n从二零一二年学习SEO开始用wordpress建立博客开始，已经整整七个年头了。\r\n这中间有过停顿，但始终没有放弃。\r\n我为了我的技术积累，生活更加美好而坚持写作。\r\n我为什么写作？他的答案与为什么工作，为什么或者是一样的（实际上我并没有这么高尚，我努力成为我想成为的人）。\r\n我爱生活，我叹息一切美好的瞬间的短暂，只有用博客才能将美好的瞬间与经历链接起来。\r\n我爱工作，我叹息我美好的灵感转瞬即失，只有用博客才能将灵感与时间链接起来。\r\n我爱学习，我叹息我跟不上这个时代的发展，只有用博客才能将自己武装的更加充实。\r\n博客是一种特殊的记忆方式，它是一种怀恋，是一种笔记记录，是一种青春的印记，是一种人生的味道，是一座与人沟通的桥梁。\r\n至少我有理由之王，我写作的东西能在日后能帮助到我自己，甚至影响到他人，甚至能因此遇见挚友，甚至可能遇到未来的老板。\r\n我喜欢用文字表达我心中所想，在这里可以随心所与，在这里如鱼得水。\r\n然而，写作博客不总是一帆风顺的，也并不总是快乐的，也并不是总是有东西能源源不断的写作的。谁能回避那些沉重的不愉快甚至忧伤呢？谁能阻止自己对知识的渴求而产生的焦虑呢？这一切都成为写作的一个动机，在只有这样，才能缓解心中的苦闷，甚至可以抛开苦闷而享受快乐。\r\n写作博客就是一个“自欺欺人”的游戏，是一个容纳思想的避难所。\r\n但凡成名的人都热爱写作，并且写的如此之好，他体现了一个人的反思，领悟，和生活的影子。他让人感通深受的理解一个人曾经的愤怒，恐惧，愉悦，不爽。\r\n最后我写作知识为了证明，我就是我，我能坚持写下去。','<p>本文是老文章，写作并不规整，希望未来还可以修改他让他成为好文</p>\r\n<p>从二零一二年学习SEO开始用wordpress建立博客开始，已经整整七个年头了。<br>这中间有过停顿，但始终没有放弃。<br>我为了我的技术积累，生活更加美好而坚持写作。<br>我为什么写作？他的答案与为什么工作，为什么或者是一样的（实际上我并没有这么高尚，我努力成为我想成为的人）。<br>我爱生活，我叹息一切美好的瞬间的短暂，只有用博客才能将美好的瞬间与经历链接起来。<br>我爱工作，我叹息我美好的灵感转瞬即失，只有用博客才能将灵感与时间链接起来。<br>我爱学习，我叹息我跟不上这个时代的发展，只有用博客才能将自己武装的更加充实。<br>博客是一种特殊的记忆方式，它是一种怀恋，是一种笔记记录，是一种青春的印记，是一种人生的味道，是一座与人沟通的桥梁。<br>至少我有理由之王，我写作的东西能在日后能帮助到我自己，甚至影响到他人，甚至能因此遇见挚友，甚至可能遇到未来的老板。<br>我喜欢用文字表达我心中所想，在这里可以随心所与，在这里如鱼得水。<br>然而，写作博客不总是一帆风顺的，也并不总是快乐的，也并不是总是有东西能源源不断的写作的。谁能回避那些沉重的不愉快甚至忧伤呢？谁能阻止自己对知识的渴求而产生的焦虑呢？这一切都成为写作的一个动机，在只有这样，才能缓解心中的苦闷，甚至可以抛开苦闷而享受快乐。<br>写作博客就是一个“自欺欺人”的游戏，是一个容纳思想的避难所。<br>但凡成名的人都热爱写作，并且写的如此之好，他体现了一个人的反思，领悟，和生活的影子。他让人感通深受的理解一个人曾经的愤怒，恐惧，愉悦，不爽。<br>最后我写作知识为了证明，我就是我，我能坚持写下去。</p>\r\n','2970940'),(42,11,'今天刚好周末，把有道云里总结的知识搬上来','pa75e5846','本书以社会上突如其来的流行潮为切入点，揭示引发流行并保持势头的原则和方法','本书以社会上突如其来的流行潮为切入点，揭示引发流行并保持势头的原则和方法',1,2,20,'2019-11-24 00:44:31','2019-11-23 23:59:15','<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	参考文献：\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	1、成甲说书\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	2、得到APP 知识服务\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	3、有道云笔记\r\n</p>','本书以社会上突如其来的流行潮为切入点，揭示引发流行并保持势头的原则和方法','本书和作者\r\n这是《福布斯》、《财富》、《纽约时报》推荐的商业人士必读图书。本书以社会上突如其来的流行潮为切入点，揭示引发流行并保持势头的原则和方法。作者创造的名词“引爆点 ”和他的流行三法则，已经成为商业理论上的新经典。\r\n\r\n作者马尔科姆·格拉德威尔，被美国《时代杂志》评为全球最有影响力的100位人物之一，《快公司》夸张地称他为“21世纪的彼得·德鲁克”，《纽约时报》把他对社会思想的影响称为“格拉德威尔效应”。他的作品除《引爆点》，还有《异类》、《眨眼之间》，都创造了书市的销售神话。\r\n\r\n核心观点\r\n别看我们身处的世界貌似无法改变，其实背后只要找准一个点，轻轻地一碰，这个世界就能够倾斜。这个点，就是“引爆点”。流行并不神秘，找对了方法，制造流行，是完全可能的。要把有限的资源用在关键的影响因素上。\r\n\r\n本书核心内容\r\n创造流行的“流行三法则”\r\n一，附着力法则；\r\n二，个别人物法则；\r\n三，环境威力法则。\r\n\r\n流行法则一：产品一定要有附着力\r\n附着力法则告诉我们，信息如果想要快速的传播，光靠良好的内在是不够的，或许你在某些似乎微不足道的地方对信息做一下改进，就会让信息变的令人不可抗拒。\r\n1、附着力法则：\r\n是指在同等条件下，附着力越高的信息引爆流行的可能性越大。它揭示了被传播信息的本身特征。\r\n附着力的特征：易传播，能自发传播，能在人与人之间相互快速传播。\r\n2、产品如何实现附着力\r\n让信息具有视觉化、具象化和可操作化的特征，只有这样才能引发非线性的几何级的增长，实现突然而全面的爆发。\r\n案例：心理学实验“恐惧实验”\r\n案例：十年前ipod的附着力信息“将1000首歌曲装进你的口袋”\r\n案例：小马宋如何通过T恤的包装来增加附着力\r\n\r\n流行法则二：找到传播中起关键作用的“个别人物”\r\n个别人物法则告诉我们：既然社会中存在一些能发起流行潮的特殊人物，我们的任务就是要在传播过程中找到这三种类型的特殊人物。\r\n1、流行第一步，发现产品价值，找内行\r\n内行：不局限为专业人士，确切地说应该是产品价值发现者。\r\n比如：小米手机的第一批核心粉丝，是精心挑选的刷机达人；做推广手机，找专门做手机评测达人，比如王自如；做旅游产品推广，找旅游圈中资深驴友队长，邀请他们体验评价。\r\n案例：手机软件“足迹”如何火遍朋友圈\r\n2、流行第二步，扩大影响力，找联络员\r\n联络员：是指关键的人脉节点，就像是流行传播中的放大器，他们让产品和更多的人联系起来。比如：罗胖。\r\n[知识点“六度人脉理论”：该理论指出世界上任何两个人之间的间隔平均仅为六度，即经过六个左右的人，你就可以认识任何你想要认识的人。\r\n但作者指出，并不是每一个人都与其他人之间仅存在六度之隔，它的实际意义是有个别特殊关键的人与其他所有人相隔仅几度，而大部分人就是通过这几个人与世界联系起来的。]\r\n3、流行第三步，病毒式传播，找推销员\r\n推销员：爱分享、爱传播的用户，发现什么好东西都会主动积极给别人介绍。\r\n这里的推销员是指那些能够说服你的人，比如你的同事，朋友，甚至老妈都可能在特定的场合成为一个推销员。\r\n\r\n流行法则三：环境威力法则\r\n环境威力法则告诉我们，传播环境对人的行为影响很大。我们要利用和创造恰当的时机、条件和地点进行传播，来影响用户的行为。同时还要注意传播人群的规模，也会影响传播效率。\r\n1、外部环境能给我们带来暗示\r\n时间、地点，当时的条件是什么，这些看起来不起眼的因素都影响一件事情能否广泛传播。\r\n破窗理论：源自心理学著名的关于环境对人行为影响的实验，是指假如一个房间的窗户破了，如果没人去修的话，很快其它的窗户也会莫名其妙地被各种各样的人打破。\r\n案例：某明星因为时机不对一直上不了头条\r\n案例：iPhone 7上市电商平台的预售页面设计\r\n案例：Airbnb如何利用环境的影响力来创造流行，提升销售\r\n2、群体环境的规模会影响传播的效率\r\n150神奇数字：群体环境的影响力并不是无止境的，150是它的极限数量。\r\n认知心理学中有一个概念叫通道容量，受“通道容量”制约，人类大脑只能处理大约150人左右的群体关系；也就是说，当一个“群体”的活跃人数超过了150人时，群体对成员的影响力开始下降。\r\n也就是说，要制造大规模的流行，应当先在许多可控制的小规模群体环境中制造流行。\r\n案例：facebook的社区用户平均数在120人\r\n\r\n关于如何创造流行，如何从零到一建立用户的传播，此前《成甲说书》讲过一期《增长黑客》，这本书也是讨论相近的话题，如果你感兴趣也可以去收听那期节目。\r\n撰稿、讲述：成甲（微信公号搜索pkm100)\r\n','<p>本书和作者<br>这是《福布斯》、《财富》、《纽约时报》推荐的商业人士必读图书。本书以社会上突如其来的流行潮为切入点，揭示引发流行并保持势头的原则和方法。作者创造的名词“引爆点 ”和他的流行三法则，已经成为商业理论上的新经典。</p>\r\n<p>作者马尔科姆·格拉德威尔，被美国《时代杂志》评为全球最有影响力的100位人物之一，《快公司》夸张地称他为“21世纪的彼得·德鲁克”，《纽约时报》把他对社会思想的影响称为“格拉德威尔效应”。他的作品除《引爆点》，还有《异类》、《眨眼之间》，都创造了书市的销售神话。</p>\r\n<p>核心观点<br>别看我们身处的世界貌似无法改变，其实背后只要找准一个点，轻轻地一碰，这个世界就能够倾斜。这个点，就是“引爆点”。流行并不神秘，找对了方法，制造流行，是完全可能的。要把有限的资源用在关键的影响因素上。</p>\r\n<p>本书核心内容<br>创造流行的“流行三法则”<br>一，附着力法则；<br>二，个别人物法则；<br>三，环境威力法则。</p>\r\n<p>流行法则一：产品一定要有附着力<br>附着力法则告诉我们，信息如果想要快速的传播，光靠良好的内在是不够的，或许你在某些似乎微不足道的地方对信息做一下改进，就会让信息变的令人不可抗拒。<br>1、附着力法则：<br>是指在同等条件下，附着力越高的信息引爆流行的可能性越大。它揭示了被传播信息的本身特征。<br>附着力的特征：易传播，能自发传播，能在人与人之间相互快速传播。<br>2、产品如何实现附着力<br>让信息具有视觉化、具象化和可操作化的特征，只有这样才能引发非线性的几何级的增长，实现突然而全面的爆发。<br>案例：心理学实验“恐惧实验”<br>案例：十年前ipod的附着力信息“将1000首歌曲装进你的口袋”<br>案例：小马宋如何通过T恤的包装来增加附着力</p>\r\n<p>流行法则二：找到传播中起关键作用的“个别人物”<br>个别人物法则告诉我们：既然社会中存在一些能发起流行潮的特殊人物，我们的任务就是要在传播过程中找到这三种类型的特殊人物。<br>1、流行第一步，发现产品价值，找内行<br>内行：不局限为专业人士，确切地说应该是产品价值发现者。<br>比如：小米手机的第一批核心粉丝，是精心挑选的刷机达人；做推广手机，找专门做手机评测达人，比如王自如；做旅游产品推广，找旅游圈中资深驴友队长，邀请他们体验评价。<br>案例：手机软件“足迹”如何火遍朋友圈<br>2、流行第二步，扩大影响力，找联络员<br>联络员：是指关键的人脉节点，就像是流行传播中的放大器，他们让产品和更多的人联系起来。比如：罗胖。<br>[知识点“六度人脉理论”：该理论指出世界上任何两个人之间的间隔平均仅为六度，即经过六个左右的人，你就可以认识任何你想要认识的人。<br>但作者指出，并不是每一个人都与其他人之间仅存在六度之隔，它的实际意义是有个别特殊关键的人与其他所有人相隔仅几度，而大部分人就是通过这几个人与世界联系起来的。]<br>3、流行第三步，病毒式传播，找推销员<br>推销员：爱分享、爱传播的用户，发现什么好东西都会主动积极给别人介绍。<br>这里的推销员是指那些能够说服你的人，比如你的同事，朋友，甚至老妈都可能在特定的场合成为一个推销员。</p>\r\n<p>流行法则三：环境威力法则<br>环境威力法则告诉我们，传播环境对人的行为影响很大。我们要利用和创造恰当的时机、条件和地点进行传播，来影响用户的行为。同时还要注意传播人群的规模，也会影响传播效率。<br>1、外部环境能给我们带来暗示<br>时间、地点，当时的条件是什么，这些看起来不起眼的因素都影响一件事情能否广泛传播。<br>破窗理论：源自心理学著名的关于环境对人行为影响的实验，是指假如一个房间的窗户破了，如果没人去修的话，很快其它的窗户也会莫名其妙地被各种各样的人打破。<br>案例：某明星因为时机不对一直上不了头条<br>案例：iPhone 7上市电商平台的预售页面设计<br>案例：Airbnb如何利用环境的影响力来创造流行，提升销售<br>2、群体环境的规模会影响传播的效率<br>150神奇数字：群体环境的影响力并不是无止境的，150是它的极限数量。<br>认知心理学中有一个概念叫通道容量，受“通道容量”制约，人类大脑只能处理大约150人左右的群体关系；也就是说，当一个“群体”的活跃人数超过了150人时，群体对成员的影响力开始下降。<br>也就是说，要制造大规模的流行，应当先在许多可控制的小规模群体环境中制造流行。<br>案例：facebook的社区用户平均数在120人</p>\r\n<p>关于如何创造流行，如何从零到一建立用户的传播，此前《成甲说书》讲过一期《增长黑客》，这本书也是讨论相近的话题，如果你感兴趣也可以去收听那期节目。<br>撰稿、讲述：成甲（微信公号搜索pkm100)</p>\r\n','2970940'),(43,11,'为什么生姜的每一个分支都这么健壮呢？','p5c4b7e4f','生姜, 云，人生哲学','有这么一个典故，话说宰相刘罗锅有一次给乾隆皇帝送生日礼物，别人都送的很贵重的礼物，但刘罗锅却送一桶不规则的生姜（一桶江山）。',1,2,20,'2019-11-24 00:48:29','2019-11-23 23:59:15','吴伯凡 《伯凡日志录》','有这么一个典故，话说宰相刘罗锅有一次给乾隆皇帝送生日礼物，别人都送的很贵重的礼物，但刘罗锅却送一桶不规则的生姜（一桶江山）。','有这么一个典故，话说宰相刘罗锅有一次给乾隆皇帝送生日礼物，别人都送的很贵重的礼物，但刘罗锅却送一桶不规则的生姜（一桶江山）。\r\n说明古人早就研究过生姜了，虽说他寓意不在本文的范围内。在听得到APP时，吴伯凡老师也讲过生姜，在文中，发现已经有哲学家把它升华成一个哲学概念，厉害呀！这个人叫德勒兹。这里我姑且不讨论哲学。我只想看看生姜的生长对我们的实际学习生活和工作有什么启发。\r\n首先，生姜是没有固定形状的。或者说，你头脑中没有一个关于生姜的标准形象。但一堆生姜在那里，你一眼就能知道他是生姜，但每一个生姜的形态是不一样的。\r\n其次，生姜是以中国根茎，在地下生长，生姜没有明确的生长层次，植物的根生长都是有层次的，有主有次，但生姜生长在地下，却没有主次，用哲学家德勒兹的话说就是反谱系的。\r\n生姜反谱系，没有层次感。原因在哪里呢？它之所以这样，是因为获取能量的多样性，每一个环节都长的一样粗壮，每一个环节都能获取到足够的资源。它不靠阳光、雨露这些既定的资源。\r\n至于你看了有没有感触，我反正是很惊讶！对于我们单独个人来说，有什么启发？\r\n如果你过早的希望于争夺阳光和雨露，那么在未来可能会失去更多。\r\n我们做技术也是这样，过早的追求完美的利益结构，会导致做的东西浮躁不堪，每一个功能都想做，且做了，就是关键时刻掉链子，得不到真正的利益。\r\n我们做产品也是这样，产品总是设计的尽善尽美，但结果却往往不尽人意，在市场上被同类产品淹没。\r\n想到这里，我终于知道了为什么业内有这么一个说法，腾讯所到之处，寸草不生。是因为，腾讯的企业形态就是一个大生姜，他没有指定的形态，但他就是什么都能做的很健壮。你还别不信，看看qq音乐，天天爱消除，雷霆战机这几款产品就知道了，微信也不是腾讯首创，在微信出来还有米聊呢！\r\n想想确实可怕，腾讯的产品出来所向无敌，原有的生命形态统统被干掉。那么我们在设计产品时该如何思想呢?\r\n我们应该分析产品，最小化功能开发，拥抱用户，认真分析数据，吸收多个层面的信息给养。快速的开发出健壮的分支。正所谓开着火车换轮胎（不，火车轮胎，是铁轱辘）。至于如何分析，设计，这里不做阐述。后期还有更深层次的理解，接着写。但我现在能做的就是能做的功能做到尽善尽美，有能力做的让他更加有创造力。\r\n生姜在产品开发层面，很像现在的敏捷迭代开发思路，循序渐进的方法进行产品开发，大项目分为多个相互联系/也可独立运行的小项目，分别完成，在此过程中产品一直处于可用状态。','<p>有这么一个典故，话说宰相刘罗锅有一次给乾隆皇帝送生日礼物，别人都送的很贵重的礼物，但刘罗锅却送一桶不规则的生姜（一桶江山）。<br>说明古人早就研究过生姜了，虽说他寓意不在本文的范围内。在听得到APP时，吴伯凡老师也讲过生姜，在文中，发现已经有哲学家把它升华成一个哲学概念，厉害呀！这个人叫德勒兹。这里我姑且不讨论哲学。我只想看看生姜的生长对我们的实际学习生活和工作有什么启发。<br>首先，生姜是没有固定形状的。或者说，你头脑中没有一个关于生姜的标准形象。但一堆生姜在那里，你一眼就能知道他是生姜，但每一个生姜的形态是不一样的。<br>其次，生姜是以中国根茎，在地下生长，生姜没有明确的生长层次，植物的根生长都是有层次的，有主有次，但生姜生长在地下，却没有主次，用哲学家德勒兹的话说就是反谱系的。<br>生姜反谱系，没有层次感。原因在哪里呢？它之所以这样，是因为获取能量的多样性，每一个环节都长的一样粗壮，每一个环节都能获取到足够的资源。它不靠阳光、雨露这些既定的资源。<br>至于你看了有没有感触，我反正是很惊讶！对于我们单独个人来说，有什么启发？<br>如果你过早的希望于争夺阳光和雨露，那么在未来可能会失去更多。<br>我们做技术也是这样，过早的追求完美的利益结构，会导致做的东西浮躁不堪，每一个功能都想做，且做了，就是关键时刻掉链子，得不到真正的利益。<br>我们做产品也是这样，产品总是设计的尽善尽美，但结果却往往不尽人意，在市场上被同类产品淹没。<br>想到这里，我终于知道了为什么业内有这么一个说法，腾讯所到之处，寸草不生。是因为，腾讯的企业形态就是一个大生姜，他没有指定的形态，但他就是什么都能做的很健壮。你还别不信，看看qq音乐，天天爱消除，雷霆战机这几款产品就知道了，微信也不是腾讯首创，在微信出来还有米聊呢！<br>想想确实可怕，腾讯的产品出来所向无敌，原有的生命形态统统被干掉。那么我们在设计产品时该如何思想呢?<br>我们应该分析产品，最小化功能开发，拥抱用户，认真分析数据，吸收多个层面的信息给养。快速的开发出健壮的分支。正所谓开着火车换轮胎（不，火车轮胎，是铁轱辘）。至于如何分析，设计，这里不做阐述。后期还有更深层次的理解，接着写。但我现在能做的就是能做的功能做到尽善尽美，有能力做的让他更加有创造力。<br>生姜在产品开发层面，很像现在的敏捷迭代开发思路，循序渐进的方法进行产品开发，大项目分为多个相互联系/也可独立运行的小项目，分别完成，在此过程中产品一直处于可用状态。</p>\r\n','2970940'),(44,11,'推荐一个好东西——墨刀原型设计工具','p46a4c742','原型设计,磨刀,网站设计','总是愿意在知识技能上有很大的投资，或许是对知识的焦虑，这与学历无关',1,2,20,'2019-11-24 00:54:28','2019-11-23 23:59:15','<li style=\"white-space:normal;\">\r\n	<a href=\"https://modao.cc\" target=\"_blank\">磨刀官网</a>\r\n</li>\r\n<li style=\"white-space:normal;\">\r\n	<a href=\"https://www.axure.com.cn/\" target=\"_blank\">Axure官网</a>\r\n</li>','总是愿意在知识技能上有很大的投资，或许是对知识的焦虑，这与学历无关','**人总是愿意在知识技能上有很大的投资，或许是对知识的焦虑，这与学历无关。经过自学，已经完成了公司的2个项目，并且是在和队员合作的情况下完成的，在日常开发中，我们引入了GitLab版本工具，采用了thinkPHP5框架，在技能比较熟悉的情况下，我们学会了很多经验。但是在实际工作中，还是有很多不足，我们总是很恐惧，我们总是对时间没有一个很好的把控，经常有些工作重复劳动。\r\n  曾经想用axure,也下在来看了一下，作为一个想提高工作效率，获取更多知识广度的人来说，这个工具的学习曲线太陡峭了，比python的django框架还要难，纵使他功能很全，但是我们一般使用一款工具，绝大多数都只用到了集少部分的功能。\r\n  其二、一看正版的价格，也确实让人很舒服。PRO版的要4000RMB，其他两个版本真的就很贵了呀（不过看他的定价策略，貌似对个人很不友好，反而团队使用的成本没有那么高，例如团队版才7000RMB，企业版才9000RMB）\r\n  如果有很多公司招聘都用这个工具，也却是值得去学习一下的，但是现在是互联网崛起的时代，学习慢了可不行。有什么可以快速搞定的呢？今天我推荐一个好工具，厉害了，价格亲民，团队使用也能很好的提高效率，关键还能秀一下正版支持的优越感。价格很公道，个人版一年150元啦。创业公司都会喜欢的。\r\n\r\n**人总是愿意在知识技能上有很大的投资，或许是对知识的焦虑，这与学历无关。经过自学，已经完成了公司的2个项目，并且是在和队员合作的情况下完成的，在日常开发中，我们引入了GitLab版本工具，采用了thinkPHP5框架，在技能比较熟悉的情况下，我们学会了很多经验。但是在实际工作中，还是有很多不足，我们总是很恐惧，我们总是对时间没有一个很好的把控，经常有些工作重复劳动。\r\n&emsp;&emsp;曾经想用axure,也下在来看了一下，作为一个想提高工作效率，获取更多知识广度的人来说，这个工具的学习曲线太陡峭了，比python的django框架还要难，纵使他功能很全，但是我们一般使用一款工具，绝大多数都只用到了集少部分的功能。\r\n&emsp;&emsp;其二、一看正版的价格，也确实让人很舒服。PRO版的要4000RMB，其他两个版本真的就很贵了呀（不过看他的定价策略，貌似对个人很不友好，反而团队使用的成本没有那么高，例如团队版才7000RMB，企业版才9000RMB）\r\n&emsp;&emsp;如果有很多公司招聘都用这个工具，也却是值得去学习一下的，但是现在是互联网崛起的时代，学习慢了可不行。有什么可以快速搞定的呢？今天我推荐一个好工具，厉害了，价格亲民，团队使用也能很好的提高效率，关键还能秀一下正版支持的优越感。价格很公道，个人版一年150元啦。创业公司都会喜欢的。\r\n![](/static/uploads/images/2018061308104473dd6645ca5d4392822ecf02474206ed.png)\r\n看到这里，我果断的买了个人版，用以提高公司新开发的项目。\r\n![](/static/uploads/images/201806130814442f0b8ef1317849158a21ac7846f64abe.png)\r\n这是他的教程模板来的，学习并不复杂，能很快的应用到自己的项目中去，当然，这一切的一切，不是你用了工具就能提高工作效率的，而是你得有一整套产品设计逻辑和产品思维才可以的。\r\n','<p>**人总是愿意在知识技能上有很大的投资，或许是对知识的焦虑，这与学历无关。经过自学，已经完成了公司的2个项目，并且是在和队员合作的情况下完成的，在日常开发中，我们引入了GitLab版本工具，采用了thinkPHP5框架，在技能比较熟悉的情况下，我们学会了很多经验。但是在实际工作中，还是有很多不足，我们总是很恐惧，我们总是对时间没有一个很好的把控，经常有些工作重复劳动。<br>  曾经想用axure,也下在来看了一下，作为一个想提高工作效率，获取更多知识广度的人来说，这个工具的学习曲线太陡峭了，比python的django框架还要难，纵使他功能很全，但是我们一般使用一款工具，绝大多数都只用到了集少部分的功能。<br>  其二、一看正版的价格，也确实让人很舒服。PRO版的要4000RMB，其他两个版本真的就很贵了呀（不过看他的定价策略，貌似对个人很不友好，反而团队使用的成本没有那么高，例如团队版才7000RMB，企业版才9000RMB）<br>  如果有很多公司招聘都用这个工具，也却是值得去学习一下的，但是现在是互联网崛起的时代，学习慢了可不行。有什么可以快速搞定的呢？今天我推荐一个好工具，厉害了，价格亲民，团队使用也能很好的提高效率，关键还能秀一下正版支持的优越感。价格很公道，个人版一年150元啦。创业公司都会喜欢的。</p>\r\n<p>**人总是愿意在知识技能上有很大的投资，或许是对知识的焦虑，这与学历无关。经过自学，已经完成了公司的2个项目，并且是在和队员合作的情况下完成的，在日常开发中，我们引入了GitLab版本工具，采用了thinkPHP5框架，在技能比较熟悉的情况下，我们学会了很多经验。但是在实际工作中，还是有很多不足，我们总是很恐惧，我们总是对时间没有一个很好的把控，经常有些工作重复劳动。<br>&emsp;&emsp;曾经想用axure,也下在来看了一下，作为一个想提高工作效率，获取更多知识广度的人来说，这个工具的学习曲线太陡峭了，比python的django框架还要难，纵使他功能很全，但是我们一般使用一款工具，绝大多数都只用到了集少部分的功能。<br>&emsp;&emsp;其二、一看正版的价格，也确实让人很舒服。PRO版的要4000RMB，其他两个版本真的就很贵了呀（不过看他的定价策略，貌似对个人很不友好，反而团队使用的成本没有那么高，例如团队版才7000RMB，企业版才9000RMB）<br>&emsp;&emsp;如果有很多公司招聘都用这个工具，也却是值得去学习一下的，但是现在是互联网崛起的时代，学习慢了可不行。有什么可以快速搞定的呢？今天我推荐一个好工具，厉害了，价格亲民，团队使用也能很好的提高效率，关键还能秀一下正版支持的优越感。价格很公道，个人版一年150元啦。创业公司都会喜欢的。<br><img src=\"/static/uploads/images/2018061308104473dd6645ca5d4392822ecf02474206ed.png\" alt=\"\"><br>看到这里，我果断的买了个人版，用以提高公司新开发的项目。<br><img src=\"/static/uploads/images/201806130814442f0b8ef1317849158a21ac7846f64abe.png\" alt=\"\"><br>这是他的教程模板来的，学习并不复杂，能很快的应用到自己的项目中去，当然，这一切的一切，不是你用了工具就能提高工作效率的，而是你得有一整套产品设计逻辑和产品思维才可以的。</p>\r\n','2970940'),(45,11,'产品交互设计,PM培训笔记','pd215e34c','pm,产品设计，培训笔记','由于学习是零碎的，所以不成章节，属于临时编辑的文章，本系列来自人人都是产品经理课程。后续整理成列表将其章节化。',1,2,20,'2019-11-24 00:56:59','2019-11-23 23:59:15','','由于学习是零碎的，所以不成章节，属于临时编辑的文章，本系列来自人人都是产品经理课程。后续整理成列表将其章节化。','由于学习是零碎的，所以不成章节，属于临时编辑的文章，本系列来自人人都是产品经理课程。后续整理成列表将其章节化。\r\n###什么是交互设计\r\n1. 了产品想法、功能点，怎么呈现个用户？\r\n2. 有了好的设计，能否验证其合理性呢？\r\n3. 不同的场景，是否需要更多的思考呢？\r\n	1. 行为——交互方式\r\n		- 触控\r\n		- 点击\r\n		- 按压\r\n		- 上下左右滑\r\n	2. 形式\r\n		- 界面风格\r\n		- 图形\r\n		- 元素\r\n	3. 内容\r\n		- 信息架构\r\n		- 文案编写\r\n		- 动画制作\r\n		- 声音呈现等\r\n4. 设计师\r\n	- 交互设计——就是把东西搞出来\r\n	- 视觉设计——把东西搞漂亮\r\n	- 重构设计——整成可以搞代码的东西\r\n	- 一般小公司这几步都是自己搞\r\n5. 说到底什么是交互设计呢？\r\n	- 交互设计就是要把产品目标具体化，变为可视化的执行方案。\r\n	- 侧重用户使用流程的体验\r\n	- 要帮助产品做到让用户可用、易用、想用\r\n6. 产品经理需要知道的交互设计\r\n	1. 硬技能\r\n		- 首先得会画脑图\r\n		- 会PS\r\n		- 会原型设计软件\r\n	2. 软实力\r\n		- 产品意识——是不是从老板的角度，让老板可以赚钱，拿投资\r\n		- 用户意思——是不是从用户的角度思考，让用户觉得很好用\r\n		- 视觉能力——是不是能够很好的呈现美感\r\n		- 用户调研能力\r\n		- 沟通能力——怎样和你的老板，你的同事，你的协作者对白\r\n		- 学习能力——不管你做啥，这是必备技能','<p>由于学习是零碎的，所以不成章节，属于临时编辑的文章，本系列来自人人都是产品经理课程。后续整理成列表将其章节化。</p>\r\n<h3 id=\"h3-u4EC0u4E48u662Fu4EA4u4E92u8BBEu8BA1\"><a name=\"什么是交互设计\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>什么是交互设计</h3><ol>\r\n<li>了产品想法、功能点，怎么呈现个用户？</li><li>有了好的设计，能否验证其合理性呢？</li><li>不同的场景，是否需要更多的思考呢？<ol>\r\n<li>行为——交互方式<ul>\r\n<li>触控</li><li>点击</li><li>按压</li><li>上下左右滑</li></ul>\r\n</li><li>形式<ul>\r\n<li>界面风格</li><li>图形</li><li>元素</li></ul>\r\n</li><li>内容<ul>\r\n<li>信息架构</li><li>文案编写</li><li>动画制作</li><li>声音呈现等</li></ul>\r\n</li></ol>\r\n</li><li>设计师<ul>\r\n<li>交互设计——就是把东西搞出来</li><li>视觉设计——把东西搞漂亮</li><li>重构设计——整成可以搞代码的东西</li><li>一般小公司这几步都是自己搞</li></ul>\r\n</li><li>说到底什么是交互设计呢？<ul>\r\n<li>交互设计就是要把产品目标具体化，变为可视化的执行方案。</li><li>侧重用户使用流程的体验</li><li>要帮助产品做到让用户可用、易用、想用</li></ul>\r\n</li><li>产品经理需要知道的交互设计<ol>\r\n<li>硬技能<ul>\r\n<li>首先得会画脑图</li><li>会PS</li><li>会原型设计软件</li></ul>\r\n</li><li>软实力<ul>\r\n<li>产品意识——是不是从老板的角度，让老板可以赚钱，拿投资</li><li>用户意思——是不是从用户的角度思考，让用户觉得很好用</li><li>视觉能力——是不是能够很好的呈现美感</li><li>用户调研能力</li><li>沟通能力——怎样和你的老板，你的同事，你的协作者对白</li><li>学习能力——不管你做啥，这是必备技能</li></ul>\r\n</li></ol>\r\n</li></ol>\r\n','2970940'),(46,11,'做开发，先做好产品分析；从产品的角度思考问题，比怎么写程序更重要','pcc95df46','pm,产品设计，培训笔记,产品运营','第一性原理是设计产品与运营产品的关键因素，世界上的第一性原理就那么几条，但要找到也着实不容易',1,2,20,'2019-11-24 01:02:44','2019-11-23 23:59:15','','第一性原理是设计产品与运营产品的关键因素，世界上的第一性原理就那么几条，但要找到也着实不容易','某富翁想取老婆，经过精选，最后确定了三个人。富翁给了三个女孩各一千元钱，请他们把房间装满：\r\n~~~\r\n第一个女孩，买了很多棉花，装满了房间的一半；\r\n第二个女孩，买了很多气球，装满了3/4；\r\n第三个女孩，买了一支蜡烛，装满了整个房间。\r\n~~~\r\n最终，\r\n富翁选择了胸最大的那个。\r\n![](/static/uploads/images/201807211439185233c26476e24ea4a61156ed2bae751f.jpg)\r\n所以，了解**用户真实的需求非常重要！！！***其他的都是客套！！！\r\n','<p>某富翁想取老婆，经过精选，最后确定了三个人。富翁给了三个女孩各一千元钱，请他们把房间装满：</p>\r\n<pre><code>第一个女孩，买了很多棉花，装满了房间的一半；\r\n第二个女孩，买了很多气球，装满了3/4；\r\n第三个女孩，买了一支蜡烛，装满了整个房间。\r\n</code></pre><p>最终，<br>富翁选择了胸最大的那个。<br><img src=\"/static/uploads/images/201807211439185233c26476e24ea4a61156ed2bae751f.jpg\" alt=\"\"><br>所以，了解<strong>用户真实的需求非常重要！！！*</strong>其他的都是客套！！！</p>\r\n','2970940'),(47,11,'现实不是让我们妥协的，而是让我们适应的','p7e57f24b','日常学习,得到是个好东西','面对现实，找到解决方案，一步一步的解决，总能走出去',1,2,20,'2019-11-24 01:07:07','2019-11-23 23:59:15','<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	注：本文参考《逻辑思维》\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	1.531期：好企业为什么也危险？\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	2.532期：经营你的价值网络\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	3.533期：价值网络创新\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	参考书目\r\n</p>\r\n<p style=\"box-sizing:border-box;margin-top:0px;margin-bottom:10px;line-height:25px;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">\r\n	《创新者的窘境》&nbsp; ---克里斯坦森的商学名著\r\n</p>','面对现实，找到解决方案，一步一步的解决，总能走出去','为什么起这个标题呢？\r\n缘起于《得到》APP，上一周的免费学习内容。这只是对论点进行记录，并不能解释，只能说从某一个方面看来，他具有说服力。\r\n1.企业文化是一个企业的次级表达。\r\n因为我们得有一个认知基础，一个大企业（乃至中小企业）内部的权力分配一定是分散的，不会因为搞定了某一个领导，就能让其一败涂地；也不能因为一个人而力挽狂澜，这一点我们必须明白。\r\n企业内部集权也好，民主也罢，本质上都是一种分权的方式。\r\n2.企业文化是一种选择偏好。\r\n对于一个庞大且信息不对称的状态下，有所选择，必定是唯一高效的方式。\r\n3.每一个选择，都有一个遗憾，\r\n断 舍  离\r\n4.每个人都有认知盲区，每个企业也有盲区。\r\n5.不是每次都能赌赢，而是尽可能赌少的输。、\r\n胜（剩）者为王\r\n6.价值网络一旦变化，联系越紧密的企业也越难摆脱危险。\r\n正所谓  船大难掉头\r\n企业的异能：在自己的内部孵化一个新企业，做公司的逃生仓\r\n7.无论是个人还是企业，从时间这个纬度来看，价值不取决于他自己，而是取决于它的价值网络。\r\n8.一个游泳高手，但是脚下绑了好多块石头，一样会沉底的\r\n9.从价值网络入手，是一个搞创新的好路子\r\n这就是为什么作出一模一样的产品，最后还是被人家打败了的原因。\r\n10.创新，不在于你自己做了什么新创意，而是在于你和谁一起持续输出创新价值、\r\n11.价值网络会深度绑定企业的趋向，人也是如此，不是吗？\r\n正所谓龙生龙，凤生凤；老鼠的儿子会打洞\r\n12.微软霸权的真相\r\n没有用户就没有应用软件；没有应用软件，就没有用户。垄断优势不在于内部资源的基础之上；而在于整个外部网络资源的基础之上。\r\n13.只有创新的产品，没有创新的价值网络，实际上是没有任何意义。\r\n例如：米聊 易信 vs 微信\r\n当你把他当对手时，他根本不想和你一争高下；当你做产品时，人家在做产业链。\r\n但不是所有人都能做平台的。以为自己有这本事，实际上……\r\n14.什么是价值网络？\r\n你和谁在一起，持续稳定的产出价值\r\n','<p>为什么起这个标题呢？<br>缘起于《得到》APP，上一周的免费学习内容。这只是对论点进行记录，并不能解释，只能说从某一个方面看来，他具有说服力。<br>1.企业文化是一个企业的次级表达。<br>因为我们得有一个认知基础，一个大企业（乃至中小企业）内部的权力分配一定是分散的，不会因为搞定了某一个领导，就能让其一败涂地；也不能因为一个人而力挽狂澜，这一点我们必须明白。<br>企业内部集权也好，民主也罢，本质上都是一种分权的方式。<br>2.企业文化是一种选择偏好。<br>对于一个庞大且信息不对称的状态下，有所选择，必定是唯一高效的方式。<br>3.每一个选择，都有一个遗憾，<br>断 舍  离<br>4.每个人都有认知盲区，每个企业也有盲区。<br>5.不是每次都能赌赢，而是尽可能赌少的输。、<br>胜（剩）者为王<br>6.价值网络一旦变化，联系越紧密的企业也越难摆脱危险。<br>正所谓  船大难掉头<br>企业的异能：在自己的内部孵化一个新企业，做公司的逃生仓<br>7.无论是个人还是企业，从时间这个纬度来看，价值不取决于他自己，而是取决于它的价值网络。<br>8.一个游泳高手，但是脚下绑了好多块石头，一样会沉底的<br>9.从价值网络入手，是一个搞创新的好路子<br>这就是为什么作出一模一样的产品，最后还是被人家打败了的原因。<br>10.创新，不在于你自己做了什么新创意，而是在于你和谁一起持续输出创新价值、<br>11.价值网络会深度绑定企业的趋向，人也是如此，不是吗？<br>正所谓龙生龙，凤生凤；老鼠的儿子会打洞<br>12.微软霸权的真相<br>没有用户就没有应用软件；没有应用软件，就没有用户。垄断优势不在于内部资源的基础之上；而在于整个外部网络资源的基础之上。<br>13.只有创新的产品，没有创新的价值网络，实际上是没有任何意义。<br>例如：米聊 易信 vs 微信<br>当你把他当对手时，他根本不想和你一争高下；当你做产品时，人家在做产业链。<br>但不是所有人都能做平台的。以为自己有这本事，实际上……<br>14.什么是价值网络？<br>你和谁在一起，持续稳定的产出价值</p>\r\n','2970940'),(48,6,'flask-migrate 更新 迁移数据库','pd5135449','flask-migrate,flask数据库迁移','掌握好migrate比较重要，这便于在同一个项目里升级产品',1,2,20,'2019-11-24 01:10:25','2019-11-23 23:59:15','','掌握好migrate比较重要，这便于在同一个项目里升级产品','##高频使用是技术成熟的基本方法，你每天都重复吗？\r\n记得写完博客程序了有一段时间了，当时功能可能没有写的很全，今天呢，又想起来搞一下（其实不是刚想起，是早有打算的，拖延症……莫的法阿）。\r\n![](/static/uploads/images/201807242234140ffbac6ae6c84d6a9a0b3107a5c83a7e.png)\r\n我要给数据库加一个字段，如果用php可能就不会有这个动作了，但是我用的时python flask + sqlalchemy。他有很强大的数据库迁移功能，实现的是可以不用先删除旧表更新数据库，这样可以完整保存你的开发记录。\r\n里面有几个命令可以滚回，合并，更新。妈的有几个月没使了，居然给忘记了，马上翻阅文档，特意记录下来，下回再忘记了就来查询。\r\n1、需要添加的数据库表、字段\r\n```\r\n   \"\"\"\r\n    文章表，只有注册的用户才能发表文章，必须制定分类\r\n    \"\"\"\r\n    __tablename__ = \"tb_article\"\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    user_id = db.Column(db.Integer, db.ForeignKey(\"tb_user.id\"))\r\n    category_id = db.Column(db.Integer, db.ForeignKey(\"tb_category.id\"))\r\n    title = db.Column(db.String(64))\r\n    url_title = db.Column(db.String(32))\r\n    keywords = db.Column(db.String(32))\r\n    description = db.Column(db.String(255))\r\n    image = db.Column(db.String(255))\r\n    content = db.Column(db.Text)\r\n    markdown = db.Column(db.Text)\r\n    top = db.Column(db.SmallInteger)\r\n    relationship = db.Column(db.Text)\r\n    status = db.Column(db.SmallInteger)\r\n    reply = db.relationship(\"Reply\", backref=\"article\")\r\n    count = db.Column(db.Integer, default=int(100))\r\n```\r\n\r\n2、创建迁移脚本\r\n```\r\npython manage.py db migrate -m \"添加你的修改信息\"  #跟git commit -m \"\"是一样的意思\r\n```\r\n3、更新数据库\r\n```\r\npython manage.py db upgrade\r\n```\r\n','<h2 id=\"h2--\"><a name=\"高频使用是技术成熟的基本方法，你每天都重复吗？\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>高频使用是技术成熟的基本方法，你每天都重复吗？</h2><p>记得写完博客程序了有一段时间了，当时功能可能没有写的很全，今天呢，又想起来搞一下（其实不是刚想起，是早有打算的，拖延症……莫的法阿）。<br><img src=\"/static/uploads/images/201807242234140ffbac6ae6c84d6a9a0b3107a5c83a7e.png\" alt=\"\"><br>我要给数据库加一个字段，如果用php可能就不会有这个动作了，但是我用的时python flask + sqlalchemy。他有很强大的数据库迁移功能，实现的是可以不用先删除旧表更新数据库，这样可以完整保存你的开发记录。<br>里面有几个命令可以滚回，合并，更新。妈的有几个月没使了，居然给忘记了，马上翻阅文档，特意记录下来，下回再忘记了就来查询。<br>1、需要添加的数据库表、字段</p>\r\n<pre><code>   &quot;&quot;&quot;\r\n    文章表，只有注册的用户才能发表文章，必须制定分类\r\n    &quot;&quot;&quot;\r\n    __tablename__ = &quot;tb_article&quot;\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    user_id = db.Column(db.Integer, db.ForeignKey(&quot;tb_user.id&quot;))\r\n    category_id = db.Column(db.Integer, db.ForeignKey(&quot;tb_category.id&quot;))\r\n    title = db.Column(db.String(64))\r\n    url_title = db.Column(db.String(32))\r\n    keywords = db.Column(db.String(32))\r\n    description = db.Column(db.String(255))\r\n    image = db.Column(db.String(255))\r\n    content = db.Column(db.Text)\r\n    markdown = db.Column(db.Text)\r\n    top = db.Column(db.SmallInteger)\r\n    relationship = db.Column(db.Text)\r\n    status = db.Column(db.SmallInteger)\r\n    reply = db.relationship(&quot;Reply&quot;, backref=&quot;article&quot;)\r\n    count = db.Column(db.Integer, default=int(100))\r\n</code></pre><p>2、创建迁移脚本</p>\r\n<pre><code>python manage.py db migrate -m &quot;添加你的修改信息&quot;  #跟git commit -m &quot;&quot;是一样的意思\r\n</code></pre><p>3、更新数据库</p>\r\n<pre><code>python manage.py db upgrade\r\n</code></pre>','2970940'),(49,2,'面向切面编程,我成功路上的一个阶梯','pdab4f94e','AOP思想,AOP编程思想','面向切面编程,我成功路上的一个阶梯',1,2,20,'2019-11-24 01:14:28','2019-11-24 01:18:35','<p style=\"white-space:normal;\">\r\n	本文是我自己的理解，有原文支撑该理论，起初认识AOP是七月在课程里解析到的，后面对该理论强化认知，发现百度上也有对此理论的论述。\r\n</p>\r\n<p style=\"white-space:normal;\">\r\n	参考链接\r\n</p>\r\n<p style=\"white-space:normal;\">\r\n	https://www.cnblogs.com/Wolfmanlq/p/6036019.html\r\n</p>\r\n<p style=\"white-space:normal;\">\r\n	https://www.cnblogs.com/ysyn/p/5579917.html\r\n</p>','面向切面编程,我成功路上的一个阶梯','```\r\n七月真是个好人啦，他深入的讲解了AOP思想，我对AOP也是有了一些认识，希望以后用到开发中去。\r\n```\r\n1、假设你开了一家电影院，你的客人来你的电影院看电影，每个人都拿了一张你售出的电影票，你会不会为每个人都配一个检票员呢？\r\n很显然，你会在影厅的外面设一个统一检票口。\r\n这就是AOP，准确的说，他不是一种代码，和MVC有所不同，他没有实实在在的存在，只是一种思想。\r\n用途是方方面面的，如构建验证。\r\n![](/static/uploads/images/20180729192051d0e416a742d845b09c7fe13e834afc4f.png)\r\n\r\n在我日常的开发当中，耦合度不要太高，容易出现 牵一发，动全身的恶果，我在上一个项目中深受其害，防止这个问题，最好的方法就是功能于功能之间不要太AOP了，验证函数、数据库操作，也尽量但功能隔离','<pre><code>七月真是个好人啦，他深入的讲解了AOP思想，我对AOP也是有了一些认识，希望以后用到开发中去。\r\n</code></pre><p>1、假设你开了一家电影院，你的客人来你的电影院看电影，每个人都拿了一张你售出的电影票，你会不会为每个人都配一个检票员呢？<br>很显然，你会在影厅的外面设一个统一检票口。<br>这就是AOP，准确的说，他不是一种代码，和MVC有所不同，他没有实实在在的存在，只是一种思想。<br>用途是方方面面的，如构建验证。<br><img src=\"/static/uploads/images/20180729192051d0e416a742d845b09c7fe13e834afc4f.png\" alt=\"\"></p>\r\n<p>在我日常的开发当中，耦合度不要太高，容易出现 牵一发，动全身的恶果，我在上一个项目中深受其害，防止这个问题，最好的方法就是功能于功能之间不要太AOP了，验证函数、数据库操作，也尽量但功能隔离</p>\r\n','2970940'),(50,11,'学习方法，根据逻辑思维收费课程总结而来','p1084ef4c','学习方法，逻辑思维','学习方法，根据逻辑思维收费课程总结而来',1,2,20,'2019-11-24 01:21:14','2019-11-23 23:59:15','','学习在于细节，当你已经写过一两个项目，你就会在闲暇时间来鼓捣 基础知识','第一，自己整理，把所有信息过一遍脑子，比看报表印象深。 \r\n第二，手工整理一遍，大脑同步也在思考其它因素，反思一些决策，时间一长，投资水平也在提高。\r\n第三点，你可能会想不到。用手工处理信息，使他就不能同时研究很多项目，更不能随意决策，这样就只能关注长期回报。懂价值投资的人知道，这反而是收益最好的投资方式。\r\n第四点， 你看，和股市休市的道理一样，做决策的时候“踩刹车”不只是为了慢下来，而是让那些其它理性因素参与进来。\r\n','<p>第一，自己整理，把所有信息过一遍脑子，比看报表印象深。<br>第二，手工整理一遍，大脑同步也在思考其它因素，反思一些决策，时间一长，投资水平也在提高。<br>第三点，你可能会想不到。用手工处理信息，使他就不能同时研究很多项目，更不能随意决策，这样就只能关注长期回报。懂价值投资的人知道，这反而是收益最好的投资方式。<br>第四点， 你看，和股市休市的道理一样，做决策的时候“踩刹车”不只是为了慢下来，而是让那些其它理性因素参与进来。</p>\r\n','2970940'),(51,11,'学会了商业才有可能小有所成','p98287946','读书，逻辑思维，商业逻辑，生生不息的才叫生意','在一个充满不确定性的经济环境下，怎样通过创新让企业来应对内部条件和外部环境的变化？',1,1,20,'2019-11-24 01:25:19','2019-11-23 23:59:15','','在一个充满不确定性的经济环境下，怎样通过创新让企业来应对内部条件和外部环境的变化？','商业是我们这个文明的本质，所有的技术都是为商业服务的，商业又是服务于衣食住行和娱乐这几个部分。\r\n\r\n在一个充满不确定性的经济环境下，怎样通过创新让企业来应对内部条件和外部环境的变化？北京大学汇丰商学院副院长魏炜在第二届“知室·共生课堂”演讲中，分享了他对企业商业模式创新的洞察。微信公众号“春暖花开”发表了他的演讲全文。\r\n魏炜认为，现在的企业竞争主要是以它们为中心的生态系统的竞争。生态系统有很多不同类型，以小米为例，小米把零售的生态系统的基本元素、硬件生产的生态系统的角色和互联网服务的角色重新组合起来，构造了一个新的生态系统类型。\r\n基于这种生态系统的竞争，魏炜提出，企业想要实现商业模式上的创新，有四个途径：设界、补缺、觅新和重构。\r\n第一个途径是设界。设界是解决生态系统里面所有资源的效率问题。设界的具体做法很明确也很简单，就是把生态系统当中的有些角色，以前不是你做的，现在变成你做的，或有些以前是你做，现在交给别人去做。魏炜以名创优品为例，这是大家都很熟悉的独角兽企业。名创优品就是把零售商一般不做的设计角色由自己来做。再比如说海澜之家，海澜之家把服装品牌商一般都会做的设计角色交给供应商来做，这就是所谓的设界。\r\n第二个是重构。重构是通过生态系统当中每一个主体的交易结构的变化，让生态系统的结构发生大变化，最后创造价值。比方说改变盈利模式，像拼多多就是把电商的分成模式、价差模式改成团购模式，把交易方式从“搜索”方式变成“社交”方式，这就是结构的变化。\r\n第三个是觅新。觅新是在生态系统当中或者生态系统之外，找到不一样的新资源，这个资源能让生态系统创造价值的能力更强。具体做法是在生态系统内把那些没有进入到价值变现过程的资源找出来，可以通过新的交易结构设计，让它产生价值。当然也包括生态系统之外，别的行业、新的技术带来的一些资源，让这个生态系统更有价值。\r\n第四个是补缺。补缺是完善生态系统的结构，就是它的角色要完善。每一个生态系统不可能一开始就是很完备的，比方说手机行业，在生产配件、开发软件的时候，如果想让不同的企业之间能协作顺畅，那么可能需要一个联盟角色，让这些企业能够对接的更方便。也就是弥补生态系统中缺失的角色，通过这种方式来让生态系统创造更多的价值。\r\n魏炜总结，这四个途径本质上都是通过改变自己，来让主体能够应对各种可能的风险和变化。以上就是北大汇丰商学院副院长分享的商业模式创新的四个途径，希望对你有启发。','<p>商业是我们这个文明的本质，所有的技术都是为商业服务的，商业又是服务于衣食住行和娱乐这几个部分。</p>\r\n<p>在一个充满不确定性的经济环境下，怎样通过创新让企业来应对内部条件和外部环境的变化？北京大学汇丰商学院副院长魏炜在第二届“知室·共生课堂”演讲中，分享了他对企业商业模式创新的洞察。微信公众号“春暖花开”发表了他的演讲全文。<br>魏炜认为，现在的企业竞争主要是以它们为中心的生态系统的竞争。生态系统有很多不同类型，以小米为例，小米把零售的生态系统的基本元素、硬件生产的生态系统的角色和互联网服务的角色重新组合起来，构造了一个新的生态系统类型。<br>基于这种生态系统的竞争，魏炜提出，企业想要实现商业模式上的创新，有四个途径：设界、补缺、觅新和重构。<br>第一个途径是设界。设界是解决生态系统里面所有资源的效率问题。设界的具体做法很明确也很简单，就是把生态系统当中的有些角色，以前不是你做的，现在变成你做的，或有些以前是你做，现在交给别人去做。魏炜以名创优品为例，这是大家都很熟悉的独角兽企业。名创优品就是把零售商一般不做的设计角色由自己来做。再比如说海澜之家，海澜之家把服装品牌商一般都会做的设计角色交给供应商来做，这就是所谓的设界。<br>第二个是重构。重构是通过生态系统当中每一个主体的交易结构的变化，让生态系统的结构发生大变化，最后创造价值。比方说改变盈利模式，像拼多多就是把电商的分成模式、价差模式改成团购模式，把交易方式从“搜索”方式变成“社交”方式，这就是结构的变化。<br>第三个是觅新。觅新是在生态系统当中或者生态系统之外，找到不一样的新资源，这个资源能让生态系统创造价值的能力更强。具体做法是在生态系统内把那些没有进入到价值变现过程的资源找出来，可以通过新的交易结构设计，让它产生价值。当然也包括生态系统之外，别的行业、新的技术带来的一些资源，让这个生态系统更有价值。<br>第四个是补缺。补缺是完善生态系统的结构，就是它的角色要完善。每一个生态系统不可能一开始就是很完备的，比方说手机行业，在生产配件、开发软件的时候，如果想让不同的企业之间能协作顺畅，那么可能需要一个联盟角色，让这些企业能够对接的更方便。也就是弥补生态系统中缺失的角色，通过这种方式来让生态系统创造更多的价值。<br>魏炜总结，这四个途径本质上都是通过改变自己，来让主体能够应对各种可能的风险和变化。以上就是北大汇丰商学院副院长分享的商业模式创新的四个途径，希望对你有启发。</p>\r\n','2970940'),(52,11,'周末写作 --抖音，你真的会玩吗？','p374a554d','抖音机器学习推荐每个人的都不一样，抖音世界卧虎藏龙','有人看到抖音可以卖东西，有人看到抖音可以交朋友，也有人看到抖音可以学习，您呢？',1,2,20,'2019-11-24 01:26:59','2019-11-23 23:59:15','','有人看到抖音可以卖东西，有人看到抖音可以交朋友，也有人看到抖音可以学习，您呢？','在编程过程中会遇到一些瓶颈，就是我知道怎么写通一段程序，却不知道这段程序在现实生活中到底有什么用？\r\n\r\n于是，我也学我的老婆每天都看啊抖音啦，我的抖音和她的抖音可是不一样。我先说说她的抖音推荐有些啥：她的都是猫哇、狗哇，其中最多的还是教怎么化妆，穿搭的，那是她关注的东西内容。\r\n\r\n那我该关注啥呢？我要关注营销，所以我的抖音里都是说这种内容的，你可别以为他们都没用哇，以为是人家坐在保安室里，对着摄像头一通说，就发出来给你看了。不信你自己对着摄像头说两句？\r\n\r\n所以，把人家的努力看成不经意是不对的，所以我们要认真学习，只要别人说的有内涵。\r\n\r\n那么今天，我就分享一段，这是抖音里一个叫小诸葛的说的，说这几个活动，那么更优\r\n\r\n1. 分享赚钱\r\n2. 砍价\r\n3. 拼团\r\n4. 第一个评论100字的有重赏\r\n\r\n高手在民间，观点我看到了很多，这里不多介绍，且说我看完评论，综合我自己的分析，得到的解析。\r\n\r\n我以前没想过这个事情，就是你做的电商项目，看似很完美，咋就没人来用呢？答案是编程的工程师对商业本质的透析不够，理解商业本质，你就可以做出上面的几个功能点来，并且业务逻辑才能被实现。\r\n\r\n我们先不讨论这几个功能如何实现，我们来思考一下哪一种效果最优？有没有适用场景？\r\n\r\n如果开发了一款程序，是用于线下活动的，我觉得应该分是客户群是否是相关的熟人关系！如果是，那么就可以用前三个功能点。如果是客户与客户之间是陌生客户的话，那么第四点可能比较好用。\r\n不管是分享，还是砍价，还是拼团，他都是熟人社交，有社交，就有电商，当然不能搞像传销一样的商业模式啊，害人害己。\r\n陌生客户往往把评论看成是她购买该商品的重要参考数据。\r\n\r\n\r\n我在里面还学了很多东西，今天就先写这么多哈，记得把自己的抖音设置一个60分钟的时间限制，不然他会把你工作的时间全部拉进去消耗掉。','<p>在编程过程中会遇到一些瓶颈，就是我知道怎么写通一段程序，却不知道这段程序在现实生活中到底有什么用？</p>\r\n<p>于是，我也学我的老婆每天都看啊抖音啦，我的抖音和她的抖音可是不一样。我先说说她的抖音推荐有些啥：她的都是猫哇、狗哇，其中最多的还是教怎么化妆，穿搭的，那是她关注的东西内容。</p>\r\n<p>那我该关注啥呢？我要关注营销，所以我的抖音里都是说这种内容的，你可别以为他们都没用哇，以为是人家坐在保安室里，对着摄像头一通说，就发出来给你看了。不信你自己对着摄像头说两句？</p>\r\n<p>所以，把人家的努力看成不经意是不对的，所以我们要认真学习，只要别人说的有内涵。</p>\r\n<p>那么今天，我就分享一段，这是抖音里一个叫小诸葛的说的，说这几个活动，那么更优</p>\r\n<ol>\r\n<li>分享赚钱</li><li>砍价</li><li>拼团</li><li>第一个评论100字的有重赏</li></ol>\r\n<p>高手在民间，观点我看到了很多，这里不多介绍，且说我看完评论，综合我自己的分析，得到的解析。</p>\r\n<p>我以前没想过这个事情，就是你做的电商项目，看似很完美，咋就没人来用呢？答案是编程的工程师对商业本质的透析不够，理解商业本质，你就可以做出上面的几个功能点来，并且业务逻辑才能被实现。</p>\r\n<p>我们先不讨论这几个功能如何实现，我们来思考一下哪一种效果最优？有没有适用场景？</p>\r\n<p>如果开发了一款程序，是用于线下活动的，我觉得应该分是客户群是否是相关的熟人关系！如果是，那么就可以用前三个功能点。如果是客户与客户之间是陌生客户的话，那么第四点可能比较好用。<br>不管是分享，还是砍价，还是拼团，他都是熟人社交，有社交，就有电商，当然不能搞像传销一样的商业模式啊，害人害己。<br>陌生客户往往把评论看成是她购买该商品的重要参考数据。</p>\r\n<p>我在里面还学了很多东西，今天就先写这么多哈，记得把自己的抖音设置一个60分钟的时间限制，不然他会把你工作的时间全部拉进去消耗掉。</p>\r\n','2970940'),(53,11,'利用MVP理论来建立自己的开发思路','p9928df40','开发思路，产品设计，产品运营思路','在入行的初期，我们都是无头苍蝇，但是，只要想做出更出色的产品，就得有方法了，本文介绍一个概念----MVP',1,1,20,'2019-11-24 01:29:29','2019-11-23 23:59:15','<span style=\"color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">本文参考资料来源于互联网</span><br style=\"box-sizing:border-box;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\" />\r\n<br style=\"box-sizing:border-box;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\" />\r\n<span style=\"color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">1、http://www.woshipm.com/pmd/447678.html</span><br style=\"box-sizing:border-box;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\" />\r\n<br style=\"box-sizing:border-box;color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\" />\r\n<span style=\"color:#333333;font-family:&quot;font-size:14px;white-space:normal;background-color:#FFFFFF;\">2、https://learnku.com/courses/laravel-shop/5.8/development-of-electric-business-project/4216</span>','在入行的初期，我们都是无头苍蝇，但是，只要想做出更出色的产品，就得有方法了，本文介绍一个概念----MVP','我们首先介绍的是MVP是什么意思？MVP是Minimum Viable Product 的简称，中文意思就是最小化可行性产品，换句话说就是对于一个产品来说，哪些功能是必不可少的呢？\r\n\r\n​    那么如何得到这个最小可行性产品呢？\r\n\r\n一个产品你需要确定他的大方向，例如咱们要做一个电商购物系统的产品。电商产品是供用户购买商品的地方，产品存在的核心价值就是[用户购买商品]。那首先，用户、商品、订单、支付都是必不可少的。\r\n\r\n用户的服务、优惠券、购物车挽回这些功能都不是购物流程中必备的一环，属于附加属性，锦上添花的功能。我们在设计项目时，应该优先完成基础的功能开发，让流程尽快跑起来，然后快速迭代出这些附加功能。\r\n\r\nWEB开发领域是一个速度至上的领域，最小产品功能先上，测试的工作量也不会太大，不能憋大招，一上线就是一大堆的功能，复杂度增加的是无限的开发和调错时间，项目上线遥遥无期。另一方面，用户能够在最短的时间内接触到产品，产品经理也可以尽快的得到用户的反馈，及时调整产品策略，这样产品才会更接近于成功，这是一个多赢的方案。\r\n\r\n并且，这个思路也与敏捷开发的思路不谋而合：\r\n\r\n```\r\n敏捷开发即是以用户的需求为进化核心，采用迭代、循序渐进的方式进行开发\r\n```\r\n\r\n## 总结\r\n\r\n那么我们有了这个概念，我们应该怎么面对平时的产品开发呢？\r\n\r\n首先我们根据项目需求表立项，当然也可以直接拿着需求文档来做以下操作：\r\n\r\n1. 确定我们的最小化可行性产品\r\n2. 确定哪些是附加功能\r\n3. 我们需要确定功能模块的开发优先级\r\n4. 确定我们的产品开发的初步迭代计划\r\n5. 对项目功能模块的分解进行开发\r\n6. 同时编写好软件的开发文档\r\n7. 写完的功能自测\r\n\r\n上述总结只说明的开发部分，上线运营的话题未提及。\r\n\r\n','<p>我们首先介绍的是MVP是什么意思？MVP是Minimum Viable Product 的简称，中文意思就是最小化可行性产品，换句话说就是对于一个产品来说，哪些功能是必不可少的呢？</p>\r\n<p>​    那么如何得到这个最小可行性产品呢？</p>\r\n<p>一个产品你需要确定他的大方向，例如咱们要做一个电商购物系统的产品。电商产品是供用户购买商品的地方，产品存在的核心价值就是[用户购买商品]。那首先，用户、商品、订单、支付都是必不可少的。</p>\r\n<p>用户的服务、优惠券、购物车挽回这些功能都不是购物流程中必备的一环，属于附加属性，锦上添花的功能。我们在设计项目时，应该优先完成基础的功能开发，让流程尽快跑起来，然后快速迭代出这些附加功能。</p>\r\n<p>WEB开发领域是一个速度至上的领域，最小产品功能先上，测试的工作量也不会太大，不能憋大招，一上线就是一大堆的功能，复杂度增加的是无限的开发和调错时间，项目上线遥遥无期。另一方面，用户能够在最短的时间内接触到产品，产品经理也可以尽快的得到用户的反馈，及时调整产品策略，这样产品才会更接近于成功，这是一个多赢的方案。</p>\r\n<p>并且，这个思路也与敏捷开发的思路不谋而合：</p>\r\n<pre><code>敏捷开发即是以用户的需求为进化核心，采用迭代、循序渐进的方式进行开发\r\n</code></pre><h2 id=\"h2-u603Bu7ED3\"><a name=\"总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>总结</h2><p>那么我们有了这个概念，我们应该怎么面对平时的产品开发呢？</p>\r\n<p>首先我们根据项目需求表立项，当然也可以直接拿着需求文档来做以下操作：</p>\r\n<ol>\r\n<li>确定我们的最小化可行性产品</li><li>确定哪些是附加功能</li><li>我们需要确定功能模块的开发优先级</li><li>确定我们的产品开发的初步迭代计划</li><li>对项目功能模块的分解进行开发</li><li>同时编写好软件的开发文档</li><li>写完的功能自测</li></ol>\r\n<p>上述总结只说明的开发部分，上线运营的话题未提及。</p>\r\n','2970940'),(54,11,'高并发网站架构设计笔记','p381ccc4b','网站架构,网站高性能如何实现?','所有的架构设计都离不开业务本身,所以在应用的时候需要有所取舍,为了不同阶段的发展,来研发升级不同的集群结构.但是,你的底层开发,是必须要在一开始就要想好你的架构的,以后的升级不必伤筋动骨.正所谓麻雀虽小,五脏俱全啦!',1,1,20,'2019-11-24 01:31:39','2019-11-23 23:59:15','','所有的架构设计都离不开业务本身,所以在应用的时候需要有所取舍,为了不同阶段的发展,来研发升级不同的集群结构.','### 架构思想笔记\r\n\r\n**曾经有过几次架构的机会,一直都做的不是很理想,在前面写本博客的程序时就采用了一个很LOW的方法,但是又不得不接受它.现在的架构有所优化哈,这里把我一些优化的经历记录下来.**\r\n\r\n​		 首先,我是有学习过一些技术工程师的文章的,对于这篇文章提及到的关键字,都是有理论依据的,在写这篇文章的时候已经忘记是哪几篇了,这里只是顺便提及一下.\r\n\r\n​		对于一个可扩展性的系统来说,无论这个系统写的有多小,你都必须要注意以下几点:\r\n\r\n1. 分布式\r\n2. 稀缺资源的缓存\r\n3. 数据库优化\r\n4. 消息队列\r\n\r\n一 分布式\r\n\r\n​        所有的操作都是围绕这一目标来展开的,我把承接用户访问的服务器理解为响应服务器.如果你的数据库,静态资源,缓存等都在响应服务器上的,你可能会出现什么情况呢?\r\n\r\n1. 用户访问速度慢\r\n2. 用户访问速度慢\r\n3. 用户访问速度慢\r\n\r\n​        当然你也可以怀疑是自己的应用代码写的太渣导致的慢,但你不可否认,用户访问的时候,是因为loading 你的css,js,图片等资源时耗费了大部分时间,如果能在开发工具里看到你的脚本确实够慢,你才回去看你的代码是否有问题.当然,你可能很肯定,你的代码没问题.对于代码问题,本文不想提及太多,因为代码问题是一个日积月累的过程.\r\n\r\n​		那么你需要考虑的就是怎么将你的应用的各种依赖给它鼓捣明白\r\n\r\n二 静态的和耗费读写时间的稀缺资源\r\n\r\n你应该明白,如果要实现分布式,一些静态资源是不能和响应服务器放在同一个地方的.例如:css,js,images,videos等.这些文件通常会被存放到一个单独的地方,如static.motkit.com,然后通过CDN缓存起来,这样,你的用户就可以以最快的速度拿到你的样式文件和特效文件以及图片资源等.\r\n\r\n​		同时,比较耗费性能的是你的数据库查询,解决数据库查询问题,永远是最重要的,目标就是不让你的用户接触你的数据库查询,除非他已经得到你的许可(客户需要下单并胜利在望的时候).其他的查询操作,你不应该让他进来查数据库.这里通常是用数据库缓存来搞定的,并且进一步通过Redis,memecach等来缓存起来.对于让用户胜利在望,我想应该要用到消息队列,这里不展开讲哈,我只想把这个事情说明白.\r\n\r\n​		你的用户的Session管理也会被从存储在缓存服务器中,你需要在分布式响应服务器里共用一套Session是吧,总不能让他每刷新一次,就极有可能让他重新登陆一次是吧.他通常用Redis解决,以后我再抽机会展开讲这块内容.\r\n\r\n三 数据库优化\r\n\r\n​		数据库的性能很大程度上干扰了系统性能,主要是体现在读写操作上,一个嵌套查询就是几秒甚至几十秒.再有就是类似于查询10G以上的单表数据,你可以用分页来解决,但你不能减少数据库查询操作次数.\r\n\r\n​		这就有了数据库缓存,可以将一些数据对象缓存到专门的地方,来加快用户查询速度,与其说查询,还不如说是在缓存里直接获取.\r\n\r\n​		有了缓存,就必然会有数据不同步的问题,这个可以用计划任务(延迟任务)来解决这个问题哈,对于延迟任务/计划任务,这篇文章不会展开写,内容太多,再说我这技术能力也有限.\r\n\r\n​		读写分离在数据库性能优化当中是非常重要的手段之一,在流量稍微大点的网站就需要部署读写分离.\r\n\r\n​		数据库集群,在公司业务小的时候可以不集群,但是随之营业水平上升,必定会有集群产生.\r\n\r\n四 消息队列\r\n\r\n​		在电商项目中,消息队列尤为重要,因为你要做秒杀功能的话,如果没有消息队列支撑,你的数据库可能会在几秒钟内崩溃.\r\n\r\n​		首先,你要模拟一遍用户行为,假设你的站点有一个商品正在秒杀,秒杀库存是1000个,你的活动力度又特别大,那么就会有超过1000个人来参与你的秒杀活动,2000个用户够不够?5000个用户够不够?10000个呢?\r\n\r\n​		好了,你应该明白我的意思了,只有1000个用户能顺利拿到订单并支付,其他人都是拿不到订单,付不了款的.那么剩下的人会怎么做呢?那就是重试,每一个重试都会查库存,这么多人查库存,你想象一下,需要多大一台机器才能搞定它呢?甚至这不是光靠堆机器就能解决问题的,你的硬盘读写瓶颈在这里.\r\n\r\n​		那么,消息队列就来了,如果没库存了,就查都不用查,直接就显示没货了,这样不更好?\r\n\r\n\r\n\r\n这么说,可能不够形象,我特意画了一张图,这是我在拉钩APP的架构师课程里理解出来的一张图.它充分第体现了高性能网站的样子,蓝图,不管你用什么编程语言,最终呈现出来的都是长这个样子的.脱离了底层架构来讨论高并发,都是耍流氓.\r\n![](/static/uploads/images/201908271111118a6bbd9cdec8432cb8b351c41522fd51.png)\r\n\r\n终结:\r\n\r\n​		一个对用户友好,性能卓越的系统,一定不是某一个语言单独支撑起来的,他需要各种语言和软件共同支撑.例如静态资源就需要CDN来优化访问速度;数据库就需要数据库缓存和读写分离;响应服务器单台机器解决不了硬件并发性能,就需要用到nginx集群;因为集群,所以要用到分布式Redis来缓存Session.\r\n\r\n​		这上面的每一个部分都可以用一个集群来处理,如果业务量足够大的话.\r\n\r\n​		所有的架构设计都离不开业务本身,所以在应用的时候需要有所取舍,为了不同阶段的发展,来研发升级不同的集群结构.但是,你的底层开发,是必须要在一开始就要想好你的架构的,以后的升级不必伤筋动骨.正所谓麻雀虽小,五脏俱全啦!\r\n\r\n本文参考了诸多高人的意见,如有不足之处,请自行加工整理.','<h3 id=\"h3-u67B6u6784u601Du60F3u7B14u8BB0\"><a name=\"架构思想笔记\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>架构思想笔记</h3><p><strong>曾经有过几次架构的机会,一直都做的不是很理想,在前面写本博客的程序时就采用了一个很LOW的方法,但是又不得不接受它.现在的架构有所优化哈,这里把我一些优化的经历记录下来.</strong></p>\r\n<p>​         首先,我是有学习过一些技术工程师的文章的,对于这篇文章提及到的关键字,都是有理论依据的,在写这篇文章的时候已经忘记是哪几篇了,这里只是顺便提及一下.</p>\r\n<p>​        对于一个可扩展性的系统来说,无论这个系统写的有多小,你都必须要注意以下几点:</p>\r\n<ol>\r\n<li>分布式</li><li>稀缺资源的缓存</li><li>数据库优化</li><li>消息队列</li></ol>\r\n<p>一 分布式</p>\r\n<p>​        所有的操作都是围绕这一目标来展开的,我把承接用户访问的服务器理解为响应服务器.如果你的数据库,静态资源,缓存等都在响应服务器上的,你可能会出现什么情况呢?</p>\r\n<ol>\r\n<li>用户访问速度慢</li><li>用户访问速度慢</li><li>用户访问速度慢</li></ol>\r\n<p>​        当然你也可以怀疑是自己的应用代码写的太渣导致的慢,但你不可否认,用户访问的时候,是因为loading 你的css,js,图片等资源时耗费了大部分时间,如果能在开发工具里看到你的脚本确实够慢,你才回去看你的代码是否有问题.当然,你可能很肯定,你的代码没问题.对于代码问题,本文不想提及太多,因为代码问题是一个日积月累的过程.</p>\r\n<p>​        那么你需要考虑的就是怎么将你的应用的各种依赖给它鼓捣明白</p>\r\n<p>二 静态的和耗费读写时间的稀缺资源</p>\r\n<p>你应该明白,如果要实现分布式,一些静态资源是不能和响应服务器放在同一个地方的.例如:css,js,images,videos等.这些文件通常会被存放到一个单独的地方,如static.motkit.com,然后通过CDN缓存起来,这样,你的用户就可以以最快的速度拿到你的样式文件和特效文件以及图片资源等.</p>\r\n<p>​        同时,比较耗费性能的是你的数据库查询,解决数据库查询问题,永远是最重要的,目标就是不让你的用户接触你的数据库查询,除非他已经得到你的许可(客户需要下单并胜利在望的时候).其他的查询操作,你不应该让他进来查数据库.这里通常是用数据库缓存来搞定的,并且进一步通过Redis,memecach等来缓存起来.对于让用户胜利在望,我想应该要用到消息队列,这里不展开讲哈,我只想把这个事情说明白.</p>\r\n<p>​        你的用户的Session管理也会被从存储在缓存服务器中,你需要在分布式响应服务器里共用一套Session是吧,总不能让他每刷新一次,就极有可能让他重新登陆一次是吧.他通常用Redis解决,以后我再抽机会展开讲这块内容.</p>\r\n<p>三 数据库优化</p>\r\n<p>​        数据库的性能很大程度上干扰了系统性能,主要是体现在读写操作上,一个嵌套查询就是几秒甚至几十秒.再有就是类似于查询10G以上的单表数据,你可以用分页来解决,但你不能减少数据库查询操作次数.</p>\r\n<p>​        这就有了数据库缓存,可以将一些数据对象缓存到专门的地方,来加快用户查询速度,与其说查询,还不如说是在缓存里直接获取.</p>\r\n<p>​        有了缓存,就必然会有数据不同步的问题,这个可以用计划任务(延迟任务)来解决这个问题哈,对于延迟任务/计划任务,这篇文章不会展开写,内容太多,再说我这技术能力也有限.</p>\r\n<p>​        读写分离在数据库性能优化当中是非常重要的手段之一,在流量稍微大点的网站就需要部署读写分离.</p>\r\n<p>​        数据库集群,在公司业务小的时候可以不集群,但是随之营业水平上升,必定会有集群产生.</p>\r\n<p>四 消息队列</p>\r\n<p>​        在电商项目中,消息队列尤为重要,因为你要做秒杀功能的话,如果没有消息队列支撑,你的数据库可能会在几秒钟内崩溃.</p>\r\n<p>​        首先,你要模拟一遍用户行为,假设你的站点有一个商品正在秒杀,秒杀库存是1000个,你的活动力度又特别大,那么就会有超过1000个人来参与你的秒杀活动,2000个用户够不够?5000个用户够不够?10000个呢?</p>\r\n<p>​        好了,你应该明白我的意思了,只有1000个用户能顺利拿到订单并支付,其他人都是拿不到订单,付不了款的.那么剩下的人会怎么做呢?那就是重试,每一个重试都会查库存,这么多人查库存,你想象一下,需要多大一台机器才能搞定它呢?甚至这不是光靠堆机器就能解决问题的,你的硬盘读写瓶颈在这里.</p>\r\n<p>​        那么,消息队列就来了,如果没库存了,就查都不用查,直接就显示没货了,这样不更好?</p>\r\n<p>这么说,可能不够形象,我特意画了一张图,这是我在拉钩APP的架构师课程里理解出来的一张图.它充分第体现了高性能网站的样子,蓝图,不管你用什么编程语言,最终呈现出来的都是长这个样子的.脱离了底层架构来讨论高并发,都是耍流氓.<br><img src=\"/static/uploads/images/201908271111118a6bbd9cdec8432cb8b351c41522fd51.png\" alt=\"\"></p>\r\n<p>终结:</p>\r\n<p>​        一个对用户友好,性能卓越的系统,一定不是某一个语言单独支撑起来的,他需要各种语言和软件共同支撑.例如静态资源就需要CDN来优化访问速度;数据库就需要数据库缓存和读写分离;响应服务器单台机器解决不了硬件并发性能,就需要用到nginx集群;因为集群,所以要用到分布式Redis来缓存Session.</p>\r\n<p>​        这上面的每一个部分都可以用一个集群来处理,如果业务量足够大的话.</p>\r\n<p>​        所有的架构设计都离不开业务本身,所以在应用的时候需要有所取舍,为了不同阶段的发展,来研发升级不同的集群结构.但是,你的底层开发,是必须要在一开始就要想好你的架构的,以后的升级不必伤筋动骨.正所谓麻雀虽小,五脏俱全啦!</p>\r\n<p>本文参考了诸多高人的意见,如有不足之处,请自行加工整理.</p>\r\n','2970940'),(55,11,'每一个程序员都应该拿起书认真阅读','pfbdfa441','阅读,读书,程序员需要读书吗？','只要是还对自己有希望，就需要拿起书来阅读，因为你总是会被突如其来的各种思索和各种杂碎信息吸引，当你的能力撑不起野心的时候，当你想做事又不知道怎么做的时候，你应该拿书阅读，静静思考。',1,2,20,'2019-11-24 01:33:58','2019-11-23 23:59:15','','阅读,读书,程序员需要读书吗？','做一个合格的程序员应该从现在开始阅读并学习他，开启知识积累的旅程。\r\n从我自己说起，本身我是一个不愿意阅读并获得进一步知识的人。原因是因为以为读书并不能扩充自己的认知边界，现在的互联网这么厉害，还要读那么多书干嘛？事实上是，互联网的事跟你半毛钱关系都没有，所有的咨询，认知，都不会无缘无故的进入你的大脑而进一步提高你的认知水平。\r\n\r\n为什么这么说呢？\r\n\r\n1. 你不能准确的判断哪些知识是你应该获取的。例如：谢霆锋和张柏芝的故事跟你是毫无相关的信息，他只是占用了你的大脑咨询带宽；再比如：陈情令里谁是幕后黑手，也是一个极为烧脑但对你没有什么启发的咨询，他只会让你更累，让你觉得这个世界总是缺点什么（纵使我也在盲目的寻找答案，聂老弟才是幕后操纵者）；又比如：幕课网上的《JAVA亿万级电商项目实战教程》,如果你只是知道上面有这么回事，然后还知道自己想去了解一下，那么这个课程不管有多厉害，也终将与你擦肩而过。\r\n2. 你不能认真的看完每一篇于你有益的课程和文章。你可能会总是兴冲冲的购买了一门叫做《仿百度糯米电商实战》的视频课程，然后只翻开了头三章，后面完全没有兴趣阅读下去；或者是决心认真看完，但是自己从来不搭建一个实验环境跟着敲代码，正所谓 光看不练，百年不变。\r\n3. 你不能遏制你的奇怪想法。你总是想在吃饭的时候，刷抖音；刷抖音的时候想编程；在编程的时候，还想看新闻；在看新闻的时候，还想着，我今儿个想买一台跑步机回来边刷抖音边跑步。\r\n\r\n还记得小学的时候有一篇课文是《猴子下山》不？\r\n\r\n解决这个问题，其实大部分的稍有建树的程序员朋友都极力推荐认真读书，并且会给不同的职业方向的朋友推荐不同的方向的书单。这里我也收到了高手的推荐，并且让我有了一个愿意阅读的好习惯。\r\n\r\n但是你会发现，你根本不愿意阅读，这是很久以前的事情了，虽说现在也不愿意阅读，最起码我树立起了阅读意识。\r\n\r\n那么你为什么会不愿意阅读呢？\r\n\r\n因为这触发了你的学习神经，但你平时不是在学习状态，会让你感觉很痛苦，大脑会给出各种理由让你觉得这个学了没用，让你有足够的理由拒绝这门学习。\r\n\r\n有什么好的办法没有呢？\r\n\r\n我自己而言，我是这样处理的。\r\n\r\n1. 先找到一本书，阅读以下前言和作者续，还有的书有名人续，可以阅读以下。了解到这本书的创作环境，知识体系。在作者前面的铺垫和续章中可以阅读到作者的世界观，协作逻辑，有助于你理解书籍。\r\n2. 然后找到目录，初步预览书籍的章节逻辑，看是否有严谨的业务逻辑可言，一般手册类的书籍没有明显的业务逻辑可言（譬如thinkPHP的开发文档），这要自己先决定你是否真的需要这门知识来扩充自己的能力范围。\r\n3. 初步阅读章节里的观点性的段落，一般排版时会大写、加黑、艺术字，还有的会有上标备注，整理了解一下作者为什么这样写。当然你要无条件的接受作者的观点（这一步）。\r\n4. 然后再找到自己已知的兴趣点，看看作者的理论依据是什么，有哪些例证来佐证他的观点。\r\n5. 到这里，你基本上这本书就已经阅读完了，对于一些含金量比较高的书籍，还需要再次阅读，因为还有些观点是你不感兴趣和比较高深莫测的部分，再次找到，细细阅读，找证据，写文章来记录学习到的认知观点。\r\n\r\n好了，到这里你已经阅读完了一本书，并且你会有一定的收获，由于篇幅有限，这里不再对如何巩固学习到的观点和知识进行阐述，下回再接着写。\r\n\r\n','<p>做一个合格的程序员应该从现在开始阅读并学习他，开启知识积累的旅程。<br>从我自己说起，本身我是一个不愿意阅读并获得进一步知识的人。原因是因为以为读书并不能扩充自己的认知边界，现在的互联网这么厉害，还要读那么多书干嘛？事实上是，互联网的事跟你半毛钱关系都没有，所有的咨询，认知，都不会无缘无故的进入你的大脑而进一步提高你的认知水平。</p>\r\n<p>为什么这么说呢？</p>\r\n<ol>\r\n<li>你不能准确的判断哪些知识是你应该获取的。例如：谢霆锋和张柏芝的故事跟你是毫无相关的信息，他只是占用了你的大脑咨询带宽；再比如：陈情令里谁是幕后黑手，也是一个极为烧脑但对你没有什么启发的咨询，他只会让你更累，让你觉得这个世界总是缺点什么（纵使我也在盲目的寻找答案，聂老弟才是幕后操纵者）；又比如：幕课网上的《JAVA亿万级电商项目实战教程》,如果你只是知道上面有这么回事，然后还知道自己想去了解一下，那么这个课程不管有多厉害，也终将与你擦肩而过。</li><li>你不能认真的看完每一篇于你有益的课程和文章。你可能会总是兴冲冲的购买了一门叫做《仿百度糯米电商实战》的视频课程，然后只翻开了头三章，后面完全没有兴趣阅读下去；或者是决心认真看完，但是自己从来不搭建一个实验环境跟着敲代码，正所谓 光看不练，百年不变。</li><li>你不能遏制你的奇怪想法。你总是想在吃饭的时候，刷抖音；刷抖音的时候想编程；在编程的时候，还想看新闻；在看新闻的时候，还想着，我今儿个想买一台跑步机回来边刷抖音边跑步。</li></ol>\r\n<p>还记得小学的时候有一篇课文是《猴子下山》不？</p>\r\n<p>解决这个问题，其实大部分的稍有建树的程序员朋友都极力推荐认真读书，并且会给不同的职业方向的朋友推荐不同的方向的书单。这里我也收到了高手的推荐，并且让我有了一个愿意阅读的好习惯。</p>\r\n<p>但是你会发现，你根本不愿意阅读，这是很久以前的事情了，虽说现在也不愿意阅读，最起码我树立起了阅读意识。</p>\r\n<p>那么你为什么会不愿意阅读呢？</p>\r\n<p>因为这触发了你的学习神经，但你平时不是在学习状态，会让你感觉很痛苦，大脑会给出各种理由让你觉得这个学了没用，让你有足够的理由拒绝这门学习。</p>\r\n<p>有什么好的办法没有呢？</p>\r\n<p>我自己而言，我是这样处理的。</p>\r\n<ol>\r\n<li>先找到一本书，阅读以下前言和作者续，还有的书有名人续，可以阅读以下。了解到这本书的创作环境，知识体系。在作者前面的铺垫和续章中可以阅读到作者的世界观，协作逻辑，有助于你理解书籍。</li><li>然后找到目录，初步预览书籍的章节逻辑，看是否有严谨的业务逻辑可言，一般手册类的书籍没有明显的业务逻辑可言（譬如thinkPHP的开发文档），这要自己先决定你是否真的需要这门知识来扩充自己的能力范围。</li><li>初步阅读章节里的观点性的段落，一般排版时会大写、加黑、艺术字，还有的会有上标备注，整理了解一下作者为什么这样写。当然你要无条件的接受作者的观点（这一步）。</li><li>然后再找到自己已知的兴趣点，看看作者的理论依据是什么，有哪些例证来佐证他的观点。</li><li>到这里，你基本上这本书就已经阅读完了，对于一些含金量比较高的书籍，还需要再次阅读，因为还有些观点是你不感兴趣和比较高深莫测的部分，再次找到，细细阅读，找证据，写文章来记录学习到的认知观点。</li></ol>\r\n<p>好了，到这里你已经阅读完了一本书，并且你会有一定的收获，由于篇幅有限，这里不再对如何巩固学习到的观点和知识进行阐述，下回再接着写。</p>\r\n','2970940'),(56,11,'2019年上半年我都读了些什么书呢？','p456bf04f','阅读,万万没想到,算法图解','如果已经开始阅读，那么就请认真坚持下去，如果还没有开始，那么请立即开始。阅读使人能更加有方向感，更加有目标，更加富裕。',1,1,20,'2019-11-24 01:35:31','2019-11-23 23:59:15','','如果已经开始阅读，那么就请认真坚持下去，如果还没有开始，那么请立即开始。阅读使人能更加有方向感，更加有目标，更加富裕。','从自己沉下心来开始创作起已经足足3个年头了，逐渐也感觉力不从心了，原来以为可以通过购买一些视频课程就能够顺利完成项目的开发。实际上是自己涉猎的知识面不够广阔，导致一些东西写不出来。于是乎就下定决心开始阅读，还买了很多藏书，现在翻过的也就那么基本，那么我就来总结以下2019年我看过的那几本书。\r\n\r\n\r\n\r\n一、万万没想到\r\n\r\n这本书是万为纲老师的著作，典型的理工科思维，书名副标题就是用理工科思维理解世界。这个副标题恰如气氛，没有半点虚假成份。\r\n\r\n这本书给我最大的启发就是，不管给出什么意见和观点，你都需要用事实证据来佐证它是否在未来一段时间内是可以被称之为正确的。\r\n\r\n要作出一些成绩，就需要对某些特定的技能进行重点练习，书中称之为“刻意练习”。详见书本110页。强者之所以强，是因为别人在你看不见的地方付出了几倍甚至几十倍的努力。如果你之希望一夜之间成为专家，是不可能的。\r\n\r\n里面还有写道如何实现刻意练习，这都希望看到此文的人能够拿起书本阅读，才能有所收获。\r\n\r\n\r\n\r\n二、我懂你的知识焦虑\r\n\r\n这其实是罗振宇在优酷做逻辑思维视频节目的文字版本，如果你有辛看过的花，书中的内容大抵是知道一二了。\r\n\r\n我这里只写对我感触最深的两段话，就是写在目录上的第一章开头和第二章开头的两段话，不是鸡汤。\r\n\r\n1. 每个人都被空间和时间这两堵高墙死死地压缩在肉身的牢笼中无法自拔，唯一能够让我们越狱的就是知识（罗在爱奇异上有出过《知识就是力量》节目，也是非常好看的）\r\n\r\n2. 在互联网时代，每个人都越来越自由，每个人都可以把自己的禀赋和优势发挥出来。但是，唯一限制我们的是什么？是认知。\r\n\r\n我个人逐渐有点不喜欢罗的做法了，因为他做了大老板，有几百人指着他吃饭呢，所以很多事情都奔着挣钱去了，忽略了一些真正重要的事情。\r\n\r\n\r\n\r\n三、线性代数\r\n\r\n本书是由平冈和辛著作的给程序员的数学，通俗易懂（说到通俗易懂，也要看自己的悟性啦）。本书一直还在也阅读中，至今还没有看完，数学还是有些难度的，目前阅读进程到了向量与空间一章。\r\n\r\n\r\n\r\n四、算法图解\r\n\r\n这本书真的是对入门级的算法大有裨益，在本书中我彻底搞懂了二分查找算法。该算法的核心是查找数据的前提是需要排序的，就是说需要索引。同时还了解到对数知识。还了解到了所有的算法都与运行时间有关，设计算法的核心目标就是缩小运算时间。\r\n\r\n在普通的程序里用不到什么高深的算法，但是，涉及到大量数据查找时，你必须要认真考虑以下是不是可以随便写写就算了。例如程序开发到后期，mysql越跑越慢，是不是因为你没建索引呢？建索引其是就是优化了查找效率，优化手段就是二分查找。\r\n\r\n书中举了大量的图示，让你能正确理解算法的用途和好处。\r\n\r\n\r\n\r\n五、学会写作\r\n\r\n这本书是我等公交的时候在即刻APP上受到的推荐，只可惜呀这即刻被关停了。是阅读了这本书让我再次决心开始写作，并把每篇文章都写成有结构化的文章，能够顺利的表达我的看法，我以后如果跟人产生观点冲突，我就不会跟人家争的脸红脖子粗了，看观点请移步到我的博客里去。谈话之谈3句话能说明白并能产生共识的话题。\r\n\r\n本书把所有能用到的文体结构都介绍到了，并给出了合理的范文，还给出了鉴赏规则，请有兴趣的朋友能购买阅读。','<p>从自己沉下心来开始创作起已经足足3个年头了，逐渐也感觉力不从心了，原来以为可以通过购买一些视频课程就能够顺利完成项目的开发。实际上是自己涉猎的知识面不够广阔，导致一些东西写不出来。于是乎就下定决心开始阅读，还买了很多藏书，现在翻过的也就那么基本，那么我就来总结以下2019年我看过的那几本书。</p>\r\n<p>一、万万没想到</p>\r\n<p>这本书是万为纲老师的著作，典型的理工科思维，书名副标题就是用理工科思维理解世界。这个副标题恰如气氛，没有半点虚假成份。</p>\r\n<p>这本书给我最大的启发就是，不管给出什么意见和观点，你都需要用事实证据来佐证它是否在未来一段时间内是可以被称之为正确的。</p>\r\n<p>要作出一些成绩，就需要对某些特定的技能进行重点练习，书中称之为“刻意练习”。详见书本110页。强者之所以强，是因为别人在你看不见的地方付出了几倍甚至几十倍的努力。如果你之希望一夜之间成为专家，是不可能的。</p>\r\n<p>里面还有写道如何实现刻意练习，这都希望看到此文的人能够拿起书本阅读，才能有所收获。</p>\r\n<p>二、我懂你的知识焦虑</p>\r\n<p>这其实是罗振宇在优酷做逻辑思维视频节目的文字版本，如果你有辛看过的花，书中的内容大抵是知道一二了。</p>\r\n<p>我这里只写对我感触最深的两段话，就是写在目录上的第一章开头和第二章开头的两段话，不是鸡汤。</p>\r\n<ol>\r\n<li><p>每个人都被空间和时间这两堵高墙死死地压缩在肉身的牢笼中无法自拔，唯一能够让我们越狱的就是知识（罗在爱奇异上有出过《知识就是力量》节目，也是非常好看的）</p>\r\n</li><li><p>在互联网时代，每个人都越来越自由，每个人都可以把自己的禀赋和优势发挥出来。但是，唯一限制我们的是什么？是认知。</p>\r\n</li></ol>\r\n<p>我个人逐渐有点不喜欢罗的做法了，因为他做了大老板，有几百人指着他吃饭呢，所以很多事情都奔着挣钱去了，忽略了一些真正重要的事情。</p>\r\n<p>三、线性代数</p>\r\n<p>本书是由平冈和辛著作的给程序员的数学，通俗易懂（说到通俗易懂，也要看自己的悟性啦）。本书一直还在也阅读中，至今还没有看完，数学还是有些难度的，目前阅读进程到了向量与空间一章。</p>\r\n<p>四、算法图解</p>\r\n<p>这本书真的是对入门级的算法大有裨益，在本书中我彻底搞懂了二分查找算法。该算法的核心是查找数据的前提是需要排序的，就是说需要索引。同时还了解到对数知识。还了解到了所有的算法都与运行时间有关，设计算法的核心目标就是缩小运算时间。</p>\r\n<p>在普通的程序里用不到什么高深的算法，但是，涉及到大量数据查找时，你必须要认真考虑以下是不是可以随便写写就算了。例如程序开发到后期，mysql越跑越慢，是不是因为你没建索引呢？建索引其是就是优化了查找效率，优化手段就是二分查找。</p>\r\n<p>书中举了大量的图示，让你能正确理解算法的用途和好处。</p>\r\n<p>五、学会写作</p>\r\n<p>这本书是我等公交的时候在即刻APP上受到的推荐，只可惜呀这即刻被关停了。是阅读了这本书让我再次决心开始写作，并把每篇文章都写成有结构化的文章，能够顺利的表达我的看法，我以后如果跟人产生观点冲突，我就不会跟人家争的脸红脖子粗了，看观点请移步到我的博客里去。谈话之谈3句话能说明白并能产生共识的话题。</p>\r\n<p>本书把所有能用到的文体结构都介绍到了，并给出了合理的范文，还给出了鉴赏规则，请有兴趣的朋友能购买阅读。</p>\r\n','2970940'),(57,11,'为什么我们需要学会写作呢？因为你需要！','p1e770241','写作,不是记流水帐,写作文','你是否有机会做一下小项目的领头人？你是否有机会独立的上台与朋友分享？你是否有一种想说又说不出的困境？',1,2,20,'2019-11-24 01:37:02','2019-11-23 23:59:15','','你是否有机会做一下小项目的领头人？你是否有机会独立的上台与朋友分享？你是否有一种想说又说不出的困境？','你是否有机会做一下小项目的领头人？你是否有机会独立的上台与朋友分享？你是否有一种想说又说不出的困境？\r\n\r\n其实，这就是为什么写作的原因，写作是一种慢思考，写作是一种让你的知识沉淀的途径，写作是你深入思考的方法，写作也是你理顺接下来该干什么的指路灯。\r\n\r\n无论你是否是一名技术人员，你都应该学会写作。因为这是你向世界表达你的看法的重要途径，当你深入思考，需要把内容输出到文章的时候，其实又是另一种境界。我觉得吧，写作主要时传达你的思想和理清自己的思路。\r\n\r\n程序员通常都是理科出生，通常都不会愿意写作，但是你一旦养成了习惯，对编程和思想交流都是有好处的。\r\n\r\n1. 写文章和写代码的的共同之处在于都需要有清晰的逻辑，培养出更加优秀的逻辑思维能力。好的代码和好的文章，都一样：言简意赅，不混淆不清，不拖泥带水。\r\n2. 软件工程师写文章对有团队的公司协作开发尤为重要。不论是开会讨论，还是方案提议，还是代码注释，都要有清晰的逻辑，当你学会写作，你就能清晰的表达你的想法，你的意见，你的编程思路。从而使整个开发和产品能够顺利的运行下去。\r\n3. 你能轻松的对你的想法提出辨证。\r\n\r\n即使你的文章没有人阅读，写作的过程对你的能力提升都是大有裨益的。理顺思路，明确某个问题的看法，加强你对某个观点的信心，把乱七八糟的想法汇聚成可以被阅读的文字。\r\n\r\n价值是可以被延续的，因为你永远都不知道下一秒发生什么事情。会不会有志同道合的人原因与你一起共同进步。\r\n\r\n用什么写作？\r\n\r\n如果你自己写了Blog(博客)，请用博客的编辑器写，然后发布。还有一种就是，你应该使用markdown来写作。\r\n\r\n如果你有开通一些其他平台的博客系统，你也可以在上面写。\r\n\r\n在哪里写？\r\n\r\n1. 最传统的就是日记本啦，一般打草稿是一个不错的选择。但日记本有一个不好的地方就是，你很快就会思维混乱、刷微信、看抖音等因素乱了方寸，会草草的记成流水帐，没有太大的意义。\r\n2. 现在可以写的地方很多，有到云笔记，印象笔记等，可以插图，插音视频等多媒体元素，但是我估计大部分人都不会想到要插入这些元素\r\n3. 技术以及思想类的文章更多的应该发布到个人博客上去。','<p>你是否有机会做一下小项目的领头人？你是否有机会独立的上台与朋友分享？你是否有一种想说又说不出的困境？</p>\r\n<p>其实，这就是为什么写作的原因，写作是一种慢思考，写作是一种让你的知识沉淀的途径，写作是你深入思考的方法，写作也是你理顺接下来该干什么的指路灯。</p>\r\n<p>无论你是否是一名技术人员，你都应该学会写作。因为这是你向世界表达你的看法的重要途径，当你深入思考，需要把内容输出到文章的时候，其实又是另一种境界。我觉得吧，写作主要时传达你的思想和理清自己的思路。</p>\r\n<p>程序员通常都是理科出生，通常都不会愿意写作，但是你一旦养成了习惯，对编程和思想交流都是有好处的。</p>\r\n<ol>\r\n<li>写文章和写代码的的共同之处在于都需要有清晰的逻辑，培养出更加优秀的逻辑思维能力。好的代码和好的文章，都一样：言简意赅，不混淆不清，不拖泥带水。</li><li>软件工程师写文章对有团队的公司协作开发尤为重要。不论是开会讨论，还是方案提议，还是代码注释，都要有清晰的逻辑，当你学会写作，你就能清晰的表达你的想法，你的意见，你的编程思路。从而使整个开发和产品能够顺利的运行下去。</li><li>你能轻松的对你的想法提出辨证。</li></ol>\r\n<p>即使你的文章没有人阅读，写作的过程对你的能力提升都是大有裨益的。理顺思路，明确某个问题的看法，加强你对某个观点的信心，把乱七八糟的想法汇聚成可以被阅读的文字。</p>\r\n<p>价值是可以被延续的，因为你永远都不知道下一秒发生什么事情。会不会有志同道合的人原因与你一起共同进步。</p>\r\n<p>用什么写作？</p>\r\n<p>如果你自己写了Blog(博客)，请用博客的编辑器写，然后发布。还有一种就是，你应该使用markdown来写作。</p>\r\n<p>如果你有开通一些其他平台的博客系统，你也可以在上面写。</p>\r\n<p>在哪里写？</p>\r\n<ol>\r\n<li>最传统的就是日记本啦，一般打草稿是一个不错的选择。但日记本有一个不好的地方就是，你很快就会思维混乱、刷微信、看抖音等因素乱了方寸，会草草的记成流水帐，没有太大的意义。</li><li>现在可以写的地方很多，有到云笔记，印象笔记等，可以插图，插音视频等多媒体元素，但是我估计大部分人都不会想到要插入这些元素</li><li>技术以及思想类的文章更多的应该发布到个人博客上去。</li></ol>\r\n','2970940'),(58,11,'要开始阅读，应该掌握一种学习方法，从而使自己能够坚持下来--五步学习法','pf9cda84f','五步学习法,PQRST学习法,wones个人博客','如果你只有一腔热血，是学不了真本事的。你需要有一个清晰的目标，然后掌握一个学习秘法，谋定而后动（当然所有的事情并不是一切都准备好了才开始的，你需要自己去权衡，什么时候开始）',1,2,20,'2019-11-24 01:38:59','2019-11-23 23:59:15','','只有一腔热血是什么事情都办不成的，我们需要认真沉淀才有所成就','如果你只有一腔热血，是学不了真本事的。你需要有一个清晰的目标，然后掌握一个学习秘法，谋定而后动（当然所有的事情并不是一切都准备好了才开始的，你需要自己去权衡，什么时候开始）。\r\n\r\n通常常我们读一本书都是从头看到尾，从前言看到序，从第一章看到最后一章，逐字逐句的阅读。其实，这种做法是完全错误的，这应该怪罪那些初中老师们，一帮只会教书，却不会教人读书的人（观点不同，不予解释）。\r\n\r\n我在阅读学习之道时，就是用的这个方法。与其说是方法，还不如说这是乱无章法，漫无目的。\r\n\r\n那么，正确的阅读与学习方法到底是什么样的呢？\r\n\r\n有的，有个老外提出的PQRST 读书法，是世界上被公认的最有效的读书法。具体叫什么感觉不是很靠谱，但是这个理论却是非常有效和可靠的。这个人大家公认是 托马斯.史塔顿。百度百科和百度知识里都指认是他提出的，我们就姑且认为是他吧。\r\n\r\n这是个什么方法论呢？\r\n\r\nPQRST分为五步：Preview（预读）、Question(提出问题)、Read(阅读)、State(陈述)、Test(考察)。PQRST是这五个单词的首写字母缩写。\r\n\r\n一、Preview\r\n\r\n当你拿到一本书时，你不能吭哧吭哧的从头看到尾，你应该先看看作者的序言和名人写的推荐序，用以建立一个初步印象，然后再根据自己的理解快速预览书本目录，并针对自己的兴趣点翻阅到指定的章节，预览其一级标题（通常这些标题都是加黑、斜体等），确定有一定的认知基础。这一步时应该对书本快速阅读一遍,为第二步提供证据和素材。\r\n\r\n二、Question\r\n\r\n你应该需要发现书中提出的一些问题、书中的重点、作者想表达的观点。我们认同的观点有哪些，反对的有哪些，需要从书中学习哪些内容。\r\n\r\n三、Read\r\n\r\n当有了问题后，你还需要认真的通读全书，按照章节顺序来，查找书中的主要观点，必要的时候做上标记。\r\n\r\n四、State\r\n\r\n当你执行第三步时思考前面提出的为难题，看看在书中有哪些解决方案，哪些问题是没有答案的。没有解决的问题继续在书中寻找。看是否有做出回答。\r\n\r\n五、Test\r\n\r\n检验自己对书中的观点、意见、方法等的掌握情况，能不能写出读后感，和总结性文章，如果条件允许，你是否能够把学到的东西讲给你的同事、朋友听，看你能不能讲的明白，如果不明白，恢复到第三步，再来一次。直到你能把书本的重要知识结构能够复述出来。\r\n\r\n总结：\r\n\r\nPQRST 读书法其实是一个非常通用的方法论，你可以应用到学习的各个领域当中去。读一本书、写一段程序、准备一场演讲稿、准备一次分享会。\r\n\r\nPQRST读书法能充分调动读者的主观能动性，积极主动的接近学习目标，人自身的潜力是巨大的，一旦被激发出来，会有惊人的表现。\r\n\r\nPQRST读书法同样适用于学生的学习，可以让学生没有读书的厌恶感，能从书中找到真正的乐趣。\r\n\r\n2019年上半年我都读了些什么书呢？\r\n\r\n每一个程序员都应该拿起书认真阅读','<p>如果你只有一腔热血，是学不了真本事的。你需要有一个清晰的目标，然后掌握一个学习秘法，谋定而后动（当然所有的事情并不是一切都准备好了才开始的，你需要自己去权衡，什么时候开始）。</p>\r\n<p>通常常我们读一本书都是从头看到尾，从前言看到序，从第一章看到最后一章，逐字逐句的阅读。其实，这种做法是完全错误的，这应该怪罪那些初中老师们，一帮只会教书，却不会教人读书的人（观点不同，不予解释）。</p>\r\n<p>我在阅读学习之道时，就是用的这个方法。与其说是方法，还不如说这是乱无章法，漫无目的。</p>\r\n<p>那么，正确的阅读与学习方法到底是什么样的呢？</p>\r\n<p>有的，有个老外提出的PQRST 读书法，是世界上被公认的最有效的读书法。具体叫什么感觉不是很靠谱，但是这个理论却是非常有效和可靠的。这个人大家公认是 托马斯.史塔顿。百度百科和百度知识里都指认是他提出的，我们就姑且认为是他吧。</p>\r\n<p>这是个什么方法论呢？</p>\r\n<p>PQRST分为五步：Preview（预读）、Question(提出问题)、Read(阅读)、State(陈述)、Test(考察)。PQRST是这五个单词的首写字母缩写。</p>\r\n<p>一、Preview</p>\r\n<p>当你拿到一本书时，你不能吭哧吭哧的从头看到尾，你应该先看看作者的序言和名人写的推荐序，用以建立一个初步印象，然后再根据自己的理解快速预览书本目录，并针对自己的兴趣点翻阅到指定的章节，预览其一级标题（通常这些标题都是加黑、斜体等），确定有一定的认知基础。这一步时应该对书本快速阅读一遍,为第二步提供证据和素材。</p>\r\n<p>二、Question</p>\r\n<p>你应该需要发现书中提出的一些问题、书中的重点、作者想表达的观点。我们认同的观点有哪些，反对的有哪些，需要从书中学习哪些内容。</p>\r\n<p>三、Read</p>\r\n<p>当有了问题后，你还需要认真的通读全书，按照章节顺序来，查找书中的主要观点，必要的时候做上标记。</p>\r\n<p>四、State</p>\r\n<p>当你执行第三步时思考前面提出的为难题，看看在书中有哪些解决方案，哪些问题是没有答案的。没有解决的问题继续在书中寻找。看是否有做出回答。</p>\r\n<p>五、Test</p>\r\n<p>检验自己对书中的观点、意见、方法等的掌握情况，能不能写出读后感，和总结性文章，如果条件允许，你是否能够把学到的东西讲给你的同事、朋友听，看你能不能讲的明白，如果不明白，恢复到第三步，再来一次。直到你能把书本的重要知识结构能够复述出来。</p>\r\n<p>总结：</p>\r\n<p>PQRST 读书法其实是一个非常通用的方法论，你可以应用到学习的各个领域当中去。读一本书、写一段程序、准备一场演讲稿、准备一次分享会。</p>\r\n<p>PQRST读书法能充分调动读者的主观能动性，积极主动的接近学习目标，人自身的潜力是巨大的，一旦被激发出来，会有惊人的表现。</p>\r\n<p>PQRST读书法同样适用于学生的学习，可以让学生没有读书的厌恶感，能从书中找到真正的乐趣。</p>\r\n<p>2019年上半年我都读了些什么书呢？</p>\r\n<p>每一个程序员都应该拿起书认真阅读</p>\r\n','2970940'),(59,11,'基础知识之对数','p4d5bbc44','二分查找在编程中可以缩短运行时间，而对数就是理论依据','二分查找在编程中可以缩短运行时间，而对数就是理论依据',1,2,20,'2019-11-24 01:42:49','2019-11-23 23:59:15','','基础知识意味着你能走多远，学习算法对每一个人都很重要','我已经忘记了什么是对数，但我还记得什么是幂。\r\n\r\n>$$log_{10}100$$就相当于问了将多少个10相乘的结果是100\r\n\r\n其实，我应该再多写点东西的，因为这是老文章，所以我就不再添加，后来等我有一份稳定的收益，我就来金雕细琢我原来粗制滥造的东西。对输出的内容起码的标准','<p>我已经忘记了什么是对数，但我还记得什么是幂。</p>\r\n<blockquote>\r\n<p><span class=\"editormd-tex\">log_{10}100</span>就相当于问了将多少个10相乘的结果是100</p>\r\n</blockquote>\r\n<p>其实，我应该再多写点东西的，因为这是老文章，所以我就不再添加，后来等我有一份稳定的收益，我就来金雕细琢我原来粗制滥造的东西。对输出的内容起码的标准</p>\r\n','2970940'),(60,11,'三十岁的我，三十岁的老程序员（可能还不够老）','p4df96743','写作，程序员写作，老程序员不老','年老不一定是坏事，或许能得到更多',1,2,20,'2019-11-24 01:45:53','2019-11-23 23:59:15','','努力走到前面，然后保持时刻学习，才能走的更远','语速代表了一个人的耐心，三十岁的我懂得了耐心。\r\n\r\n十八岁，不懂耐心，错过了美好而平静的大学生活（当然家庭环境占据了主要的因素）。\r\n\r\n二十三岁，着急创业，在中关村整了一个大柜台，对自己的能力评估过高，第一次就这样被浪费了（或许应该多读读书，只要懂了，什么时候开始都不算晚）。\r\n\r\n二十八岁，不懂的耐心，以为做事情很容易，不耐烦评估市场环境，第二次创业失败（好歹知道了想要成就一番事业，需要依托大环境）。\r\n\r\n慢慢的，我开始自我繁星，确定是由于耐心不够，导致了很多问题。有些事情明明很清晰，却被自动忽略。\r\n\r\n学习上也是如此，没有耐心的学习简直糟糕透了，13年以前php已经学习了4年，可是结果什么都不会写。photoshop从毕业就开始学习，就是没有学会。总结原因，却是是耐心不够，有些问题必须要脚踏实地，一步一步的解决。\r\n\r\n时光如梭，30过了头了，有人成了大老板，有人成了富翁；有人学有所成，也有人驭人上百。除了靠一份执着，还有什么呢？耐心，耐心的积累自己的能力，知识，财富。\r\n\r\n耐心的学完一门课程，耐心的读完一本书，耐心的对待身边每一个人（想想真的好难）。\r\n\r\n从过去几年的知识积累中，我读过一篇文章，不知道出处了，也正是这些文章给予了我重新上路的勇气(其实，把时间尺度放大到50年，这些又算什么呢)。\r\n\r\n这里把我原来记录在手机便笺里的内容，重新温习一遍。\r\n\r\n保持耐心的方法\r\n\r\n1、情绪控制：难以控制情绪的时候，可以尝试数数，从一数到八。\r\n\r\n2、表情管理：恶劣的表情会伤人（孔子问孝篇里有说：色难），但是要实现真的好难阿。\r\n\r\n3、表达管理：降低语速，别一激动就加快语速，说再快也不可能表达得更清楚\r\n\r\n4、细节管理：例如在室内抽烟，随地吐痰会毁掉形象\r\n\r\n5、第三人称看自己：再遇到厌恶反感的事情时，想要发飙时，想象一下背后又一个镜头在看着你\r\n\r\n6、接纳与包容：这是耐心的真谛\r\n\r\n\r\n\r\n由于学习写作，初期写的没有头绪，没有章法，但我依然会坚持。','<p>语速代表了一个人的耐心，三十岁的我懂得了耐心。</p>\r\n<p>十八岁，不懂耐心，错过了美好而平静的大学生活（当然家庭环境占据了主要的因素）。</p>\r\n<p>二十三岁，着急创业，在中关村整了一个大柜台，对自己的能力评估过高，第一次就这样被浪费了（或许应该多读读书，只要懂了，什么时候开始都不算晚）。</p>\r\n<p>二十八岁，不懂的耐心，以为做事情很容易，不耐烦评估市场环境，第二次创业失败（好歹知道了想要成就一番事业，需要依托大环境）。</p>\r\n<p>慢慢的，我开始自我繁星，确定是由于耐心不够，导致了很多问题。有些事情明明很清晰，却被自动忽略。</p>\r\n<p>学习上也是如此，没有耐心的学习简直糟糕透了，13年以前php已经学习了4年，可是结果什么都不会写。photoshop从毕业就开始学习，就是没有学会。总结原因，却是是耐心不够，有些问题必须要脚踏实地，一步一步的解决。</p>\r\n<p>时光如梭，30过了头了，有人成了大老板，有人成了富翁；有人学有所成，也有人驭人上百。除了靠一份执着，还有什么呢？耐心，耐心的积累自己的能力，知识，财富。</p>\r\n<p>耐心的学完一门课程，耐心的读完一本书，耐心的对待身边每一个人（想想真的好难）。</p>\r\n<p>从过去几年的知识积累中，我读过一篇文章，不知道出处了，也正是这些文章给予了我重新上路的勇气(其实，把时间尺度放大到50年，这些又算什么呢)。</p>\r\n<p>这里把我原来记录在手机便笺里的内容，重新温习一遍。</p>\r\n<p>保持耐心的方法</p>\r\n<p>1、情绪控制：难以控制情绪的时候，可以尝试数数，从一数到八。</p>\r\n<p>2、表情管理：恶劣的表情会伤人（孔子问孝篇里有说：色难），但是要实现真的好难阿。</p>\r\n<p>3、表达管理：降低语速，别一激动就加快语速，说再快也不可能表达得更清楚</p>\r\n<p>4、细节管理：例如在室内抽烟，随地吐痰会毁掉形象</p>\r\n<p>5、第三人称看自己：再遇到厌恶反感的事情时，想要发飙时，想象一下背后又一个镜头在看着你</p>\r\n<p>6、接纳与包容：这是耐心的真谛</p>\r\n<p>由于学习写作，初期写的没有头绪，没有章法，但我依然会坚持。</p>\r\n','2970940'),(61,2,'终于还是忍不住要折腾一下webpack，将这笔记记录下来','p63cc5140','webpack，js打包工具','好记心不如烂博客，写下来后过段时间再来看一下，或许有更好的效果',1,2,20,'2019-11-24 01:48:46','2019-11-23 23:59:15','','好记心不如烂博客，写下来后过段时间再来看一下，或许有更好的效果','## 前段构建工具 Webpack\r\n\r\nwebpack是一个模块打包工具。什么意思呢？它将一对文件中的每个文件都作为一个模块，找出他们的依赖关系，将它们打包为可部署的静态资源。\r\n![](/static/uploads/images/20180703210550869d07a2a312480fa94d84e59edc16ca.png)\r\n\r\n下面通过例子来看看他是怎么使用的。\r\n\r\n## 安装\r\n新建 一个文件夹 <font color=\"red\">test-webpack</font>,进入文件夹\r\n```shell\r\ncd test-webpack\r\nnpm init -y\r\n```\r\n> npm init -y  命令会初始化一个 <font color=\"red\">package.json</font>文件。package.json主要是管理我们的依赖包，有三个地方需要注意\r\n\r\n```json\r\n{\r\n//这里可以定义一些脚本\r\n\"scripts\" : {\r\n\r\n    },\r\n//这里表示生产环境依赖的包，使用 npm install -S ... or npm install --save ... \r\n//安装的包都会放到这里，这两种方式是等价的。\r\n\"dependencies\":{\r\n\r\n    },\r\n//表示之在开发环境需要的包，使用 npm install -D ... 或者 npm install --save-dev ...\r\n//安装的包会放到这里，这两种方式是等价的\r\n\"devDependencies\":{\r\n\r\n    }\r\n}\r\n```\r\n执行安装一下webpack\r\n```shell\r\nnpm install webpack@3.3.0 --save-dev\r\n```\r\n下图有我安装的包\r\n> 只不过我学习时把所需要的包都装上了，文章是后写的\r\n\r\n![](/static/uploads/images/20180703214303d149970f6ff5497b8181bc211ff4f200.png)\r\n\r\n完成后，我们可以看到，package.json 中已经有了相应的配置。因为没有在全局安装，所以，只能这样运行：\r\n\r\n> node_modules/.bin/webpack\r\n\r\n![](/static/uploads/images/2018070321461863785059d6874bb0a2c54f2d7ad3548e.png)\r\n\r\n\r\n\r\n','<h2 id=\"h2--webpack\"><a name=\"前段构建工具 Webpack\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>前段构建工具 Webpack</h2><p>webpack是一个模块打包工具。什么意思呢？它将一对文件中的每个文件都作为一个模块，找出他们的依赖关系，将它们打包为可部署的静态资源。<br><img src=\"/static/uploads/images/20180703210550869d07a2a312480fa94d84e59edc16ca.png\" alt=\"\"></p>\r\n<p>下面通过例子来看看他是怎么使用的。</p>\r\n<h2 id=\"h2-u5B89u88C5\"><a name=\"安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>安装</h2><p>新建 一个文件夹 <font color=\"red\">test-webpack</font>,进入文件夹</p>\r\n<pre><code class=\"lang-shell\">cd test-webpack\r\nnpm init -y\r\n</code></pre>\r\n<blockquote>\r\n<p>npm init -y  命令会初始化一个 <font color=\"red\">package.json</font>文件。package.json主要是管理我们的依赖包，有三个地方需要注意</p>\r\n</blockquote>\r\n<pre><code class=\"lang-json\">{\r\n//这里可以定义一些脚本\r\n&quot;scripts&quot; : {\r\n\r\n    },\r\n//这里表示生产环境依赖的包，使用 npm install -S ... or npm install --save ... \r\n//安装的包都会放到这里，这两种方式是等价的。\r\n&quot;dependencies&quot;:{\r\n\r\n    },\r\n//表示之在开发环境需要的包，使用 npm install -D ... 或者 npm install --save-dev ...\r\n//安装的包会放到这里，这两种方式是等价的\r\n&quot;devDependencies&quot;:{\r\n\r\n    }\r\n}\r\n</code></pre>\r\n<p>执行安装一下webpack</p>\r\n<pre><code class=\"lang-shell\">npm install webpack@3.3.0 --save-dev\r\n</code></pre>\r\n<p>下图有我安装的包</p>\r\n<blockquote>\r\n<p>只不过我学习时把所需要的包都装上了，文章是后写的</p>\r\n</blockquote>\r\n<p><img src=\"/static/uploads/images/20180703214303d149970f6ff5497b8181bc211ff4f200.png\" alt=\"\"></p>\r\n<p>完成后，我们可以看到，package.json 中已经有了相应的配置。因为没有在全局安装，所以，只能这样运行：</p>\r\n<blockquote>\r\n<p>node_modules/.bin/webpack</p>\r\n</blockquote>\r\n<p><img src=\"/static/uploads/images/2018070321461863785059d6874bb0a2c54f2d7ad3548e.png\" alt=\"\"></p>\r\n','2970940'),(62,2,'js是我的薄弱环节，这次花几个月时间把它学习一下','p56c05845','es6版的js学习第一篇','真的是学无止境呀！你无论怎样努力，总会有你不熟悉的东西出现，那么你就必须要搞定他，或者至少在这个领域要有广度认知。',1,2,20,'2019-11-24 01:50:17','2019-11-23 23:59:15','','真的是学无止境呀！你无论怎样努力，总会有你不熟悉的东西出现，那么你就必须要搞定他，或者至少在这个领域要有广度认知。','## ECMAScript 和 JavaScript 的关系\r\n> 一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？\r\n\r\n> 要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。\r\n\r\n> 该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。\r\n\r\n> 因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）。日常场合，这两个词是可以互换的。\r\n\r\n引用原文，其实就是想说，这俩玩意其实就是一回事，前者是规矩，后者是规矩的产物。\r\n\r\n1、let\r\n和var一样，但是你要用它之前，要记住，要先声明变量，在使用他（好像我在使用是一般不会在后面才申明变量呀！）\r\n```js\r\n{\r\n  let a = 10;\r\n  var b = 1;\r\n}\r\n```\r\nES6入门的原文作者，有提到更多的例证，我也不是很懂，这里就用一个例子，后面附上原文，敬请翻阅。\r\n2、const\r\n这个好像我是第一次看到，在js的世界里，他可以声明一个不可变的变量，一旦被申明，即不可修改\r\n```js\r\nconst PI = 3.14;\r\nPI  //3.14\r\nPI = 3;\r\n// TypeError: Assignment to constant variable.\r\n```\r\n这说明，一旦声明就不能被改变；const 和let 一样，也只在自己的代码块内有效\r\n\r\n> if (true) {\r\n  const MAX = 5;\r\n}\r\nMAX // Uncaught ReferenceError: MAX is not defined\r\n\r\n>const foo = {};\r\n\r\n>// 为 foo 添加一个属性，可以成功\r\n>foo.prop = 123;\r\n>foo.prop // 123\r\n>// 将 foo 指向另一个对象，就会报错\r\n>foo = {}; // TypeError: \"foo\" is read-only\r\n>const 不是 不能改，只是变量名不能改吧，他内存保存的数据不得改动，可以执行添加，和编辑属性\r\n\r\n3、es6 引入了一个叫代码块的东西，上面的let 只在他的代码块内生效，跳出去即无法使用，这貌似是作用域的严格化呀（可能这么理解不是很对，以后有新认知来改正）\r\n\r\n4、ES6申明变量有6中方法\r\na.let\r\nb.const\r\nc.import\r\nd.class\r\n\r\n','<h2 id=\"h2-ecmascript-javascript-\"><a name=\"ECMAScript 和 JavaScript 的关系\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>ECMAScript 和 JavaScript 的关系</h2><blockquote>\r\n<p>一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？</p>\r\n<p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p>\r\n<p>该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。</p>\r\n<p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）。日常场合，这两个词是可以互换的。</p>\r\n</blockquote>\r\n<p>引用原文，其实就是想说，这俩玩意其实就是一回事，前者是规矩，后者是规矩的产物。</p>\r\n<p>1、let<br>和var一样，但是你要用它之前，要记住，要先声明变量，在使用他（好像我在使用是一般不会在后面才申明变量呀！）</p>\r\n<pre><code class=\"lang-js\">{\r\n  let a = 10;\r\n  var b = 1;\r\n}\r\n</code></pre>\r\n<p>ES6入门的原文作者，有提到更多的例证，我也不是很懂，这里就用一个例子，后面附上原文，敬请翻阅。<br>2、const<br>这个好像我是第一次看到，在js的世界里，他可以声明一个不可变的变量，一旦被申明，即不可修改</p>\r\n<pre><code class=\"lang-js\">const PI = 3.14;\r\nPI  //3.14\r\nPI = 3;\r\n// TypeError: Assignment to constant variable.\r\n</code></pre>\r\n<p>这说明，一旦声明就不能被改变；const 和let 一样，也只在自己的代码块内有效</p>\r\n<blockquote>\r\n<p>if (true) {<br>  const MAX = 5;<br>}<br>MAX // Uncaught ReferenceError: MAX is not defined</p>\r\n<p>const foo = {};</p>\r\n<p>// 为 foo 添加一个属性，可以成功<br>foo.prop = 123;<br>foo.prop // 123<br>// 将 foo 指向另一个对象，就会报错<br>foo = {}; // TypeError: “foo” is read-only<br>const 不是 不能改，只是变量名不能改吧，他内存保存的数据不得改动，可以执行添加，和编辑属性</p>\r\n</blockquote>\r\n<p>3、es6 引入了一个叫代码块的东西，上面的let 只在他的代码块内生效，跳出去即无法使用，这貌似是作用域的严格化呀（可能这么理解不是很对，以后有新认知来改正）</p>\r\n<p>4、ES6申明变量有6中方法<br>a.let<br>b.const<br>c.import<br>d.class</p>\r\n','2970940'),(63,2,'JS基础语法','p75571742','这次先手写，再键盘，薄弱的东西，用特殊方法来学习','这次先手写，再键盘，薄弱的东西，用特殊方法来学习',1,2,20,'2019-11-24 01:51:55','2019-11-23 23:59:15','','这次先手写，再键盘，薄弱的东西，用特殊方法来学习','**注意哇：这里提到的符号都是英文的，我刚开始写项目的时候经常遇到这个问题，请注意，文中有赘述的地方，但有的地方将不会再次提到**\r\n\r\n1、语法稍微宽松\r\n		以英文“；”结束\r\n		代码块用英文“{}”包起来\r\n```js\r\nfunction{\r\n		//todo:做你想做的事情\r\n}\r\n```\r\n> 不强调“;”结尾，但运行是会自动加上，\r\n> 如果你用webstorm 这类IDE来写代码，应该会提示你，又加入你有轻度强迫症，你一定会注意到的\r\n\r\n2、注释\r\n		用“//”注释代码\r\n		用“/*      */”注释调代码块\r\n> 一般用这种东西来写注释，推荐大家写注释，因为再过一段时间，你都不一定能阅读的懂你以前写的代码\r\n\r\n后面每三天更新一篇用于巩固知识\r\n','<p><strong>注意哇：这里提到的符号都是英文的，我刚开始写项目的时候经常遇到这个问题，请注意，文中有赘述的地方，但有的地方将不会再次提到</strong></p>\r\n<p>1、语法稍微宽松<br>        以英文“；”结束<br>        代码块用英文“{}”包起来</p>\r\n<pre><code class=\"lang-js\">function{\r\n        //todo:做你想做的事情\r\n}\r\n</code></pre>\r\n<blockquote>\r\n<p>不强调“;”结尾，但运行是会自动加上，<br>如果你用webstorm 这类IDE来写代码，应该会提示你，又加入你有轻度强迫症，你一定会注意到的</p>\r\n</blockquote>\r\n<p>2、注释<br>        用“//”注释代码<br>        用“/<em>      </em>/”注释调代码块</p>\r\n<blockquote>\r\n<p>一般用这种东西来写注释，推荐大家写注释，因为再过一段时间，你都不一定能阅读的懂你以前写的代码</p>\r\n</blockquote>\r\n<p>后面每三天更新一篇用于巩固知识</p>\r\n','2970940'),(64,11,'学习每个语言都需要搞懂他的数据类型，才好进行下一步的深度学习','pa78a154d','js有哪些数据类型,js数据类型','数据类型是每一个语言都需要重点介绍，并且在学习完基本操作之后就要学习的内容，我学西Python也是这么学的',1,2,20,'2019-11-24 01:54:45','2019-11-23 23:59:15','','数据类型是每一个语言都需要重点介绍，并且在学习完基本操作之后就要学习的内容，我学西Python也是这么学的','***打开天窗说亮话***\r\n在javascript中有数据类型有如下几种\r\n1、number\r\n2、string\r\n3、布尔类型\r\n4、数组\r\n5、对象\r\n6、变量\r\n这里 我看我能写多少吧，从第一个开始\r\nnumber，顾名思义就是可以用来计算的数字，可以进行加减乘除的数据类型\r\n如：\r\n```\r\n1+2; //3\r\n5-2; //3\r\n6/2; //3\r\n2*3; //6\r\n...\r\n\r\n```\r\n所有的语言都会有这个，重点在一个运算，取余。用 *%*来计算\r\n```\r\n10 % 3; // 1\r\n10.5 % 3; // 1.5\r\n```\r\n这个取余到底有啥子用呢？以后出一篇文章来写。\r\nstring,就是各种由字母和数字表示的数据，他是以单引号或者双引号阔起来的文本内容，对字符串的运算，javascript 的运算貌似不多，使用的时候要注意哇\r\n','<p><strong><em>打开天窗说亮话</em></strong><br>在javascript中有数据类型有如下几种<br>1、number<br>2、string<br>3、布尔类型<br>4、数组<br>5、对象<br>6、变量<br>这里 我看我能写多少吧，从第一个开始<br>number，顾名思义就是可以用来计算的数字，可以进行加减乘除的数据类型<br>如：</p>\r\n<pre><code>1+2; //3\r\n5-2; //3\r\n6/2; //3\r\n2*3; //6\r\n...\r\n</code></pre><p>所有的语言都会有这个，重点在一个运算，取余。用 <em>%</em>来计算</p>\r\n<pre><code>10 % 3; // 1\r\n10.5 % 3; // 1.5\r\n</code></pre><p>这个取余到底有啥子用呢？以后出一篇文章来写。<br>string,就是各种由字母和数字表示的数据，他是以单引号或者双引号阔起来的文本内容，对字符串的运算，javascript 的运算貌似不多，使用的时候要注意哇</p>\r\n','2970940'),(65,2,'thinkphp5 editor.md 如何使用','pd6775640','集成markdown,thinkphp5','本身连续一段时间都在整理js的知识的，后来在项目中要用到markdown，所以又跑来研究markdown了，沿用小袁同学的处理方式，采用了editor.md插件',1,2,20,'2019-11-24 02:00:23','2019-11-24 01:59:48','','本身连续一段时间都在整理js的知识的，后来在项目中要用到markdown','> 本身连续一段时间都在整理js的知识的，后来在项目中要用到markdown，所以又跑来研究markdown了，沿用小袁同学<sup>①</sup>的处理方式，采用了editor.md插件>的处理方式，采用了editor.md插件\r\n\r\n在百度上参考了诸多教程，发现都是每个写一截，要拼凑起来才能得到准确的使用方案，所以，我特意拼凑后再写成笔记，以供参考。\r\n\r\n我是用thinkphp5 来开发公司官方网站的后台的，产品内容这块非常合适使用markdown来存储数据，所以呢，就起心开始搞。\r\n1、准备东西哇\r\n到github<sup>②</sup>去下载最新的插件版本\r\n2、把插件解压后抽出要用的文件放进公共插件库\r\n这里是我存放的路径\r\n我把他存到 `public/static/lib` 里\r\n![](/static/uploads/images/20180810180857a85d09eb505542afb0e692584bbcf275.png)\r\n注意画红框的就是插件目录\r\n3、引入css文件及js文件\r\n![](/static/uploads/images/20180810181345ad221eb60542454fbc6454261f28a58c.png)\r\n![](/static/uploads/images/20180810181357a6ab708d721b41c4987cb1541ad9194d.png)\r\n上面我就不解释了，我要在add.html中使用markdown 我就在add.html中引入，为什么呢？\r\n自己猜去吧！\r\n`如果你不用的地方也加载进去的话，势必会影响loading的速度，你是想快点呢还是想慢点呢？`\r\n4、在想要用markdown的地方加上容器，我这个功能就加了两个\r\n`这里引申的知识是在一个页面里实例化多个markdown编辑器`\r\n待会我解释实例化时再来说多个编辑器如何处理。\r\n![](/static/uploads/images/20180810181913a59b7e83945e46c191913468a636bed4.png)\r\n![](/static/uploads/images/201808101819236efb11afe68d48679b1fd4365601c1e1.png)\r\n嗯，其实刚开始我还想把Html和markdown一起存的，后来我的同事小袁说，没必要，你存储了markdown，给前端去渲染，还好点。\r\n	a、实例化时 他的name值可以随便改\r\n	b、不需要自己写得自己都搞不明白了，要简洁\r\n```\r\n<div id=\"features\">\r\n      <textarea name=\'features\' style=\"display:none;\"></textarea>\r\n</div>\r\n```\r\n这样就够了\r\n5、实例化markdown，一听见实例化 是不是就心里嘚了一下？其实很简单的\r\n```\r\nvar Editor;\r\n    $(function () {\r\n        Editor = editormd(\"content\", {\r\n            width: \"100%\",  //宽度设置\r\n            height: 320,    //高度设置\r\n            path: \"__STATIC__/lib/markdown/lib/\",   //这个东西很重要，他是指插件的库目录，如果不设置，他会出几个东西找不到的\r\n            htmlDecode: \"style,script,iframe\", //这个是过滤掉的标签\r\n            tex: true,\r\n            emoji: true,\r\n            taskList: true,\r\n            flowChart: true,\r\n            sequenceDiagram: true,\r\n            saveHTMLToTextarea: true,\r\n            markdown : \"##在这里尽情的书写你娴熟的markdown吧\",  //这个吧，你刚开始实例化时他会有个默认的英文的默认输入 ：`Enjoy Markdown! coding now ···`\r\n        });\r\n```\r\n![](/static/uploads/images/20180810183147511e0fa978a54b8b9dc14f94675daa15.png)\r\n\r\n','<blockquote>\r\n<p>本身连续一段时间都在整理js的知识的，后来在项目中要用到markdown，所以又跑来研究markdown了，沿用小袁同学<sup>①</sup>的处理方式，采用了editor.md插件&gt;的处理方式，采用了editor.md插件</p>\r\n</blockquote>\r\n<p>在百度上参考了诸多教程，发现都是每个写一截，要拼凑起来才能得到准确的使用方案，所以，我特意拼凑后再写成笔记，以供参考。</p>\r\n<p>我是用thinkphp5 来开发公司官方网站的后台的，产品内容这块非常合适使用markdown来存储数据，所以呢，就起心开始搞。<br>1、准备东西哇<br>到github<sup>②</sup>去下载最新的插件版本<br>2、把插件解压后抽出要用的文件放进公共插件库<br>这里是我存放的路径<br>我把他存到 <code>public/static/lib</code> 里<br><img src=\"/static/uploads/images/20180810180857a85d09eb505542afb0e692584bbcf275.png\" alt=\"\"><br>注意画红框的就是插件目录<br>3、引入css文件及js文件<br><img src=\"/static/uploads/images/20180810181345ad221eb60542454fbc6454261f28a58c.png\" alt=\"\"><br><img src=\"/static/uploads/images/20180810181357a6ab708d721b41c4987cb1541ad9194d.png\" alt=\"\"><br>上面我就不解释了，我要在add.html中使用markdown 我就在add.html中引入，为什么呢？<br>自己猜去吧！<br><code>如果你不用的地方也加载进去的话，势必会影响loading的速度，你是想快点呢还是想慢点呢？</code><br>4、在想要用markdown的地方加上容器，我这个功能就加了两个<br><code>这里引申的知识是在一个页面里实例化多个markdown编辑器</code><br>待会我解释实例化时再来说多个编辑器如何处理。<br><img src=\"/static/uploads/images/20180810181913a59b7e83945e46c191913468a636bed4.png\" alt=\"\"><br><img src=\"/static/uploads/images/201808101819236efb11afe68d48679b1fd4365601c1e1.png\" alt=\"\"><br>嗯，其实刚开始我还想把Html和markdown一起存的，后来我的同事小袁说，没必要，你存储了markdown，给前端去渲染，还好点。<br>    a、实例化时 他的name值可以随便改<br>    b、不需要自己写得自己都搞不明白了，要简洁</p>\r\n<pre><code>&lt;div id=&quot;features&quot;&gt;\r\n      &lt;textarea name=&#39;features&#39; style=&quot;display:none;&quot;&gt;&lt;/textarea&gt;\r\n&lt;/div&gt;\r\n</code></pre><p>这样就够了<br>5、实例化markdown，一听见实例化 是不是就心里嘚了一下？其实很简单的</p>\r\n<pre><code>var Editor;\r\n    $(function () {\r\n        Editor = editormd(&quot;content&quot;, {\r\n            width: &quot;100%&quot;,  //宽度设置\r\n            height: 320,    //高度设置\r\n            path: &quot;__STATIC__/lib/markdown/lib/&quot;,   //这个东西很重要，他是指插件的库目录，如果不设置，他会出几个东西找不到的\r\n            htmlDecode: &quot;style,script,iframe&quot;, //这个是过滤掉的标签\r\n            tex: true,\r\n            emoji: true,\r\n            taskList: true,\r\n            flowChart: true,\r\n            sequenceDiagram: true,\r\n            saveHTMLToTextarea: true,\r\n            markdown : &quot;##在这里尽情的书写你娴熟的markdown吧&quot;,  //这个吧，你刚开始实例化时他会有个默认的英文的默认输入 ：`Enjoy Markdown! coding now ···`\r\n        });\r\n</code></pre><p><img src=\"/static/uploads/images/20180810183147511e0fa978a54b8b9dc14f94675daa15.png\" alt=\"\"></p>\r\n','2970940'),(66,2,'TinkPHP 的读取器（又称获取器）的妙用','p20dd434f','根据某个字段的值返回一个前端直接渲染的数据','学习和工作是分不开的，总有你不知道的，也总有比你牛逼的人;俗话说的好哇！叫做专业与专业之间只差两个字——高度(深度)',1,2,20,'2019-11-24 02:01:35','2019-11-24 01:59:48','','学习和工作是分不开的，总有你不知道的，也总有比你牛逼的人;俗话说的好哇！叫做专业与专业之间只差两个字——高度(深度)','> 使用thinkPHP开发了很久，才逐步回来仔细审视官方搞的说明文档，其实有点不行哇，但是只要有心，反过来看也没有什么不好的。\r\n\r\n与此同时，我也终于直到为什么官方的文档写的是这个结构了，如果不是特别有耐心的同学，估计就此失去了信心。如果和我说的一样，那么你可能需要去找一些高手录制的教程来辅助你的学习，并第一时间应用到你的项目中去。只有这样，你才有可能回来重读官方文档，至少我是这么干的，但不代表所有人哦。\r\n本文介绍读取器，官方如此介绍\r\n> 获取器的作用是在获取数据的字段值后自动进行处理，例如，我们需要对状态值进行转换，可以使用：\r\n\r\n```php\r\nclass User extends Model \r\n{\r\n    public function getStatusAttr($value)\r\n    {\r\n        $status = [-1=>\'删除\',0=>\'禁用\',1=>\'正常\',2=>\'待审核\'];\r\n        return $status[$value];\r\n    }\r\n}\r\n```\r\n上面是官方手册给的实例，那么在世纪开发中，能快速帮我们解决一些什么问题呢？\r\n1、就是转换数据，如根据分类的ID返回他的分类名，这在开发中经常遇到是吧！\r\n2、给定一个配置，然后拼接返回一个正确直观的数据\r\n下面来一个例子，这个例子是来自于```七月```的讲座：\r\n```php\r\npublic function getUrlAttr($value,$data){\r\n	$finaUrl=$value;\r\n	if($data[\'from] == 1){\r\n		$finaUrl=config(\'setting.img_prefix\').$value;\r\n	}\r\n	return $finalUrl;\r\n}\r\n```\r\n本例中，getUrlAttr接收两个参数，第一个自然是你的字段值，第二个是一个数组，他包含你已经找到的单条数据的数组。\r\nconfig来自于thinkPHP的extra,关于extra我专门记录一篇笔记，等我把这个知识点记忆牢固了然后再写一篇来加强一下，这里按下不表。\r\n他这个读取器和AOP切面思维是有很强的相关性的，读取器是AOP的一个表达方式。你觉得呢?\r\n\r\n','<blockquote>\r\n<p>使用thinkPHP开发了很久，才逐步回来仔细审视官方搞的说明文档，其实有点不行哇，但是只要有心，反过来看也没有什么不好的。</p>\r\n</blockquote>\r\n<p>与此同时，我也终于直到为什么官方的文档写的是这个结构了，如果不是特别有耐心的同学，估计就此失去了信心。如果和我说的一样，那么你可能需要去找一些高手录制的教程来辅助你的学习，并第一时间应用到你的项目中去。只有这样，你才有可能回来重读官方文档，至少我是这么干的，但不代表所有人哦。<br>本文介绍读取器，官方如此介绍</p>\r\n<blockquote>\r\n<p>获取器的作用是在获取数据的字段值后自动进行处理，例如，我们需要对状态值进行转换，可以使用：</p>\r\n</blockquote>\r\n<pre><code class=\"lang-php\">class User extends Model \r\n{\r\n    public function getStatusAttr($value)\r\n    {\r\n        $status = [-1=&gt;&#39;删除&#39;,0=&gt;&#39;禁用&#39;,1=&gt;&#39;正常&#39;,2=&gt;&#39;待审核&#39;];\r\n        return $status[$value];\r\n    }\r\n}\r\n</code></pre>\r\n<p>上面是官方手册给的实例，那么在世纪开发中，能快速帮我们解决一些什么问题呢？<br>1、就是转换数据，如根据分类的ID返回他的分类名，这在开发中经常遇到是吧！<br>2、给定一个配置，然后拼接返回一个正确直观的数据<br>下面来一个例子，这个例子是来自于<code>七月</code>的讲座：</p>\r\n<pre><code class=\"lang-php\">public function getUrlAttr($value,$data){\r\n    $finaUrl=$value;\r\n    if($data[&#39;from] == 1){\r\n        $finaUrl=config(&#39;setting.img_prefix&#39;).$value;\r\n    }\r\n    return $finalUrl;\r\n}\r\n</code></pre>\r\n<p>本例中，getUrlAttr接收两个参数，第一个自然是你的字段值，第二个是一个数组，他包含你已经找到的单条数据的数组。<br>config来自于thinkPHP的extra,关于extra我专门记录一篇笔记，等我把这个知识点记忆牢固了然后再写一篇来加强一下，这里按下不表。<br>他这个读取器和AOP切面思维是有很强的相关性的，读取器是AOP的一个表达方式。你觉得呢?</p>\r\n','2970940'),(67,2,'利用ThinkPHP+aws s3 来上传静态文件','p36962a4a','aws_s3,thinkPHP,qiniuyun','总结归纳五月份工作采坑记，当初如果不坚持下来，现在可能还是在原地打转，所以我坚信我一步一个脚印的让自己过的更好！',1,2,20,'2019-11-24 02:02:58','2019-11-24 01:59:48','','总结归纳五月份工作采坑记，当初如果不坚持下来，现在可能还是在原地打转，所以我坚信我一步一个脚印的让自己过的更好！','### 原由\r\n\r\n我们在日常工作中一般会遇到你的服务器被请求拖慢的情况，刚开始我也是茫茫然，不知所措，但是我是公司里面负责架构的人啦，不能坐视不管，所以拼命求救。\r\n\r\n这里总结一下大部分的看法\r\n\r\n1. 你的服务器请求太多了，一个子域名在特定的时间接受的请求是有限的\r\n2. 你的服务器的I/O到达了瓶颈\r\n3. 你的静态资源把网络卡死了，一直在转圈圈\r\n\r\n上面的所有的观点都指向了一个方案——动静分离\r\n\r\n我刚开始也不知道啥是动静分离哈，于是乎百度一看，原来稍微大点的项目都要用到动静分离。据说还有稍微负载大点的连数据库都要分离呢，不光分离，还需要读写分离。\r\n\r\n### 行动\r\n\r\n有了理论基础，那就是开干呗。\r\n\r\n1. 在市场上找与我们公司匹配的分离方案\r\n2. 先把静态资源（上传的文件）分离到 aws s3中，我们的客户是国外居多\r\n3. 问高人分离的方案\r\n4. 动手开干\r\n\r\n### 结果\r\n\r\n我的最后方案是：\r\n\r\n1. 后台采用我娴熟的thinkPHP框架，这次是采用TP5.1,肯定会有小伙伴问我为毛不用TP6.0搞哇，这个破框架太扯，一年能给你弄出几个大版本出来，你追新？算是一个巨坑，关键是他不支持无缝升级。\r\n2. 静态资源，经过多方面的考虑，放置于 aws s3上，因为直接开通，不用向公司申请就能用\r\n3. 前台首次采用vue.js\r\n\r\n因为我是负责后端的，所以我用这里只写后端的东西，记录一下，方便以后查阅和升级改造\r\n\r\n首先、利用composer安装我们的aws sdk\r\n\r\n```php\r\ncomposer require aws/aws-sdk-php\r\n```\r\n\r\n自动加载是thinkPHP帮忙处理了，这里不多说，那些刨根问底的人去www.kancloud.cn去看看，或许能得到更多。\r\n\r\n其次、我跟着aws API文档编写一个工具类 aws.php\r\n\r\n文件有注释，所有这里不做太多的解释\r\n\r\n\r\n```php\r\n<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: admin\r\n * Date: 2019/5/11\r\n * Time: 8:47\r\n */\r\n\r\nnamespace app\\common\\helper;\r\n\r\nuse Aws\\Exception\\AwsException;\r\nuse Aws\\Exception\\MultipartUploadException;\r\nuse Aws\\S3\\S3Client;\r\nuse Aws\\S3\\MultipartUploader;\r\nuse think\\facade\\Config;\r\n\r\n/**\r\n * Class Aws\r\n * @package app\\common\\helper\r\n */\r\nclass Aws\r\n{\r\n    protected $Bucket;\r\n\r\n    /**\r\n     *  最后修改日期：20190520  1314520  我就是那个爱你的pythoner 啊\r\n     *  本方法 创建一个s3的客户端，app_key  option 都存储在app.config中\r\n     *  具体写法 请参考 aws s3的php sdk 示例\r\n     *  https://docs.aws.amazon.com/zh_cn/sdk-for-php/v3/developer-guide/getting-started_basic-usage.html\r\n     * @return S3Client\r\n     */\r\n    public static function createClient()\r\n    {\r\n        $aws_app_key = Config::get(\'app.aws_app_key\');\r\n        $aws_options = Config::get(\'app.aws_options\');\r\n        $options = [\r\n            \'version\' => $aws_options[\'version\'],\r\n            \'region\' => $aws_options[\'region\'],\r\n            \'credentials\' => [\r\n                \'key\' => $aws_app_key[\'key\'],\r\n                \'secret\' => $aws_app_key[\'secret\']\r\n            ],\r\n            \'debug\' => $aws_options[\'debug\']\r\n        ];\r\n        $s3 = new S3Client($options);\r\n        return $s3;\r\n    }\r\n\r\n    /**\r\n     * @param $source\r\n     * 源文件 上传文件 修改时间 20190517\r\n     * 本方法 上传文件到s3 存储桶中\r\n     * 需要两个参数 第一个参数是文件本身\r\n     * 第二个是 文件名 也就是key\r\n     * 该方法能将文件上传到亚马逊s3,如果成功返回文件在s3中的地址；\r\n     * API参考 连接  MultipartUploader\r\n     * https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-s3-2006-03-01.html\r\n     * @param $key\r\n     * @return mixed|void\r\n     */\r\n    public static function uploader($source, $key)\r\n    {\r\n        $client = self::createClient();\r\n        $uploader = new MultipartUploader($client, $source, [\r\n            \"bucket\" => Config::get(\'app.aws_bucket\'),\r\n            \"key\" => $key,\r\n        ]);\r\n        do {\r\n            try {\r\n                $result = $uploader->upload()->get(\'Key\');\r\n            } catch (MultipartUploadException $exception) {\r\n                rewind($source);\r\n                $uploader = new MultipartUploader($client, $source, [\r\n                    \'state\' => $exception->getState(),\r\n                ]);\r\n            }\r\n        } while (!isset($result));\r\n        return $result;\r\n    }\r\n\r\n    /***\r\n     * 根据key 删除 本桶里的数据\r\n     * 修改时间 ： 20190520 1314520\r\n     * 接收一个参数，就是需要删除的key\r\n     * 如果这个文件存在，就删除，没有查询到这个文件就忽略掉不删除，防止在存储桶里删除了文件，系统里没有删除导致程序出错\r\n     * API 参考  getObjectUrl   deleteObject\r\n     * https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-s3-2006-03-01.html\r\n     * @param $key\r\n     * @return bool\r\n     */\r\n    public static function deleteKey($key)\r\n    {\r\n        $Bucket = Config::get(\'app.aws_bucket\');\r\n        $client = self::createClient();\r\n        try {\r\n            $client->getObjectUrl($Bucket, $key); //有url\r\n            try{\r\n                $client->deleteObject([\'Bucket\' => $Bucket, \'Key\' => $key,]);\r\n                return true; //删除成功\r\n            }catch (AwsException $exception){\r\n                return false; //删除失败！\r\n            }\r\n        } catch (AwsException $exception) {\r\n            return true; // 所查询的 KEY 不存在 不需要删除\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n有了这个类后，我们就可以use 他啊，很方便，我这里全部都定义了静态方法，在网上有看到他们的bucket \\key 都放在这个文件里，我觉得不妥，我就提取出来放到了config里去了，所以这里你看不到真实的appkey  bucket等信息\r\n\r\n再次、我们就是调用该类，进行上传 和删除工作了是吧，这里提一个傻逼搞了一个错误2天才搞定，你知道是什么吗？哈哈。我在刚开始开发时把aws sdk的debug开启了，刚开始还蛮爽，都看到了所有的信息，但是后来，我要调用格式化数据是，发现这根本不是我要的数据，折腾了两天，结果把debug关闭就好了。我也是醉了。\r\n\r\n```php\r\n<?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: admin\r\n * Date: 2019/5/13\r\n * Time: 14:05\r\n */\r\n\r\nnamespace app\\admin\\controller;\r\n\r\nuse app\\common\\helper\\Aws as AwsHelper;\r\n\r\n/**\r\n * Class Aws\r\n * @package app\\admin\\controller\r\n */\r\nclass Aws extends Base\r\n{\r\n    public function uploader()\r\n    {\r\n        if (Request()->isGet()) {\r\n            return \"ok\";\r\n        }\r\n        if (Request()->isPost()) {\r\n            $soure = $this->request->file(\'file\');\r\n            $key = $soure->getInfo(\'name\');\r\n            $result = AwsHelper::uploader($soure, $key);\r\n            if ($result) {\r\n                return $result;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n### 问题\r\n\r\n上传，该方法接受post请求，将文件接受到$soure中，上面 use AwsHelper类，下面就直接调用他里面的uploader方法，即可把文件上传到s3的桶里去。这里当然经历了很多曲折\r\n\r\n1. 开启那个傻逼模式的debug，关闭他\r\n2. 上传文件大于50M就傻缺了\r\n   1. 修改php.ini 里的  upload_max_filesize  为300M，因为我这里的文件可能会在300M以下\r\n   2. 修改nginx.conf 里 http段下面的  client_body_timeout 300s; client_max_body_size 300m;\r\n3. 上线到线上服务器后发现超时错误，和超过内存限制错误\r\n   1. 修改php.ini里的几个参数\r\n      1. memory_limit = 256M  //这个参数后面发现可以视情况调整小一点，我们要根据服务器的配置来调整这个参数哈\r\n      2. max_input_time = 900 //这个时间是我们上线后才发现有问题的，把这个调长一点就能好了，具体多长看情况\r\n      3. max_execution = 300 //我这里 从他原来的90 调整到300 \r\n4. 上传接收文件并上传是交给apache完成的，所以apache的配置也要修改，只不过他的这个修改在httpd-default.conf里\r\n   1. 这个问题是关于上传到aws超时故障的，我们将Timeout  设置为3600\r\n5. 上线时发现thinkPHP 5.1 需要支持到PHP7以上才能工作\r\n   1. 升级php5.6 到php-7.2.13\r\n   2. 开启强制路由，用于防止一些安全事故发生的，我在Python 里写的都是基于路由的，tornado、flask里 都是基于路由的\r\n   3. 在larval里 就明确地需要用路由映射才能使用\r\n\r\n### 总结\r\n\r\n1. 开发过程中一定要写好故障处理指南，后面在其他项目中会减少跳坑动作\r\n2. 你写的文档会被别人看到，人家会来批判（喷水）你的编写，你可以从评论中学习其他高人的看法、\r\n3. 总结归纳你这个过程里的所有的坑，会让你更充实\r\n\r\n### 下一步\r\n\r\n新技术总是从边缘来到中心的，所以别以为现在我们学习的这些东西没啥用，或许哪天他就是主流。我兄弟袁普照就是这样。','<h3 id=\"h3-u539Fu7531\"><a name=\"原由\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>原由</h3><p>我们在日常工作中一般会遇到你的服务器被请求拖慢的情况，刚开始我也是茫茫然，不知所措，但是我是公司里面负责架构的人啦，不能坐视不管，所以拼命求救。</p>\r\n<p>这里总结一下大部分的看法</p>\r\n<ol>\r\n<li>你的服务器请求太多了，一个子域名在特定的时间接受的请求是有限的</li><li>你的服务器的I/O到达了瓶颈</li><li>你的静态资源把网络卡死了，一直在转圈圈</li></ol>\r\n<p>上面的所有的观点都指向了一个方案——动静分离</p>\r\n<p>我刚开始也不知道啥是动静分离哈，于是乎百度一看，原来稍微大点的项目都要用到动静分离。据说还有稍微负载大点的连数据库都要分离呢，不光分离，还需要读写分离。</p>\r\n<h3 id=\"h3-u884Cu52A8\"><a name=\"行动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>行动</h3><p>有了理论基础，那就是开干呗。</p>\r\n<ol>\r\n<li>在市场上找与我们公司匹配的分离方案</li><li>先把静态资源（上传的文件）分离到 aws s3中，我们的客户是国外居多</li><li>问高人分离的方案</li><li>动手开干</li></ol>\r\n<h3 id=\"h3-u7ED3u679C\"><a name=\"结果\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>结果</h3><p>我的最后方案是：</p>\r\n<ol>\r\n<li>后台采用我娴熟的thinkPHP框架，这次是采用TP5.1,肯定会有小伙伴问我为毛不用TP6.0搞哇，这个破框架太扯，一年能给你弄出几个大版本出来，你追新？算是一个巨坑，关键是他不支持无缝升级。</li><li>静态资源，经过多方面的考虑，放置于 aws s3上，因为直接开通，不用向公司申请就能用</li><li>前台首次采用vue.js</li></ol>\r\n<p>因为我是负责后端的，所以我用这里只写后端的东西，记录一下，方便以后查阅和升级改造</p>\r\n<p>首先、利用composer安装我们的aws sdk</p>\r\n<pre><code class=\"lang-php\">composer require aws/aws-sdk-php\r\n</code></pre>\r\n<p>自动加载是thinkPHP帮忙处理了，这里不多说，那些刨根问底的人去www.kancloud.cn去看看，或许能得到更多。</p>\r\n<p>其次、我跟着aws API文档编写一个工具类 aws.php</p>\r\n<p>文件有注释，所有这里不做太多的解释</p>\r\n<pre><code class=\"lang-php\">&lt;?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: admin\r\n * Date: 2019/5/11\r\n * Time: 8:47\r\n */\r\n\r\nnamespace app\\common\\helper;\r\n\r\nuse Aws\\Exception\\AwsException;\r\nuse Aws\\Exception\\MultipartUploadException;\r\nuse Aws\\S3\\S3Client;\r\nuse Aws\\S3\\MultipartUploader;\r\nuse think\\facade\\Config;\r\n\r\n/**\r\n * Class Aws\r\n * @package app\\common\\helper\r\n */\r\nclass Aws\r\n{\r\n    protected $Bucket;\r\n\r\n    /**\r\n     *  最后修改日期：20190520  1314520  我就是那个爱你的pythoner 啊\r\n     *  本方法 创建一个s3的客户端，app_key  option 都存储在app.config中\r\n     *  具体写法 请参考 aws s3的php sdk 示例\r\n     *  https://docs.aws.amazon.com/zh_cn/sdk-for-php/v3/developer-guide/getting-started_basic-usage.html\r\n     * @return S3Client\r\n     */\r\n    public static function createClient()\r\n    {\r\n        $aws_app_key = Config::get(&#39;app.aws_app_key&#39;);\r\n        $aws_options = Config::get(&#39;app.aws_options&#39;);\r\n        $options = [\r\n            &#39;version&#39; =&gt; $aws_options[&#39;version&#39;],\r\n            &#39;region&#39; =&gt; $aws_options[&#39;region&#39;],\r\n            &#39;credentials&#39; =&gt; [\r\n                &#39;key&#39; =&gt; $aws_app_key[&#39;key&#39;],\r\n                &#39;secret&#39; =&gt; $aws_app_key[&#39;secret&#39;]\r\n            ],\r\n            &#39;debug&#39; =&gt; $aws_options[&#39;debug&#39;]\r\n        ];\r\n        $s3 = new S3Client($options);\r\n        return $s3;\r\n    }\r\n\r\n    /**\r\n     * @param $source\r\n     * 源文件 上传文件 修改时间 20190517\r\n     * 本方法 上传文件到s3 存储桶中\r\n     * 需要两个参数 第一个参数是文件本身\r\n     * 第二个是 文件名 也就是key\r\n     * 该方法能将文件上传到亚马逊s3,如果成功返回文件在s3中的地址；\r\n     * API参考 连接  MultipartUploader\r\n     * https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-s3-2006-03-01.html\r\n     * @param $key\r\n     * @return mixed|void\r\n     */\r\n    public static function uploader($source, $key)\r\n    {\r\n        $client = self::createClient();\r\n        $uploader = new MultipartUploader($client, $source, [\r\n            &quot;bucket&quot; =&gt; Config::get(&#39;app.aws_bucket&#39;),\r\n            &quot;key&quot; =&gt; $key,\r\n        ]);\r\n        do {\r\n            try {\r\n                $result = $uploader-&gt;upload()-&gt;get(&#39;Key&#39;);\r\n            } catch (MultipartUploadException $exception) {\r\n                rewind($source);\r\n                $uploader = new MultipartUploader($client, $source, [\r\n                    &#39;state&#39; =&gt; $exception-&gt;getState(),\r\n                ]);\r\n            }\r\n        } while (!isset($result));\r\n        return $result;\r\n    }\r\n\r\n    /***\r\n     * 根据key 删除 本桶里的数据\r\n     * 修改时间 ： 20190520 1314520\r\n     * 接收一个参数，就是需要删除的key\r\n     * 如果这个文件存在，就删除，没有查询到这个文件就忽略掉不删除，防止在存储桶里删除了文件，系统里没有删除导致程序出错\r\n     * API 参考  getObjectUrl   deleteObject\r\n     * https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-s3-2006-03-01.html\r\n     * @param $key\r\n     * @return bool\r\n     */\r\n    public static function deleteKey($key)\r\n    {\r\n        $Bucket = Config::get(&#39;app.aws_bucket&#39;);\r\n        $client = self::createClient();\r\n        try {\r\n            $client-&gt;getObjectUrl($Bucket, $key); //有url\r\n            try{\r\n                $client-&gt;deleteObject([&#39;Bucket&#39; =&gt; $Bucket, &#39;Key&#39; =&gt; $key,]);\r\n                return true; //删除成功\r\n            }catch (AwsException $exception){\r\n                return false; //删除失败！\r\n            }\r\n        } catch (AwsException $exception) {\r\n            return true; // 所查询的 KEY 不存在 不需要删除\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<p>有了这个类后，我们就可以use 他啊，很方便，我这里全部都定义了静态方法，在网上有看到他们的bucket \\key 都放在这个文件里，我觉得不妥，我就提取出来放到了config里去了，所以这里你看不到真实的appkey  bucket等信息</p>\r\n<p>再次、我们就是调用该类，进行上传 和删除工作了是吧，这里提一个傻逼搞了一个错误2天才搞定，你知道是什么吗？哈哈。我在刚开始开发时把aws sdk的debug开启了，刚开始还蛮爽，都看到了所有的信息，但是后来，我要调用格式化数据是，发现这根本不是我要的数据，折腾了两天，结果把debug关闭就好了。我也是醉了。</p>\r\n<pre><code class=\"lang-php\">&lt;?php\r\n/**\r\n * Created by PhpStorm.\r\n * User: admin\r\n * Date: 2019/5/13\r\n * Time: 14:05\r\n */\r\n\r\nnamespace app\\admin\\controller;\r\n\r\nuse app\\common\\helper\\Aws as AwsHelper;\r\n\r\n/**\r\n * Class Aws\r\n * @package app\\admin\\controller\r\n */\r\nclass Aws extends Base\r\n{\r\n    public function uploader()\r\n    {\r\n        if (Request()-&gt;isGet()) {\r\n            return &quot;ok&quot;;\r\n        }\r\n        if (Request()-&gt;isPost()) {\r\n            $soure = $this-&gt;request-&gt;file(&#39;file&#39;);\r\n            $key = $soure-&gt;getInfo(&#39;name&#39;);\r\n            $result = AwsHelper::uploader($soure, $key);\r\n            if ($result) {\r\n                return $result;\r\n            }\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n<h3 id=\"h3-u95EEu9898\"><a name=\"问题\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>问题</h3><p>上传，该方法接受post请求，将文件接受到$soure中，上面 use AwsHelper类，下面就直接调用他里面的uploader方法，即可把文件上传到s3的桶里去。这里当然经历了很多曲折</p>\r\n<ol>\r\n<li>开启那个傻逼模式的debug，关闭他</li><li>上传文件大于50M就傻缺了<ol>\r\n<li>修改php.ini 里的  upload_max_filesize  为300M，因为我这里的文件可能会在300M以下</li><li>修改nginx.conf 里 http段下面的  client_body_timeout 300s; client_max_body_size 300m;</li></ol>\r\n</li><li>上线到线上服务器后发现超时错误，和超过内存限制错误<ol>\r\n<li>修改php.ini里的几个参数<ol>\r\n<li>memory_limit = 256M  //这个参数后面发现可以视情况调整小一点，我们要根据服务器的配置来调整这个参数哈</li><li>max_input_time = 900 //这个时间是我们上线后才发现有问题的，把这个调长一点就能好了，具体多长看情况</li><li>max_execution = 300 //我这里 从他原来的90 调整到300 </li></ol>\r\n</li></ol>\r\n</li><li>上传接收文件并上传是交给apache完成的，所以apache的配置也要修改，只不过他的这个修改在httpd-default.conf里<ol>\r\n<li>这个问题是关于上传到aws超时故障的，我们将Timeout  设置为3600</li></ol>\r\n</li><li>上线时发现thinkPHP 5.1 需要支持到PHP7以上才能工作<ol>\r\n<li>升级php5.6 到php-7.2.13</li><li>开启强制路由，用于防止一些安全事故发生的，我在Python 里写的都是基于路由的，tornado、flask里 都是基于路由的</li><li>在larval里 就明确地需要用路由映射才能使用</li></ol>\r\n</li></ol>\r\n<h3 id=\"h3-u603Bu7ED3\"><a name=\"总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>总结</h3><ol>\r\n<li>开发过程中一定要写好故障处理指南，后面在其他项目中会减少跳坑动作</li><li>你写的文档会被别人看到，人家会来批判（喷水）你的编写，你可以从评论中学习其他高人的看法、</li><li>总结归纳你这个过程里的所有的坑，会让你更充实</li></ol>\r\n<h3 id=\"h3-u4E0Bu4E00u6B65\"><a name=\"下一步\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>下一步</h3><p>新技术总是从边缘来到中心的，所以别以为现在我们学习的这些东西没啥用，或许哪天他就是主流。我兄弟袁普照就是这样。</p>\r\n','2970940');
/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `role_permission`
--

DROP TABLE IF EXISTS `role_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `role_permission` (
  `role_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`role_id`,`permission_id`),
  KEY `permission_id` (`permission_id`),
  CONSTRAINT `role_permission_ibfk_1` FOREIGN KEY (`permission_id`) REFERENCES `permission` (`id`),
  CONSTRAINT `role_permission_ibfk_2` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `role_permission`
--

LOCK TABLES `role_permission` WRITE;
/*!40000 ALTER TABLE `role_permission` DISABLE KEYS */;
/*!40000 ALTER TABLE `role_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `roles`
--

DROP TABLE IF EXISTS `roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `roles` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(64) DEFAULT NULL,
  `create_time` int(11) DEFAULT NULL COMMENT '创建时间',
  `update_time` int(11) DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `roles`
--

LOCK TABLES `roles` WRITE;
/*!40000 ALTER TABLE `roles` DISABLE KEYS */;
INSERT INTO `roles` VALUES (1,'网站管理员',1567913474,1567914683);
/*!40000 ALTER TABLE `roles` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_auth`
--

DROP TABLE IF EXISTS `user_auth`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user_auth` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `uid` int(11) DEFAULT NULL,
  `third_type` varchar(255) DEFAULT NULL,
  `access_token` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `uid` (`uid`),
  CONSTRAINT `user_auth_ibfk_1` FOREIGN KEY (`uid`) REFERENCES `user_info` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_auth`
--

LOCK TABLES `user_auth` WRITE;
/*!40000 ALTER TABLE `user_auth` DISABLE KEYS */;
INSERT INTO `user_auth` VALUES (1,1,'github','668ccb1ecb389114360ee6d0c8c3c82bb6542293'),(4,5,'local','pbkdf2:sha256:150000$eIPsunbx$602772a824eae67373c942db5e93cec60304e5cfdc6cde49acbf49c1c4ee5f2b');
/*!40000 ALTER TABLE `user_auth` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_info`
--

DROP TABLE IF EXISTS `user_info`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user_info` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `nickname` varchar(64) DEFAULT NULL COMMENT '用户昵称',
  `city` varchar(16) DEFAULT NULL COMMENT '城市',
  `company` varchar(32) DEFAULT NULL COMMENT '公司',
  `description` varchar(255) DEFAULT NULL COMMENT '个人简介',
  `email` varchar(64) DEFAULT NULL COMMENT '邮箱',
  `gender` smallint(6) DEFAULT NULL COMMENT '性别',
  `name` varchar(64) DEFAULT NULL COMMENT '真实姓名',
  `phone` varchar(11) DEFAULT NULL COMMENT '手机',
  `signature` varchar(255) DEFAULT NULL COMMENT '个人签名',
  `title` varchar(32) DEFAULT NULL COMMENT '头衔，职位',
  `username` varchar(64) DEFAULT NULL COMMENT '用户名',
  `website` varchar(128) DEFAULT NULL COMMENT '个人网站，博客',
  `avatar_url` varchar(255) DEFAULT NULL,
  `uuid` varchar(64) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uuid` (`uuid`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_info`
--

LOCK TABLES `user_info` WRITE;
/*!40000 ALTER TABLE `user_info` DISABLE KEYS */;
INSERT INTO `user_info` VALUES (1,NULL,NULL,NULL,NULL,'jinxiu89@163.com',NULL,'邱锦',NULL,NULL,NULL,'jinxiu89',NULL,'https://avatars0.githubusercontent.com/u/2970940?v=4','2970940'),(5,NULL,NULL,NULL,NULL,'jinxiu89@wavlink.com',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'81467243');
/*!40000 ALTER TABLE `user_info` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-12-08 21:27:41
